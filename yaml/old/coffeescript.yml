---
language: CoffeeScript
code: coffee
parent: javascript
birth: 2009
description: Offers a more concise syntax and additional features not present in JavaScript. It compiles directly into JavaScript. Its syntax influenced many of the updates in ES6.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          # Good example: Splitting responsibilities into separate classes
          class UserDataManager
              saveUserData: -> # ...

          class UserNotification
              sendNotification: -> # ...

      - title: Bad Example
        code: |
          # Bad example: A class handling both user data management and user notifications
          class User
              saveUserData: -> # ...
              sendNotification: -> # ...

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using abstraction to allow extension without modification
          class Shape
              computeArea: ->

          class Circle extends Shape
              computeArea: -> 3.14 * @radius * @radius

      - title: Bad Example
        code: |
          # Bad example: Modifying existing code to add new functionality
          class Rectangle
              computeArea: -> @width * @height

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          # Good example: Derived classes maintain the behavior of the base class
          class FlyingBird
              fly: -> # ...

          class NonFlyingBird
              walk: -> # ...

      - title: Bad Example
        code: |
          # Bad example: Derived class changes the behavior of the base class
          class Bird
              fly: -> # ...

          class Ostrich extends Bird
              fly: -> throw new Error("Can't fly")

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          # Good example: Breaking down the function into more specific ones
          createPerson = (name, age) -> # ...
          assignTask = (worker, task) -> # ...
          feedWorker = (worker, food) -> # ...

      - title: Bad Example
        code: |
          # Bad example: A function requiring many parameters
          createWorker = (name, age, task, food) -> # ...

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          # Good example: Both high-level and low-level modules depend on abstractions
          class Device
              turnOn: ->

          class Fan extends Device
              turnOn: -> # ...

          class Switch
              constructor: (@device) ->
              operate: -> @device.turnOn()

      - title: Bad Example
        code: |
          # Bad example: High-level module depending on a low-level module
          class LightBulb
              turnOn: -> # ...

          class Switch
              constructor: (@bulb) ->
              operate: -> @bulb.turnOn()

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          # Good example: Single function for repeated logic
          addTax = (price, rate = 0.05) -> price + (price * rate)

      - title: Bad Example
        code: |
          # Bad example: Repeated logic
          addTaxForFood = (price) -> price + (price * 0.05)
          addTaxForElectronics = (price) -> price + (price * 0.05)

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          # Good example: Simplified approach
          isEven = (num) -> num % 2 == 0

      - title: Bad Example
        code: |
          # Bad example: Overcomplicated way to check even numbers
          isEven = (num) -> num % Math.abs(2) == 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          # Good example: Only implement what's needed
          class Car
              drive: -> # ...

      - title: Bad Example
        code: |
          # Bad example: Adding unnecessary features
          class Car
              drive: -> # ...
              fly: -> # ... Cars don't fly!

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          # Good example: Using encapsulation
          class Wallet
              constructor: -> @_money = 100
              getAmount: -> @_money

          class Person
              constructor: -> @wallet = new Wallet()
              getMoneyAmount: -> @wallet.getAmount()

          purchase = (item, buyer) ->
              if buyer.getMoneyAmount() >= item.price
                  # ...

      - title: Bad Example
        code: |
          # Bad example: Accessing nested structures directly
          class Wallet
              constructor: -> @money = { amount: 100 }

          class Person
              constructor: -> @wallet = new Wallet()

          purchase = (item, buyer) ->
              if buyer.wallet.money.amount >= item.price
                  # ...

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          # Good example: Separating concerns into different modules
          class UserDataService
              fetchUserData: -> # ...

          class UserLogic
              calculateAge: -> # ...

          class UserComponent
              render: -> # ...

      - title: Bad Example
        code: |
          # Bad example: Mixing data retrieval and presentation
          class UserComponent
              fetchUserData: -> # ...
              render: -> # ...
              calculateAge: -> # ...
