language: Java
code: java
birth: 1995
parent: c++
description: >
  A widely-used, high-level, object-oriented programming language known for its platform independence.
  Java is used for a wide range of applications, including web development, Android app development, and enterprise software.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate classes
          class UserDataManager {
              void saveUserData() { /* ... */ }
          }

          class UserNotification {
              void sendNotification() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: A class handling both user data management and user notifications
          class User {
              void saveUserData() { /* ... */ }
              void sendNotification() { /* ... */ }
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Using abstraction to allow extension without modification
          interface Shape {
              double calculateArea();
          }

          class Rectangle implements Shape {
              private double width;
              private double height;

              public Rectangle(double width, double height) {
                  this.width = width;
                  this.height = height;
              }

              public double calculateArea() {
                  return width * height;
              }
          }

          class Circle implements Shape {
              private double radius;

              public Circle(double radius) {
                  this.radius = radius;
              }

              public double calculateArea() {
                  return 3.14 * radius * radius;
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          class AreaCalculator {
              double calculateArea(Shape shape) {
                  if (shape instanceof Rectangle) {
                      Rectangle rectangle = (Rectangle) shape;
                      return rectangle.getWidth() * rectangle.getHeight();
                  } else if (shape instanceof Circle) {
                      Circle circle = (Circle) shape;
                      return 3.14 * circle.getRadius() * circle.getRadius();
                  }
                  return 0.0;
              }
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          interface FlyingBird {
              void fly();
          }

          interface NonFlyingBird {
              void walk();
          }
      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          class Bird {
              void fly() { /* ... */ }
          }

          class Ostrich extends Bird {
              void fly() {
                  throw new UnsupportedOperationException("Can't fly");
              }
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Breaking down the interface into more specific ones
          interface Person {
              void work();
          }

          interface Eater {
              void eat();
          }
      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          interface Worker {
              void work();
              void eat();
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          interface Device {
              void turnOn();
          }

          class Switch {
              private final Device device;

              public Switch(Device device) {
                  this.device = device;
              }

              void operate() {
                  device.turnOn();
              }
          }

          class Fan implements Device {
              void turnOn() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          class LightBulb {
              void turnOn() { /* ... */ }
          }

          class Switch {
              private final LightBulb bulb;

              public Switch(LightBulb bulb) {
                  this.bulb = bulb;
              }

              void operate() {
                  bulb.turnOn();
              }
          }

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Single function for repeated logic
          double addTax(double price, double rate) {
              return price + (price * rate);
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic
          double addTaxForFood(double price) {
              return price + (price * 0.05);
          }

          double addTaxForElectronics(double price) {
              return price + (price * 0.05);
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified approach
          boolean isEven(int num) {
              return num % 2 == 0;
          }
      - title: Bad Example
        code: |
          // Bad example: Overcomplicated way to check even numbers
          boolean isEven(int num) {
              return num % Math.abs(2) == 0;
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Only implement what's needed
          class Car {
              void drive() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          class Car {
              void drive() { /* ... */ }
              void fly() { /* ... */ }  // Cars don't fly!
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using encapsulation
          class Wallet {
              private double money;

              Wallet(double money) {
                  this.money = money;
              }

              double getMoneyAmount() {
                  return money;
              }
          }

          class Person {
              private Wallet wallet;

              Person(double money) {
                  this.wallet = new Wallet(money);
              }

              double getMoneyAmount() {
                  return wallet.getMoneyAmount();
              }
          }

