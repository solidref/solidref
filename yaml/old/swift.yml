---
language: Swift
code: swift
parent: objectivec
birth: 2014
description: >
  Swift is a general-purpose, multi-paradigm programming language developed by Apple. It is designed to be concise, safe, and interoperable with Objective-C. Swift is commonly used for iOS, macOS, watchOS, and tvOS app development.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Separating responsibilities into separate classes
          class DataStorage {
              var data: [String] = []
          }

          class UIHandler {
              func updateUI(with data: [String]) {
                  // ...
              }
          }
      - title: Bad Example
        code: |
          // Bad example: A class handling both data storage and UI presentation
          class DataAndUIHandler {
              var data: [String] = []
              func updateUI() {
                  // ...
              }
          }
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Extending functionality without modifying existing class
          class Circle: Shape {
              var radius: Float = 0.0
              override func calculateArea() -> Float {
                  return 3.14 * radius * radius
              }
          }

          class Rectangle: Shape {
              var width: Float = 0.0
              var height: Float = 0.0
              override func calculateArea() -> Float {
                  return width * height
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          class Shape {
              var type: String = ""
              func calculateArea() -> Float {
                  fatalError("Not implemented")
              }
          }
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          class Sparrow: Bird {
              override func fly() {
                  // Flying behavior
              }
          }

          class NonFlyingBird {
              func walk() {
                  // Walking behavior
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          class Ostrich: Bird {
              override func fly() {
                  fatalError("Can't fly!")
              }
          }

          // Base class
          class Bird {
              func fly() {
                  // ...
              }
          }
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Smaller, more specific protocols
          protocol Workable {
              func work()
          }

          protocol Eatable {
              func eat()
          }
      - title: Bad Example
        code: |
          // Bad example: A single protocol with multiple methods
          protocol Worker {
              func work()
              func eat()
          }
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level classes depend on an abstraction
          protocol Device {
              func turnOn()
          }

          class LightBulb: Device {
              func turnOn() {
                  // ...
              }
          }

          class Fan: Device {
              func turnOn() {
                  // ...
              }
          }

          class Switch {
              var device: Device

              init(device: Device) {
                  self.device = device
              }

              func operate() {
                  device.turnOn()
              }
          }
      - title: Bad Example
        code: |
          // Bad example: High-level class depending on a low-level class
          class LightBulb {
              func turnOn() {
                  // ...
              }
          }

          class Switch {
              var bulb: LightBulb

              init(bulb: LightBulb) {
                  self.bulb = bulb
              }

              func operate() {
                  bulb.turnOn()
              }
          }
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Reusing a single function for tax calculation
          func calculateTax(rate: Float, for price: Float) -> Float {
              return price * rate
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic for tax calculation
          func calculateTaxForFood(price: Float) -> Float {
              return price * 0.1 // 10% tax
          }

          func calculateTaxForElectronics(price: Float) -> Float {
              return price * 0.1 // 10% tax
          }
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified logic for checking even numbers
          func isEven(num: Int) -> Bool {
              return num % 2 == 0
          }
      - title: Bad Example
        code: |
          // Bad example: Overly complex logic for checking even numbers
          func isEven(num: Int) -> Bool {
              if num > 0 {
                  if num % 2 == 0 {
                      return true
                  }
                  return false
              } else {
                  if num % -2 == 0 {
                      return true
                  }
                  return false
              }
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Implementing only what's needed
          class Car {
              func drive() {
                  // ...
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features to a class
          class Car {
              func drive() {
                  // ...
              }

              func fly() {
                  // Cars don't fly!
              }
          }
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using pattern matching to minimize knowledge
          class Wallet {
              var money: Float = 0.0
          }

          class Person {
              var wallet: Wallet = Wallet()
          }

          func purchaseItem(itemPrice: Float, person: Person) -> Bool {
              return person.wallet.money >= itemPrice
          }
      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          class Wallet {
              var money: Float = 0.0
          }

          class Person {
              var wallet: Wallet = Wallet()
          }

          func purchaseItem(itemPrice: Float, buyer: Person) -> Bool {
              return buyer.wallet.money >= itemPrice
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different classes/modules
          class DataStorage {
              func fetchData() {
                  // ...
              }
          }

          class UIComponent {
              func render(data: [String]) {
                  // ...
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval and presentation
          class UserComponent {
              func fetchUserData() {
                  // ...
              }

              func render() {
                  // ...
              }
          }
