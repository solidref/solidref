---
language: Objective-C
code: objectivec
parent: C
birth: 1984
description: >
  Objective-C is a general-purpose, object-oriented programming language. It is known for its use in developing software for Apple's macOS and iOS operating systems.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Separating responsibilities into separate classes
          @interface DataManager : NSObject
          - (void)saveData:(NSData *)data;
          @end

          @interface NotificationManager : NSObject
          - (void)sendNotification:(NSString *)notification;
          @end
      - title: Bad Example
        code: |
          // Bad example: A class handling both data management and notifications
          @interface UserHandler : NSObject
          - (void)saveUserData:(NSData *)data;
          - (void)sendNotification:(NSString *)notification;
          @end
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Extending functionality without modifying existing class
          @interface Circle : NSObject
          @property float radius;
          - (float)calculateArea;
          @end

          @implementation Circle
          - (float)calculateArea {
              return 3.14 * _radius * _radius;
          }
          @end

          @interface Rectangle : NSObject
          @property float width;
          @property float height;
          - (float)calculateArea;
          @end

          @implementation Rectangle
          - (float)calculateArea {
              return _width * _height;
          }
          @end
      - title: Bad Example
        code: |
          // Bad example: Modifying existing class to add new functionality
          @interface Shape : NSObject
          @property NSString *type;
          - (float)calculateArea;
          @end
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          @interface Bird : NSObject
          - (void)fly;
          @end

          @interface Sparrow : Bird
          @end

          @implementation Sparrow
          - (void)fly {
              // Flying behavior
          }
          @end

          @interface NonFlyingBird : NSObject
          - (void)walk;
          @end

          @implementation NonFlyingBird
          - (void)walk {
              // Walking behavior
          }
          @end
      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          @interface Ostrich : Bird
          @end

          @implementation Ostrich
          - (void)fly {
              [NSException raise:@"BirdException" format:@"Can't fly!"];
          }
          @end
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Smaller, more specific protocols
          @protocol Workable
          - (void)work;
          @end

          @protocol Eatable
          - (void)eat;
          @end
      - title: Bad Example
        code: |
          // Bad example: A single protocol with multiple methods
          @protocol Worker
          - (void)work;
          - (void)eat;
          @end
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level classes depend on abstractions
          @protocol Device
          - (void)turnOn;
          @end

          @interface LightBulb : NSObject <Device>
          @end

          @implementation LightBulb
          - (void)turnOn {
              // ...
          }
          @end

          @interface Fan : NSObject <Device>
          @end

          @implementation Fan
          - (void)turnOn {
              // ...
          }
          @end

          @interface Switch : NSObject
          - (instancetype)initWithDevice:(id<Device>)device;
          - (void)operate;
          @end

          @implementation Switch
          - (instancetype)initWithDevice:(id<Device>)device {
              // Initialization
          }

          - (void)operate {
              [_device turnOn];
          }
          @end
      - title: Bad Example
        code: |
          // Bad example: High-level class depending on a low-level class
          @interface LightBulb : NSObject
          - (void)turnOn;
          @end

          @implementation LightBulb
          - (void)turnOn {
              // ...
          }
          @end

          @interface Switch : NSObject
          - (instancetype)initWithBulb:(LightBulb *)bulb;
          - (void)operate;
          @end

          @implementation Switch
          - (instancetype)initWithBulb:(LightBulb *)bulb {
              // Initialization
          }

          - (void)operate {
              [_bulb turnOn];
          }
          @end
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Reusing a single function for tax calculation
          - (float)calculateTaxWithRate:(float)rate forPrice:(float)price {
              return price * rate;
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic for tax calculation
          - (float)calculateTaxForFood:(float)price {
              return price * 0.1; // 10% tax
          }

          - (float)calculateTaxForElectronics:(float)price {
              return price * 0.1; // 10% tax
          }
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified logic for checking even numbers
          - (BOOL)isEven:(NSInteger)num {
              return num % 2 == 0;
          }
      - title: Bad Example
        code: |
          // Bad example: Overly complex logic for checking even numbers
          - (BOOL)isEven:(NSInteger)num {
              if (num > 0) {
                  if (num % 2 == 0) {
                      return YES;
                  }
                  return NO;
              } else {
                  if (num % -2 == 0) {
                      return YES;
                  }
                  return NO;
              }
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Implementing only what's needed
          @interface Car : NSObject
          - (void)drive;
          @end
      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          @interface Car : NSObject
          - (void)drive;
          - (void)fly; // Cars don't fly!
          @end
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Minimizing knowledge using delegation
          @interface Wallet : NSObject
          @property (nonatomic, assign) float money;
          @end

          @interface Person : NSObject
          @property (nonatomic, strong) Wallet *wallet;
          @end

          // Inside another class or method
          float itemPrice = ...;
          Person *buyer = ...;
          BOOL canPurchase = buyer.wallet.money >= itemPrice;
      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          @interface Wallet : NSObject
          @property (nonatomic, assign) float money;
          @end

          @interface Person : NSObject
          @property (nonatomic, strong) Wallet *wallet;
          @end

          // Inside another class or method
          float itemPrice = ...;
          Person *buyer = ...;
          BOOL canPurchase = buyer.wallet.money >= itemPrice;
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating data retrieval and presentation concerns
          @interface UserDataService : NSObject
          - (NSArray *)fetchUserData;
          @end

          @interface UserLogic : NSObject
          - (NSInteger)calculateAge;
          @end

          @interface UserComponent : NSObject
          - (void)render;
          @end
      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval and presentation in one class
          @interface UserComponent : NSObject
          - (NSArray *)fetchUserData;
          - (void)render;
          - (NSInteger)calculateAge;
          @end
