---
language: Ada
code: ada
birth: 1983
parent:
  - Pascal
description: Ada is a high-level, statically typed, structured, imperative, and object-oriented high-level computer programming language, extended from Pascal and other languages. Ada95, an enhanced version of Ada, introduced support for real-time systems and object-oriented programming among other features.

principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Using Ada95 features to enhance the class design
          package User_Data_Manager is
             procedure Save_User_Data;
          end User_Data_Manager;

          package User_Notification is
             procedure Send_Notification;
          end User_Notification;
      - title: Good Example (Ada)
        code: |
          -- Good example (Ada): Splitting responsibilities using packages
          package User_Data_Manager is
             procedure Save_User_Data;
          end User_Data_Manager;

          package User_Notification is
             procedure Send_Notification;
          end User_Notification;
      - title: Bad Example (Ada95)
        code: |
          -- Bad example (Ada95): A single Ada95 package handling both user data and notifications
          package User is
             procedure Save_User_Data;
             procedure Send_Notification;
          end User;

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Extending functionality without modifying existing packages
          package Shape is
             type Abstract_Shape is abstract tagged null record;
             function Calculate_Area(Obj : Abstract_Shape) return Float is abstract;
          end Shape;

          package Circle is new Shape with
             type Derived_Circle is new Abstract_Shape with record
                Radius : Float;
             end record;
             overriding function Calculate_Area(Obj : Derived_Circle) return Float;
          end Circle;
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Derived types maintain the behavior of the parent type
          package Bird is
             type Abstract_Bird is abstract tagged null record;
             procedure Fly(Obj : Abstract_Bird) is abstract;
          end Bird;

          package Sparrow is new Bird with
             type Derived_Sparrow is new Abstract_Bird with null record;
             overriding procedure Fly(Obj : Derived_Sparrow);
          end Sparrow;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Derived type changes the behavior of the parent type
          package Bird is
             procedure Fly;
          end Bird;

          package Ostrich is new Bird with
             procedure Fly; -- Raises exception: "Can't fly!"
          end Ostrich;

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): More specific interfaces
          package Workable is
             procedure Work;
          end Workable;

          package Eatable is
             procedure Eat;
          end Eatable;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): A single interface with multiple methods
          package Worker is
             procedure Work;
             procedure Eat;
          end Worker;

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Both high-level and low-level modules depend on an abstraction
          package Device_Interface is
             type Abstract_Device is interface;
             procedure Turn_On(Obj : in out Abstract_Device) is abstract;
          end Device_Interface;

          package Light_Bulb is new Device_Interface with
             type Derived_Light_Bulb is new Abstract_Device with null record;
             overriding procedure Turn_On(Obj : in out Derived_Light_Bulb);
          end Light_Bulb;
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Using a single function for similar operations
          function Calculate_Tax(Rate : Float; Price : Float) return Float is
          begin
             return Price * Rate;
          end Calculate_Tax;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Duplicate functions for the same operation
          function Calculate_Tax_For_Food(Price : Float) return Float is
          begin
             return Price * 0.1; -- 10% tax
          end Calculate_Tax_For_Food;

          function Calculate_Tax_For_Electronics(Price : Float) return Float is
          begin
             return Price * 0.1; -- 10% tax
          end Calculate_Tax_For_Electronics;

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Simple logic for checking even numbers
          function Is_Even(Number : Integer) return Boolean is
          begin
             return (Number mod 2 = 0);
          end Is_Even;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Overcomplicated logic for checking even numbers
          function Is_Even(Number : Integer) return Boolean is
          begin
             if Number > 0 then
                return (Number mod 2 = 0);
             else
                return (Number mod -2 = 0);
             end if;
          end Is_Even;

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Implementing only the necessary functions
          procedure Drive_Car is
          begin
             -- Drive the car
          end Drive_Car;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Implementing unnecessary functions
          procedure Drive_Car is
          begin
             -- Drive the car
          end Drive_Car;

          procedure Fly_Car is
          begin
             -- Cars can't fly!
          end Fly_Car;
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Direct interaction with direct components
          type Wallet is record
             Money : Float := 0.0;
          end record;

          type Person is record
             My_Wallet : Wallet;
          end record;

          function Can_Afford(Item_Price : Float; Buyer : Person) return Boolean is
          begin
             return Buyer.My_Wallet.Money >= Item_Price;
          end Can_Afford;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Exposing and using internal details of an object
          function Get_Wallet_Money(Buyer : Person) return Float is
          begin
             return Buyer.My_Wallet.Money;
          end Get_Wallet_Money;

          function Can_Afford(Item_Price : Float; Buyer : Person) return Boolean is
          begin
             return Get_Wallet_Money(Buyer) >= Item_Price;
          end Can_Afford;

  - title: Separation of Concerns
    examples:
      - title: Good Example (Ada95)
        code: |
          -- Good example (Ada95): Separate data fetching and presentation
          procedure Fetch_Data is
          begin
             -- Fetch some data
          end Fetch_Data;

          procedure Display_Data is
          begin
             -- Display fetched data
          end Display_Data;
      - title: Bad Example (Ada)
        code: |
          -- Bad example (Ada): Combining data fetching and presentation
          procedure Fetch_And_Display is
          begin
             -- Fetch some data
             -- Immediately display the data
          end Fetch_And_Display;
