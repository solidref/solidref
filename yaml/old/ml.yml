---
language: ML
code: ml
birth: 1973
description: >
  A general-purpose functional programming language that heavily influenced many programming languages, including OCaml.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Splitting responsibilities into separate modules *)
          module UserDataManager = struct
            let saveUserData data = (* ... *)
          end;

          module UserNotification = struct
            let sendNotification notification = (* ... *)
          end;

      - title: Bad Example
        code: |
          (* Bad example: A module handling both user data management and user notifications *)
          module User = struct
            let saveUserData data = (* ... *)
            let sendNotification notification = (* ... *)
          end;

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Using abstraction to allow extension without modification *)
          class virtual shape = object
            method virtual calculateArea : float
          end

          class rectangle width height = object
            inherit shape
            method calculateArea = width *. height
          end

          class circle radius = object
            inherit shape
            method calculateArea = 3.14 *. radius *. radius
          end;

      - title: Bad Example
        code: |
          (* Bad example: Modifying existing code to add new functionality *)
          let calculateArea shape =
            match shape with
            | Rectangle (width, height) -> width *. height
            | Circle radius -> 3.14 *. radius *. radius

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Derived classes maintain the behavior of the base class *)
          class virtual flyingBird = object
            method virtual fly : string
          end

          class sparrow = object
            inherit flyingBird
            method fly = "Flying high!"
          end

          class nonFlyingBird = object
            method walk = (* ... *)
          end

      - title: Bad Example
        code: |
          (* Bad example: Derived class changes the behavior of the base class *)
          class bird = object
            method fly = (* ... *)
          end

          class ostrich = object
            inherit bird
            method fly = raise (Failure "Can't fly!")
          end

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Breaking down the interface into more specific ones *)
          module type Workable = sig
            val work : unit -> unit
          end

          module type Eatable = sig
            val eat : unit -> unit
          end

      - title: Bad Example
        code: |
          (* Bad example: A bulky interface *)
          module type Worker = sig
            val work : unit -> unit
            val eat : unit -> unit
          end

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Both high-level and low-level modules depend on abstractions *)
          class virtual device = object
            method virtual turnOn : unit -> unit
          end

          class fan = object
            method turnOn = (* ... *)
          end

          class switch (device : device) = object
            val device = device
            method operate = device#turnOn
          end

      - title: Bad Example
        code: |
          (* Bad example: High-level module depending on a low-level module *)
          class lightBulb = object
            method turnOn = (* ... *)
          end

          class switch bulb = object
            val bulb = bulb
            method operate = bulb#turnOn
          end

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          (* Good example: Single function for repeated logic *)
          let addTax ?(rate=0.05) price = price +. price *. rate;

      - title: Bad Example
        code: |
          (* Bad example: Repeated logic *)
          let addTaxForFood price = price +. price *. 0.05
          let addTaxForElectronics price = price +. price *. 0.05

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          (* Good example: Simplified approach *)
          let isEven num = num mod 2 = 0;

      - title: Bad Example
        code: |
          (* Bad example: Overcomplicated way to check even numbers *)
          let isEven num = num mod (if num > 0 then 2 else -2) = 0;

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          (* Good example: Only implement what's needed *)
          type car = Drive;

      - title: Bad Example
        code: |
          (* Bad example: Adding unnecessary features *)
          type car = Drive | Fly;  (* Cars don't fly! *)

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          (* Good example: Using pattern matching to minimize knowledge *)
          let purchase itemPrice person =
            match person with
            | { wallet = { money } } when money >= itemPrice -> true
            | _ -> false;

      - title: Bad Example
        code: |
          (* Bad example: Accessing nested structures directly *)
          let purchase itemPrice buyer = buyer.wallet.money >= itemPrice;

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          (* Good example: Separating concerns into different modules *)
          module UserDataService = struct
            let fetchUserData () = (* ... *)
          end

          module UserLogic = struct
            let calculateAge () = (* ... *)
          end

          module UserComponent = struct
            let render () = (* ... *)
          end

      - title: Bad Example
        code: |
          (* Bad example: Mixing data retrieval and presentation *)
          module UserComponent = struct
            let fetchUserData () = (* ... *)
            let render () = (* ... *)
            let calculateAge () = (* ... *)
          end
