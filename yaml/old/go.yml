language: Go (Golang)
code: go
birth: 2009
parent: c
description: >
  An open-source, statically-typed, compiled language designed for simplicity and efficiency.
  Go is known for its strong support for concurrent programming and its clean, readable syntax.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate functions
          func SaveUserData(userData UserData) {
              // ...
          }

          func SendNotification(notification Notification) {
              // ...
          }
      - title: Bad Example
        code: |
          // Bad example: A function handling both user data management and user notifications
          func SaveUserData(userData UserData) {
              // ...
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Using interfaces to allow extension without modification
          type Shape interface {
              CalculateArea() float64
          }

          func CalculateArea(shape Shape) float64 {
              return shape.CalculateArea()
          }

          type Rectangle struct {
              Width  float64
              Height float64
          }

          func (r Rectangle) CalculateArea() float64 {
              return r.Width * r.Height
          }

          type Circle struct {
              Radius float64
          }

          func (c Circle) CalculateArea() float64 {
              return 3.14 * c.Radius * c.Radius
          }
      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          func CalculateArea(shape Shape) float64 {
              switch shape.(type) {
              case Rectangle:
                  rect := shape.(Rectangle)
                  return rect.Width * rect.Height
              case Circle:
                  circle := shape.(Circle)
                  return 3.14 * circle.Radius * circle.Radius
              }
              return 0.0
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived types maintain the behavior of the base type
          type FlyingBird interface {
              Fly()
          }

          type NonFlyingBird interface {
              Walk()
          }
      - title: Bad Example
        code: |
          // Bad example: Derived type changes the behavior of the base type
          type Ostrich struct{}

          func (o Ostrich) Fly() {
              panic("Ostrich can't fly")
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Breaking down the interface into more specific ones
          type Workable interface {
              Work()
          }

          type Eatable interface {
              Eat()
          }
      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          type Worker interface {
              Work()
              Eat()
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          type Device interface {
              TurnOn()
          }

          type Fan struct{}

          func (f Fan) TurnOn() {
              // ...
          }

          type SmartSwitch struct {
              Device Device
          }

          func (ss SmartSwitch) Operate() {
              ss.Device.TurnOn()
          }
      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          type LightBulb struct{}

          func (lb LightBulb) TurnOn() {
              // ...
          }

          type Switch struct {
              Bulb LightBulb
          }

          func (s Switch) Operate() {
              s.Bulb.TurnOn()
          }

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Single function for repeated logic
          func AddTax(price, rate float64) float64 {
              return price + (price * rate)
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic
          func AddTaxForFood(price float64) float64 {
              return price + (price * 0.05)
          }

          func AddTaxForElectronics(price float64) float64 {
              return price + (price * 0.05)
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified approach
          func IsEven(num int) bool {
              return num % 2 == 0
          }
      - title: Bad Example
        code: |
          // Bad example: Overcomplicated way to check even numbers
          func IsEven(num int) bool {
              return num % 2 == 0
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Only implement what's needed
          type Car struct{}

          func (c Car) Drive() {
              // ...
          }
      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          type Car struct{}

          func (c Car) Drive() {
              // ...
          }
          func (c Car) Fly() {
              // ...
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using encapsulation
          type Wallet struct {
              money float64
          }

          func NewWallet(initialMoney float64) Wallet {
              return Wallet{money: initialMoney}
          }

          func (w Wallet) GetMoney() float64 {
              return w.money
          }

          type Person struct {
              wallet Wallet
          }

          func NewPerson(initialMoney float64) Person {
              return Person{wallet: NewWallet(initialMoney)}
          }

          func (p Person) CanPurchase(itemPrice float64) bool {
              return p.wallet.GetMoney() >= itemPrice
          }
      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          type Wallet struct {
              Money float64
          }

          type Person struct {
              Wallet Wallet
          }

          func Purchase(itemPrice float64, buyer Person) bool {
              return buyer.Wallet.Money >= itemPrice
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different methods or functions
          type UserDataService struct{}

          func (uds UserDataService) FetchUserData() UserData {
              // ...
          }

          type UserLogic struct{}

          func (ul UserLogic) CalculateAge(user UserData) {
              // ...
          }

          type UserView struct{}

          func (uv UserView) Render(user UserData) {
              // ...
          }
      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval and presentation
          type UserComponent struct{}

          func (uc UserComponent) FetchUserData() UserData {
              // ...
          }

          func (uc UserComponent) Render(user UserData) {
              // ...
          }

          func (uc UserComponent) CalculateAge(user UserData) {
              // ...
          }
