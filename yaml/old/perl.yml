language: Perl
code: perl
birth: 1987
description: Perl is a high-level, general-purpose programming language known for its text processing capabilities. It's widely used for web development, system administration, and more.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          # Good example: Splitting responsibilities into separate subroutines
          sub save_user_data {
              # ...
          }

          sub send_notification {
              # ...
          }
      - title: Bad Example
        code: |
          # Bad example: A subroutine handling both user data management and notifications
          sub user_operations {
              # ...
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using abstraction to allow extension without modification
          package Shape;

          sub calculate_area {
              die "calculate_area not implemented in base class";
          }

          1;
      - title: Bad Example
        code: |
          # Bad example: Modifying existing code to add new functionality
          package AreaCalculator;

          sub calculate_area {
              my ($shape) = @_;
              if ($shape->{type} eq 'Rectangle') {
                  return $shape->{width} * $shape->{height};
              } elsif ($shape->{type} eq 'Circle') {
                  return 3.14 * $shape->{radius} * $shape->{radius};
              }
              return 0.0;
          }

          1;

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          # Good example: Derived subroutines maintain the behavior of the base subroutine
          sub fly {
              # ...
          }

          sub walk {
              # ...
          }
      - title: Bad Example
        code: |
          # Bad example: Derived subroutine changes the behavior of the base subroutine
          sub fly {
              die "Can't fly";
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          # Good example: Implementing specific interfaces
          package Workable;

          sub work {
              # ...
          }

          1;
      - title: Bad Example
        code: |
          # Bad example: A bulky interface
          package Worker;

          sub work {
              # ...
          }

          sub eat {
              # ...
          }

          1;

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          # Good example: Both high-level and low-level modules depend on abstractions
          package Device;

          sub turn_on {
              die "turn_on not implemented in base class";
          }

          1;
      - title: Bad Example
        code: |
          # Bad example: High-level module depending on a low-level module
          package LightBulb;

          sub turn_on {
              # ...
          }

          1;

          package Switch;

          sub operate {
              my ($bulb) = @_;
              $bulb->turn_on();
          }

          1;

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          # Good example: Single subroutine for repeated logic
          sub add_tax {
              my ($price, $rate) = @_;
              $rate //= 0.05;
              return $price + ($price * $rate);
          }
      - title: Bad Example
        code: |
          # Bad example: Repeated logic
          sub add_tax_for_food {
              my ($price) = @_;
              return $price + ($price * 0.05);
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          # Good example: Simplified approach
          sub is_even {
              my ($num) = @_;
              return $num % 2 == 0;
          }
      - title: Bad Example
        code: |
          # Bad example: Overcomplicated way to check even numbers
          sub is_even {
              my ($num) = @_;
              return $num % abs(2) == 0;
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          # Good example: Only implement what's needed
          sub drive {
              # ...
          }
      - title: Bad Example
        code: |
          # Bad example: Adding unnecessary subroutines
          sub drive {
              # ...
          }

          sub fly {
              # ...
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          # Good example: Using encapsulation
          package Wallet;

          sub new {
              my ($class, $initial_money) = @_;
              my $self = { money => $initial_money };
              bless $self, $class;
              return $self;
          }

          sub get_amount {
              my ($self) = @_;
              return $self->{money};
          }

          1;

          package Person;

          sub new {
              my ($class, $wallet) = @_;
              my $self = { wallet => $wallet };
              bless $self, $class;
              return $self;
          }

          sub get_money_amount {
              my ($self) = @_;
              return $self->{wallet}->get_amount();
          }

          1;

          sub purchase {
              my ($item_price, $buyer) = @_;
              if ($buyer->get_money_amount() >= $item_price) {
                  # ...
              }
          }
      - title: Bad Example
        code: |
          # Bad example: Accessing nested structures directly
          package Wallet;

          sub new {
              my ($class, $money) = @_;
              my $self = { money => $money };
              bless $self, $class;
              return $self;
          }

          package Person;

          sub new {
              my ($class, $wallet) = @_;
              my $self = { wallet => $wallet };
              bless $self, $class;
              return $self;
          }

          sub purchase {
              my ($item_price, $buyer) = @_;
              if ($buyer->{wallet}->{money} >= $item_price) {
                  # ...
              }
          }

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          # Good example: Separating concerns into different modules
          package UserDataService;

          sub fetch_user_data {
              # ...
          }

          1;

          package UserLogic;

          sub calculate_age {
              # ...
          }

          1;

          package UserComponent;

          sub render {
              # ...
          }

          1;
      - title: Bad Example
        code: |
          # Bad example: Mixing data retrieval and presentation in a single module
          sub fetch_user_data {
              # ...
          }

          sub render {
              # ...
          }

          sub calculate_age {
              # ...
          }
