---
language: R
code: r
birth: 1993
parent: s
description: R is a free software environment for statistical computing and graphics. It is widely used among statisticians and data miners for developing statistical software and data analysis.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          authenticate_user <- function(user_credentials) {
            # authentication logic
          }
      - title: Bad Example
        code: |
          user <- function(credentials, log_date = FALSE) {
            if(log_date) {
              # logging logic
            } else {
              # authentication logic
            }
          }
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          area_circle <- function(radius) {
            pi * radius * radius
          }
      - title: Bad Example
        code: |
          area_shape <- function(type, width = NULL, height = NULL, radius = NULL) {
            if(type == "circle") {
              return pi * radius * radius
            } else if(type == "rectangle") {
              return width * height
            }
          }
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          bird_fly <- function(bird) {
            if(bird == "sparrow") {
              # Sparrow flying logic
            }
          }
      - title: Bad Example
        code: |
          bird_fly <- function(bird) {
            if(bird == "penguin") {
              stop("Penguins can't fly!")
            }
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          bird_actions <- function(action, bird) {
            if(action == "fly" & bird == "sparrow") {
              # Sparrow flying logic
            } else if(action == "swim" & bird == "penguin") {
              # Penguin swimming logic
            }
          }
      - title: Bad Example
        code: |
          bird_actions <- function(action, bird) {
            if(action == "swim" & bird == "sparrow") {
              # Doesn't make sense for a Sparrow
            }
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          save_data <- function(storage_type, data) {
            storage_type(data)
          }
          cloud_storage <- function(data) {
            # save data to the cloud
          }
      - title: Bad Example
        code: |
          save_data <- function(data) {
            hard_drive_storage(data)
          }
          hard_drive_storage <- function(data) {
            # save data to the hard drive
          }

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          greet <- function(name) {
            paste("Hello,", name)
          }
      - title: Bad Example
        code: |
          greet_user <- function(name) {
            paste("Hello,", name)
          }
          greet_admin <- function(name) {
            paste("Hello,", name)
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          add <- function(a, b) {
            a + b
          }
      - title: Bad Example
        code: |
          add <- function(a, b, debug = FALSE) {
            if(debug) {
              print(paste("Inputs:", a, b))
            }
            result <- a + b
            if(debug) {
              print(paste("Result:", result))
            }
            return(result)
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          shopping_cart <- list(items = c())
          add_item <- function(cart, item) {
            cart$items <- c(cart$items, item)
            return(cart)
          }
      - title: Bad Example
        code: |
          shopping_cart <- list(items = c(), futureFeatures = list())
          add_item <- function(cart, item) {
            cart$items <- c(cart$items, item)
            return(cart)
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          wallet <- list(balance = 0)
          deduct_amount <- function(wallet, amount) {
            wallet$balance <- wallet$balance - amount
            return(wallet)
          }
          person_pay <- function(wallet, amount) {
            wallet <- deduct_amount(wallet, amount)
            return(wallet)
          }
      - title: Bad Example
        code: |
          wallet <- list(balance = 0)
          person_pay_bad <- function(wallet, amount) {
            wallet$balance <- wallet$balance - amount
            return(wallet)
          }

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          save_user <- function(user) {
            # save user logic
          }
