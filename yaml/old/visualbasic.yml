language: Visual Basic
code: visualbasic
birth: 1991
description: Visual Basic (VB) is an event-driven programming language and integrated development environment (IDE) developed by Microsoft. It's known for its ease of use in creating Windows applications.
parent: basic
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          ' Good example: Splitting responsibilities into separate classes
          Class UserDataManager
              Sub SaveUserData()
                  ' ...
              End Sub
          End Class

          Class UserNotification
              Sub SendNotification()
                  ' ...
              End Sub
          End Class
      - title: Bad Example
        code: |
          ' Bad example: A class handling both user data management and user notifications
          Class User
              Sub SaveUserData()
                  ' ...
              End Sub
              Sub SendNotification()
                  ' ...
              End Sub
          End Class

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          ' Good example: Using abstraction to allow extension without modification
          Interface IShape
              Function CalculateArea() As Double
          End Interface

          Class Circle
              Implements IShape
              Property Radius As Double
              Function CalculateArea() As Double Implements IShape.CalculateArea
                  Return 3.14 * Radius * Radius
              End Function
          End Class
      - title: Bad Example
        code: |
          ' Bad example: Modifying existing code to add new functionality
          Class Rectangle
              Property Width As Double
              Property Height As Double
          End Class

          Class AreaCalculator
              Function CalculateArea(rectangle As Rectangle) As Double
                  Return rectangle.Width * rectangle.Height
              End Function
          End Class

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          ' Good example: Derived classes maintain the behavior of the base class
          Interface IFlyingBird
              Sub Fly()
          End Interface

          Interface IWalkableBird
              Sub Walk()
          End Interface
      - title: Bad Example
        code: |
          ' Bad example: Derived class changes the behavior of the base class
          Class Bird
              Sub Fly()
                  ' ...
              End Sub
          End Class

          Class Ostrich
              Inherits Bird
              Overrides Sub Fly()
                  Throw New Exception("Can't fly")
              End Sub
          End Class

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          ' Good example: Breaking down the interface into more specific ones
          Interface IWorkable
              Sub Work()
          End Interface

          Interface IEatable
              Sub Eat()
          End Interface
      - title: Bad Example
        code: |
          ' Bad example: A bulky interface
          Interface IWorker
              Sub Work()
              Sub Eat()
          End Interface

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          ' Good example: Both high-level and low-level modules depend on abstractions
          Interface IDevice
              Sub TurnOn()
          End Interface

          Class Fan
              Implements IDevice
              Sub TurnOn() Implements IDevice.TurnOn
                  ' ...
              End Sub
          End Class

          Class SmartSwitch
              Private _device As IDevice
              Sub New(device As IDevice)
                  _device = device
              End Sub
              Sub Operate()
                  _device.TurnOn()
              End Sub
          End Class
      - title: Bad Example
        code: |
          ' Bad example: High-level module depending on a low-level module
          Class LightBulb
              Sub TurnOn()
                  ' ...
              End Sub
          End Class

          Class Switch
              Private _bulb As LightBulb
              Sub New(bulb As LightBulb)
                  _bulb = bulb
              End Sub
              Sub Operate()
                  _bulb.TurnOn()
              End Sub
          End Class

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          ' Good example: Single function for repeated logic
          Function AddTax(price As Double, Optional rate As Double = 0.05) As Double
              Return price + (price * rate)
          End Function
      - title: Bad Example
        code: |
          ' Bad example: Repeated logic
          Function AddTaxForFood(price As Double) As Double
              Return price + (price * 0.05)
          End Function

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          ' Good example: Simplified approach
          Function IsEven(num As Integer) As Boolean
              Return num Mod 2 = 0
          End Function
      - title: Bad Example
        code: |
          ' Bad example: Overcomplicated way to check even numbers
          Function IsEven(num As Integer) As Boolean
              Return num Mod Math.Abs(2) = 0
          End Function

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          ' Good example: Only implement what's needed
          Class Car
              Sub Drive()
                  ' ...
              End Sub
          End Class
      - title: Bad Example
        code: |
          ' Bad example: Adding unnecessary features
          Class Car
              Sub Drive()
                  ' ...
              End Sub
              Sub Fly()
                  ' Cars don't fly!
              End Sub
          End Class

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          ' Good example: Using encapsulation
          Class Wallet
              Private money As Double
              Function GetAmount() As Double
                  Return money
              End Function
          End Class

          Class Person
              Property Wallet As Wallet
              Function GetMoneyAmount() As Double
                  Return Wallet.GetAmount()
              End Function
          End Class

          Function Purchase(itemPrice As Double, buyer As Person) As Boolean
              Return buyer.GetMoneyAmount() >= itemPrice
          End Function
      - title: Bad Example
        code: |
          ' Bad example: Accessing nested structures directly
          Class Wallet
              Property Money As Double
          End Class

          Class Person
              Property Wallet As Wallet
          End Class

          Function Purchase(itemPrice As Double, buyer As Person) As Boolean
              Return buyer.Wallet.Money >= itemPrice
          End Function

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          ' Good example: Separating concerns into different classes
          Class UserDataService
              Sub FetchUserData()
                  ' ...
              End Sub
          End Class

          Class UserLogic
              Sub CalculateAge()
                  ' ...
              End Sub
          End Class

          Class UserComponent
              Sub Render()
                  ' ...
              End Sub
          End Class
      - title: Bad Example
        code: |
          ' Bad example: Mixing data retrieval and presentation in a single class
          Class UserComponent
              Sub FetchUserData()
                  ' ...
              End Sub
              Sub Render()
                  ' ...
              End Sub
              Sub CalculateAge()
                  ' ...
              End Sub
          End Class
