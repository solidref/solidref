---
language: Lua
code: lua
birth: 1993
parent: c
description: Lua is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications. It is dynamic and easy to embed due to its simple C API. Lua is often used in game development, configuration, and scripting.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Splitting responsibilities into separate tables/functions
          userDataManager = {}
          function userDataManager:save()
             -- save user data
          end

          userNotification = {}
          function userNotification:send()
             -- send notification
          end
      - title: Bad Example
        code: |
          -- Bad example: A single table handling both user data and notifications
          user = {}
          function user:save()
             -- save data
          end
          function user:send()
             -- send notification
          end

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Extending functionality using metatables
          Shape = {}
          function Shape:area()
             return 0
          end

          Circle = setmetatable({}, {__index = Shape})
          function Circle:new(radius)
             return setmetatable({r = radius}, {__index = Circle})
          end
          function Circle:area()
             return 3.14 * self.r * self.r
          end

          Rectangle = setmetatable({}, {__index = Shape})
          function Rectangle:new(width, height)
             return setmetatable({w = width, h = height}, {__index = Rectangle})
          end
          function Rectangle:area()
             return self.w * self.h
          end

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using metatables to ensure substitutability
          Bird = {}
          function Bird:fly()
             print("I can fly")
          end

          Sparrow = setmetatable({}, {__index = Bird})
          function Sparrow:fly()
             print("I'm a sparrow flying")
          end

          Penguin = setmetatable({}, {__index = Bird})
          function Penguin:fly()
             error("Can't fly!")
          end

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Creating minimalistic interfaces
          Workable = {}
          function Workable:work()
             print("I can work")
          end

          Eatable = {}
          function Eatable:eat()
             print("I can eat")
          end

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using dependency injection for inversion
          function turnOn(device)
             device:powerOn()
          end

          LightBulb = {}
          function LightBulb:powerOn()
             print("Light bulb turned on")
          end

          Fan = {}
          function Fan:powerOn()
             print("Fan turned on")
          end

          turnOn(LightBulb)
          turnOn(Fan)
      - title: Bad Example
        code: |
          -- Bad example: Tight coupling without inversion
          Switch = {}
          function Switch:operateWithLightBulb(bulb)
             bulb:powerOn()
          end

          LightBulb = {}
          function LightBulb:powerOn()
             print("Light bulb turned on")
          end
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using functions to avoid repetition
          function calculateArea(width, height)
             return width * height
          end

          local area1 = calculateArea(5, 4)
          local area2 = calculateArea(7, 3)

      - title: Bad Example
        code: |
          -- Bad example: Repeating the same logic multiple times
          local area1 = 5 * 4
          local area2 = 7 * 3

  - title: Keep It Simple Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          -- Good example: Simple function to calculate sum
          function sum(a, b)
             return a + b
          end
      - title: Bad Example
        code: |
          -- Bad example: Overcomplicating a simple sum operation
          function sum(a, b)
             local result = 0
             for i=1, b do
                result = result + 1
             end
             for i=1, a do
                result = result + 1
             end
             return result
          end

  - title: YAGNI (You Aren't Gonna Need It)
    examples:
      - title: Good Example
        code: |
          -- Good example: Just the function needed for current requirements
          function greet()
             print("Hello, World!")
          end
      - title: Bad Example
        code: |
          -- Bad example: Adding unnecessary features
          function greet(isMorning, isEvening)
             if isMorning then
                print("Good morning!")
             elseif isEvening then
                print("Good evening!")
             else
                print("Hello!")
             end
          end

  - title: Law of Demeter (LoD)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using direct methods of an object
          User = {}
          function User:new(name)
             return setmetatable({name = name}, {__index = User})
          end
          function User:greet()
             print("Hello, " .. self.name)
          end

          local user = User:new("Lua")
          user:greet()

      - title: Bad Example
        code: |
          -- Bad example: Accessing an object's properties indirectly
          User = {}
          function User:new(name)
             return setmetatable({details = {name = name}}, {__index = User})
          end
          function greetUser(user)
             print("Hello, " .. user.details.name)
          end

          local user = User:new("Lua")
          greetUser(user)
