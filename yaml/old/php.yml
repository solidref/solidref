---
language: PHP
code: php
parent:
  - c
  - java
  - perl
  - python
  - tcl
birth: 1995
description: PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible, and pragmatic, PHP powers everything from your blog to the most popular websites in the world.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example (8.0)
        code: |
          <?php
          // Good Example - Using PHP 8.0 features like Constructor Property Promotion
          class User {
              public function __construct(
                  public string $name,
                  public string $email
              ) {}
          }

          class AuthenticationService {
              public function authenticate(User $user): bool {
                  // authentication logic
                  return true;
              }
          }
          ?>
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Using PHP 7.0 features like Type Hinting
          class User {
              // User properties and methods
          }

          class AuthenticationService {
              public function authenticate(User $user): bool {
                  // authentication logic
                  return true;
              }
          }
          ?>
      - title: Good Example (5.0)
        code: |
          <?php
          // Good Example - Using PHP 5.0 features
          class AuthenticationService {
              public function authenticate($user) {
                  // authentication logic
                  return true;
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Using PHP 5.0 features
          class UserManager {
              public function authenticate($user) {
                  // authentication logic
                  return true;
              }

              public function placeOrder($user, $order) {
                  // order placement logic
              }
          }
          ?>
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Using PHP 7.0 features
          interface Shape {
              public function area(): float;
          }

          class Circle implements Shape {
              private float $radius;

              public function __construct(float $radius) {
                  $this->radius = $radius;
              }

              public function area(): float {
                  return 3.14 * $this->radius * $this->radius;
              }
          }
          ?>
      - title: Good Example (5.0)
        code: |
          <?php
          // Good Example - Using PHP 5.0 features
          abstract class Shape {
              abstract public function area();
          }

          class Circle extends Shape {
              protected $radius;

              public function __construct($radius) {
                  $this->radius = $radius;
              }

              public function area() {
                  return 3.14 * $this->radius * $this->radius;
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Using PHP 5.0 features
          class Shape {
              protected $type;
              protected $radius;

              public function __construct($type, $radius = 0) {
                  $this->type = $type;
                  $this->radius = $radius;
              }

              public function area() {
                  if ($this->type == 'circle') {
                      return 3.14 * $this->radius * $this->radius;
                  }
                  // Other shape calculations...
                  return 0;
              }
          }
          ?>
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Using PHP 7.0 features
          interface Bird {
              public function move();
          }

          class Sparrow implements Bird {
              public function move() {
                  // Fly logic
              }
          }

          class Ostrich implements Bird {
              public function move() {
                  // Run logic instead of flying
              }
          }
          ?>
      - title: Good Example (5.0)
        code: |
          <?php
          // Good Example - Using PHP 5.0 features
          class Bird {
              public function fly() {
                  // Fly logic
              }
          }

          class Ostrich extends Bird {
              public function run() {
                  // Run logic instead of flying
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Using PHP 5.0 features
          class Bird {
              public function fly() {
                  // Fly logic
              }
          }

          class Ostrich extends Bird {
              // Ostrich cannot fly but it's forced to due to inheritance
          }
          ?>
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example (5.0)
        code: |
          <?php
          // Good Example - Using PHP 5.0 features
          interface Worker {
              public function work();
          }

          interface Eater {
              public function eat();
          }

          class Human implements Worker, Eater {
              public function work() {
                  // Work logic
              }

              public function eat() {
                  // Eat logic
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Using PHP 5.0 features
          interface Worker {
              public function work();
              public function eat();
          }

          class Robot implements Worker {
              public function work() {
                  // Work logic
              }

              // Robot doesn't eat but is forced to implement the method
              public function eat() {}
          }
          ?>
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Using PHP 7.0 features
          interface Logger {
              public function log(string $message);
          }

          class FileLogger implements Logger {
              public function log(string $message) {
                  // Log to a file
              }
          }

          class App {
              private $logger;

              public function __construct(Logger $logger) {
                  $this->logger = $logger;
              }

              public function run() {
                  $this->logger->log("App is running");
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Using PHP 5.0 features
          class App {
              private $logger;

              public function __construct() {
                  $this->logger = new FileLogger();
              }

              public function run() {
                  $this->logger->log("App is running");
              }
          }

          class FileLogger {
              public function log($message) {
                  // Log to a file
              }
          }
          ?>
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Using PHP 7.0 functions instead of repeating code
          function calculateArea(float $length, float $width): float {
              return $length * $width;
          }

          $area1 = calculateArea(5.0, 6.0);
          $area2 = calculateArea(7.0, 8.0);
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Repeating code in PHP 5.0
          $length1 = 5.0;
          $width1 = 6.0;
          $area1 = $length1 * $width1;

          $length2 = 7.0;
          $width2 = 8.0;
          $area2 = $length2 * $width2;
          ?>
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Simple function using PHP 7.0
          function greet(string $name): string {
              return "Hello, $name!";
          }

          echo greet("Alice");
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Overcomplicating in PHP 5.0
          class GreetingGenerator {
              public function generateGreetingForName($name) {
                  if ($name) {
                      return "Hello, " . $this->formatName($name) . "!";
                  } else {
                      return "Hello, Guest!";
                  }
              }

              private function formatName($name) {
                  return ucfirst(strtolower($name));
              }
          }

          $generator = new GreetingGenerator();
          echo $generator->generateGreetingForName("ALICE");
          ?>
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Building only what's necessary using PHP 7.0
          class ShoppingCart {
              private $items = [];

              public function addItem($item) {
                  $this->items[] = $item;
              }

              public function getTotal() {
                  // Calculate total
              }
          }
          ?>
      - title: Bad Example (5.0)
        code: |
          <?php
          // Bad Example - Adding unnecessary features in PHP 5.0
          class ShoppingCart {
              private $items = [];
              private $coupons = [];

              public function addItem($item) {
                  $this->items[] = $item;
              }

              public function applyCoupon($coupon) {
                  $this->coupons[] = $coupon;
              }

              public function predictFuturePrices() {
                  // Predict future price changes
              }

              public function suggestGiftWrapping() {
                  // Suggest gift wrapping options
              }
          }
          ?>
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Following Law of Demeter
          class Wallet {
              private $money;

              public function __construct($initialAmount) {
                  $this->money = $initialAmount;
              }

              public function debit($amount) {
                  $this->money -= $amount;
              }

              public function getBalance(): int {
                  return $this->money;
              }
          }

          class Customer {
              private $wallet;

              public function __construct(Wallet $wallet) {
                  $this->wallet = $wallet;
              }

              public function purchaseItem($itemPrice) {
                  $this->wallet->debit($itemPrice);
              }
          }
          ?>
      - title: Bad Example (7.0)
        code: |
          <?php
          // Bad Example - Violating Law of Demeter by accessing an attribute of another object
          class Wallet {
              public $money;
          }

          class Customer {
              private $wallet;

              public function __construct(Wallet $wallet) {
                  $this->wallet = $wallet;
              }

              public function purchaseItem($itemPrice) {
                  $this->wallet->money -= $itemPrice;  // Directly accessing another object's attribute
              }
          }
          ?>
  - title: Separation of Concerns
    examples:
      - title: Good Example (7.0)
        code: |
          <?php
          // Good Example - Proper separation of concerns between different classes
          class Database {
              public function save($data) {
                  // Save data to the database
              }
          }

          class Validator {
              public function isValid($data): bool {
                  // Validate data
                  return true;
              }
          }

          class UserController {
              private $database;
              private $validator;

              public function __construct(Database $database, Validator $validator) {
                  $this->database = $database;
                  $this->validator = $validator;
              }

              public function createUser($data) {
                  if ($this->validator->isValid($data)) {
                      $this->database->save($data);
                  }
              }
          }
          ?>
      - title: Bad Example (7.0)
        code: |
          <?php
          // Bad Example - Merging multiple responsibilities into a single class
          class UserController {
              public function createUser($data) {
                  if ($this->isValid($data)) {
                      $this->saveToDatabase($data);
                  }
              }

              private function saveToDatabase($data) {
                  // Save data to the database
              }

              private function isValid($data): bool {
                  // Validate data
                  return true;
              }
          }
          ?>
