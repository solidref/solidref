---
language: Haskell
code: haskell
birth: 1990
description: >
  A purely functional, statically typed language known for its strong type system and lazy evaluation. Haskell is used for a wide range of applications, from web development to scientific research.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Splitting responsibilities into separate modules
          module UserDataManager where

          saveUserData :: UserData -> IO ()
          saveUserData userData =
            -- ...

      - title: Bad Example
        code: |
          -- Bad example: A module handling both user data management and user notifications
          module User where

          saveUserData :: UserData -> IO ()
          saveUserData userData =
            -- ...

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using abstraction to allow extension without modification
          class Shape a where
            computeArea :: a -> Double

          data Rectangle = Rectangle Double Double
          data Circle = Circle Double

          instance Shape Rectangle where
            computeArea (Rectangle width height) = width * height

          instance Shape Circle where
            computeArea (Circle radius) = 3.14 * radius * radius

      - title: Bad Example
        code: |
          -- Bad example: Modifying existing code to add new functionality
          data Shape = Rectangle Double Double | Circle Double

          computeArea :: Shape -> Double
          computeArea shape =
            case shape of
              Rectangle width height -> width * height
              Circle radius -> 3.14 * radius * radius

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Derived types maintain the behavior of the base type
          class FlyingBird a where
            fly :: a -> String

          data Sparrow = Sparrow
          data Pigeon = Pigeon

          instance FlyingBird Sparrow where
            fly _ = "Flying high!"

          instance FlyingBird Pigeon where
            fly _ = "Flying high!"

      - title: Bad Example
        code: |
          -- Bad example: Derived type changes the behavior of the base type
          class Bird a where
            fly :: a -> String

          data Sparrow = Sparrow
          data Ostrich = Ostrich

          instance Bird Sparrow where
            fly _ = "Flying high!"

          instance Bird Ostrich where
            fly _ = "Can't fly!"

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Smaller typeclasses with specific methods
          class Workable a where
            work :: a -> IO ()

          class Eatable a where
            eat :: a -> IO ()

      - title: Bad Example
        code: |
          -- Bad example: A bulky typeclass with many methods
          class Worker a where
            work :: a -> IO ()
            eat :: a -> IO ()
            sleep :: a -> IO ()
            -- ...

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Both high-level and low-level modules depend on abstractions
          class Device a where
            turnOn :: a -> IO ()

          data Fan = Fan
          data LightBulb = LightBulb

          instance Device Fan where
            turnOn Fan = -- ...

          instance Device LightBulb where
            turnOn LightBulb = -- ...

          data Switch a = Switch a

          instance Device a => Switch a where
            operate (Switch device) = turnOn device

      - title: Bad Example
        code: |
          -- Bad example: High-level module depending on a low-level module
          class LightBulb where
            turnOn :: IO ()

          class Switch where
            operate :: LightBulb -> IO ()

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          -- Good example: Single function for repeated logic
          addTax :: Double -> Double
          addTax price = price + 0.05 * price

      - title: Bad Example
        code: |
          -- Bad example: Repeated logic
          addTaxForFood :: Double -> Double
          addTaxForFood price = price + 0.05 * price

          addTaxForElectronics :: Double -> Double
          addTaxForElectronics price = price + 0.05 * price

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          -- Good example: Simplified approach
          isEven :: Integer -> Bool
          isEven num = num `mod` 2 == 0

      - title: Bad Example
        code: |
          -- Bad example: Overcomplicated way to check even numbers
          isEven :: Integer -> Bool
          isEven num = num `mod` (if num > 0 then 2 else -2) == 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          -- Good example: Only implement what's needed
          data Car = Drive

      - title: Bad Example
        code: |
          -- Bad example: Adding unnecessary features
          data Car = Drive

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using accessor functions to minimize knowledge
          data Wallet = Wallet { money :: Double }
          data Person = Person { wallet :: Wallet }

          getMoneyAmount :: Person -> Double
          getMoneyAmount person = money (wallet person)

          purchase :: Double -> Person -> Bool
          purchase itemPrice person = getMoneyAmount person >= itemPrice

      - title: Bad Example
        code: |
          -- Bad example: Accessing nested structures directly
          data Wallet = Wallet { money :: Double }
          data Person = Person { wallet :: Wallet }

          purchase :: Double -> Person -> Bool
          purchase itemPrice person = money (wallet person) >= itemPrice

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          -- Good example: Separating concerns into different modules
          module UserDataService where

          fetchUserData :: IO UserData
          fetchUserData = -- ...

          module UserLogic where

          renderUser :: UserData -> IO ()
          renderUser user = -- ...
