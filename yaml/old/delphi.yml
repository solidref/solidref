language: Delphi
code: delphi
birth: 1995
parent: pascal
description: >
  A powerful object-oriented programming language and integrated development environment (IDE) for Windows applications development.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          { Good example: Splitting responsibilities into separate classes }
          type
            TUserDataManager = class
              procedure SaveUserData;
            end;

          type
            TUserNotification = class
              procedure SendNotification;
            end;
      - title: Bad Example
        code: |
          { Bad example: A class handling both user data management and user notifications }
          type
            TUser = class
              procedure SaveUserData;
              procedure SendNotification;
            end;

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          { Good example: Using abstraction to allow extension without modification }
          type
            TShape = class
              function CalculateArea: Double; virtual; abstract;
            end;

          type
            TRectangle = class(TShape)
              function CalculateArea: Double; override;
            end;

          type
            TCircle = class(TShape)
              function CalculateArea: Double; override;
            end;

          function TRectangle.CalculateArea: Double;
          begin
            Result := Width * Height;
          end;

          function TCircle.CalculateArea: Double;
          begin
            Result := 3.14 * Sqr(Radius);
          end;
      - title: Bad Example
        code: |
          { Bad example: Modifying existing code to add new functionality }
          function CalculateArea(shape: TShape): Double;
          begin
            case shape.ShapeType of
              Rectangle: Result := shape.Rectangle.Width * shape.Rectangle.Height;
              Circle: Result := 3.14 * Sqr(shape.Circle.Radius);
            end;
          end;

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          { Good example: Derived classes maintain the behavior of the base class }
          type
            TFlyingBird = class
              procedure Fly; virtual;
            end;

          type
            TNonFlyingBird = class
              procedure Walk;
            end;
      - title: Bad Example
        code: |
          { Bad example: Derived class changes the behavior of the base class }
          type
            TOstrich = class(TBird)
              procedure Fly; override;
            end;

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          { Good example: Breaking down the interface into more specific ones }
          type
            IWorkable = interface
              procedure Work;
            end;

          type
            IEatable = interface
              procedure Eat;
            end;
      - title: Bad Example
        code: |
          { Bad example: A bulky interface }
          type
            IWorker = interface
              procedure Work;
              procedure Eat;
            end;

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          { Good example: Both high-level and low-level modules depend on abstractions }
          type
            IDevice = interface
              procedure TurnOn;
            end;

          type
            TFan = class
              procedure TurnOn;
            end;

          type
            TSwitch = class
              private
                Device: IDevice;
              public
                constructor Create(device: IDevice);
                procedure Operate;
            end;
      - title: Bad Example
        code: |
          { Bad example: High-level module depending on a low-level module }
          type
            TLightBulb = class
              procedure TurnOn;
            end;

          type
            TSwitch = class
              private
                Bulb: TLightBulb;
              public
                constructor Create(bulb: TLightBulb);
                procedure Operate;
            end;

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          { Good example: Single function for repeated logic }
          function AddTax(price, rate: Double): Double;
          begin
            Result := price + price * rate;
          end;
      - title: Bad Example
        code: |
          { Bad example: Repeated logic }
          function AddTaxForFood(price: Double): Double;
          begin
            Result := price + price * 0.05;
          end;

          function AddTaxForElectronics(price: Double): Double;
          begin
            Result := price + price * 0.05;
          end;

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          { Good example: Simplified approach }
          function IsEven(num: Integer): Boolean;
          begin
            Result := num mod 2 = 0;
          end;
      - title: Bad Example
        code: |
          { Bad example: Overcomplicated way to check even numbers }
          function IsEven(num: Integer): Boolean;
          begin
            Result := num mod Abs(2) = 0;
          end;

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          { Good example: Only implement what's needed }
          type
            TCar = Drive;
      - title: Bad Example
        code: |
          { Bad example: Adding unnecessary features }
          type
            TCar = (Drive, Fly); { Cars don't fly! }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          { Good example: Using encapsulation }
          type
            TWallet = record
              private
                Money: Double;
              public
                function GetAmount: Double;
            end;

          type
            TPerson = record
              Wallet: TWallet;
              function GetMoneyAmount: Double;
            end;

          function Purchase(itemPrice: Double; buyer: TPerson): Boolean;
          begin
            Result := buyer.GetMoneyAmount >= itemPrice;
          end;
      - title: Bad Example
        code: |
          { Bad example: Accessing nested structures directly }
          type
            TWallet = record
              Money: Double;
            end;

          type
            TPerson = record
              Wallet: TWallet;
            end;

          function Purchase(itemPrice: Double; buyer: TPerson): Boolean;
          begin
            Result := buyer.Wallet.Money >= itemPrice;
          end;

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          { Good example: Separating concerns into different units }
          unit UserDataService;

          interface

          procedure FetchUserData;

          implementation

          procedure FetchUserData;
          begin
            { ... }
          end;

