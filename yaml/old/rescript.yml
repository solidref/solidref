---
language: ReasonML / ReScript
code: reasonml
parent: ocaml
birth: 2020
description: >
  Developed by Facebook, ReasonML offers a syntax close to JavaScript with the power of OCaml. It provides a strong type system and functional programming features. ReasonML is a syntax extension and toolchain for OCaml, which compiles to readable JavaScript. ReScript is a JavaScript backend for the OCaml compiler and has evolved to be its own language with its own syntax, heavily influenced by ReasonML and OCaml.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Splitting responsibilities into separate modules */
          module UserDataManager = {
            let saveUserData = data => /* ... */;
          };

          module UserNotification = {
            let sendNotification = notification => /* ... */;
          };

      - title: Bad Example
        code: |
          /* Bad example: A module handling both user data management and user notifications */
          module User = {
            let saveUserData = data => /* ... */;
            let sendNotification = notification => /* ... */;
          };

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Using abstraction to allow extension without modification */
          type shape =
            | Rectangle(float, float)
            | Circle(float);

          let computeArea = shape =>
            switch (shape) {
            | Rectangle(width, height) => width *. height
            | Circle(radius) => 3.14 *. radius *. radius
            };

      - title: Bad Example
        code: |
          /* Bad example: Modifying existing code to add new functionality */
          type shape =
            | Rectangle(float, float)
            | Circle(float);

          let computeArea = shape =>
            switch (shape) {
            | Rectangle(width, height) => width *. height
            | Circle(radius) => 3.14 *. radius *. radius
            };

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Derived classes maintain the behavior of the base class */
          type bird =
            | Sparrow
            | NonFlyingBird;

          let fly = bird =>
            switch (bird) {
            | Sparrow => "Flying high!"
            | NonFlyingBird => "Can't fly!"
            };

      - title: Bad Example
        code: |
          /* Bad example: Derived class changes the behavior of the base class */
          type bird =
            | Sparrow
            | Ostrich;

          let fly = bird =>
            switch (bird) {
            | Sparrow => "Flying high!"
            | Ostrich => "Can't fly!"
            };

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          /* Reason doesn't have interfaces in the same way some OOP languages do, but its module system can serve a similar purpose. Abstract modules (or module types) can be used to define a set of functions that a module must implement. */
          module type Lightable = {
            let turnOn: unit => unit;
          };

          module LightBulb: Lightable = {
            let turnOn = () => Js.log("Light bulb turned on");
          };

          let operate = (module Device: Lightable) => Device.turnOn();

      - title: Bad Example
        code: |
          /* Bad example: A bulky module signature */
          module type Lightable = {
            let turnOn: unit => unit;
            let turnOff: unit => unit;
          };

          module LightBulb: Lightable = {
            let turnOn = () => Js.log("Light bulb turned on");
            let turnOff = () => Js.log("Light bulb turned off");
          };

          let operate = (module Device: Lightable) => Device.turnOn();

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Using Higher-Order Functions */
          let greet = (formatter, name) => formatter(name);

          let politeFormatter = name => "Hello, " ++ name ++ "! How are you today?";

          let casualFormatter = name => "Hey, " ++ name ++ "!";

          /* Usage */
          greet(politeFormatter, "Alice");  /* "Hello, Alice! How are you today?" */
          greet(casualFormatter, "Bob");    /* "Hey, Bob!" */

          /* Using Abstract Modules (Module Types) */
          module type DATABASE = {
            let fetch: string => string;
          };

          module MockDatabase: DATABASE = {
            let fetch = id => "Mock data for " ++ id;
          };

          module ProductionDatabase: DATABASE = {
            let fetch = id => "Real data for " ++ id; /* Assume some real fetching here */
          };

          let getData = (module DB: DATABASE, id) => DB.fetch(id);

          /* Usage */
          getData((module MockDatabase), "123");       /* "Mock data for 123" */
          getData((module ProductionDatabase), "123"); /* "Real data for 123" */

          /* Using Records or Objects */
          type database = {
            fetch: string => string
          };

          let mockDatabase = {
            fetch: id => "Mock data for " ++ id
          };

          let productionDatabase = {
            fetch: id => "Real data for " ++ id; /* Assume some real fetching here */
          };

          let getData = (db, id) => db.fetch(id);

          /* Usage */
          getData(mockDatabase, "123");       /* "Mock data for 123" */
          getData(productionDatabase, "123"); /* "Real data for 123" */

      - title: Bad Example
        code: |
          /* Bad example: High-level module depending on a low-level module */
          type LightBulb = {
            turnOn: unit => unit;
          };

          type Switch = {
            operate: LightBulb => unit;
          };

          /* Usage */
          let operateSwitch = (device, bulb) => device.operate(bulb);

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          /* Good example: Single function for repeated logic */
          let addTax = (~rate=0.05, price) => price +. price *. rate;

      - title: Bad Example
        code: |
          /* Bad example: Repeated logic */
          let addTaxForFood = price => price +. price *. 0.05;

          let addTaxForElectronics = price => price +. price *. 0.05;

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          /* Good example: Simplified approach */
          let isEven = num => num mod 2 == 0;

      - title: Bad Example
        code: |
          /* Bad example: Overcomplicated way to check even numbers */
          let isEven = num => num mod (if (num > 0) { 2 } else { -2 }) == 0;

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          /* Good example: Only implement what's needed */
          type car = Drive;

      - title: Bad Example
        code: |
          /* Bad example: Adding unnecessary features */
          type car =
            | Drive
            | Fly;  /* Cars don't fly! */

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          /* Good example: Using pattern matching to minimize knowledge */
          let purchase = (itemPrice, person) =>
            switch (person) {
            | {wallet: {money}} when money >= itemPrice => true
            | _ => false
            };

      - title: Bad Example
        code: |
          /* Bad example: Accessing nested structures directly */
          let purchase = (itemPrice, {wallet: {money}}) => money >= itemPrice;

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          /* Good example: Separating concerns into different modules */
          module UserData = {
            let fetchUserData = () => /* ... */;
          };

          module UserView = {
            let renderUser = user => /* ... */;
          };

      - title: Bad Example
        code: |
          /* Bad example: Mixing data retrieval and presentation in one module */
          module User = {
            let fetchUserData = () => /* ... */;
            let renderUser = user => /* ... */;
          };
