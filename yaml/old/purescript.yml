---
language: PureScript
code: purescript
parent: haskell
birth: 2013
description: A strongly-typed functional programming language that compiles to JavaScript. It's inspired by Haskell and offers advanced type features.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Splitting responsibilities into separate modules
          module UserDataManager where

          saveUserData :: UserData -> Effect Unit
          saveUserData userData =
            -- ...

          module UserNotification where

          sendNotification :: Notification -> Effect Unit
          sendNotification notification =
            -- ...

      - title: Bad Example
        code: |
          -- Bad example: A module handling both user data management and user notifications
          module User where

          saveUserData :: UserData -> Effect Unit
          saveUserData userData =
            -- ...

          sendNotification :: Notification -> Effect Unit
          sendNotification notification =
            -- ...

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          data Shape = Rectangle Number Number | Circle Number

          computeArea :: Shape -> Number
          computeArea shape =
            case shape of
              Rectangle width height -> width * height
              Circle radius -> 3.14 * radius * radius

      - title: Bad Example
        code: |
          -- Modifying existing code to add new functionality
          data Shape = Rectangle Number Number | Circle Number | Triangle Number Number Number

          computeArea :: Shape -> Number
          computeArea shape =
            case shape of
              Rectangle width height -> width * height
              Circle radius -> 3.14 * radius * radius
              Triangle a b c -> -- calculate triangle area

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          data Bird = Sparrow | Ostrich

          fly :: Bird -> String
          fly bird =
            case bird of
              Sparrow -> "Flying high!"
              Ostrich -> "Can't fly!"

      - title: Bad Example
        code: |
          -- Bad example: Derived type changes the behavior
          data Bird = Sparrow | Ostrich | Penguin

          fly :: Bird -> String
          fly bird =
            case bird of
              Sparrow -> "Flying high!"
              Ostrich -> "Can't fly!"
              Penguin -> "Can swim but can't fly!"

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using type classes to define behavior
          class Lightable a where
            turnOn :: a -> Effect Unit

          instance lightableLightBulb :: Lightable LightBulb where
            turnOn _ = log "Light bulb turned on"

          operate :: forall a. Lightable a => a -> Effect Unit
          operate device = turnOn device

      - title: Bad Example
        code: |
          -- Bad example: Overly generic function
          operate :: forall a. a -> Effect Unit
          operate device =
            -- ...

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using type classes for dependency inversion
          class Lightable a where
            turnOn :: a -> Effect Unit

          instance lightableLightBulb :: Lightable LightBulb where
            turnOn _ = log "Light bulb turned on"

          operate :: forall a. Lightable a => a -> Effect Unit
          operate device = turnOn device

      - title: Bad Example
        code: |
          -- Bad example: Direct dependency
          operate :: LightBulb -> Effect Unit
          operate device =
            -- ...

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          -- Good example: Single function for repeated logic
          addTax :: Number -> Number -> Number
          addTax rate price = price + price * rate

      - title: Bad Example
        code: |
          -- Bad example: Repeated logic
          addTaxForFood :: Number -> Number
          addTaxForFood price = price + price * 0.05

          addTaxForElectronics :: Number -> Number
          addTaxForElectronics price = price + price * 0.05

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          -- Good example: Simplified approach
          isEven :: Int -> Boolean
          isEven num = mod num 2 == 0

      - title: Bad Example
        code: |
          -- Bad example: Overcomplicated check
          isEven :: Int -> Boolean
          isEven num = mod num (if num > 0 then 2 else -2) == 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          -- Good example: Only implement what's needed
          data Car = Drive

      - title: Bad Example
        code: |
          -- Bad example: Unnecessary feature
          data Car = Drive | Fly

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          -- Good example: Using pattern matching to minimize knowledge
          purchase :: Number -> Person -> Boolean
          purchase itemPrice (Person { wallet }) =
            let (Wallet { money }) = wallet
            in money >= itemPrice

      - title: Bad Example
        code: |
          -- Bad example: Accessing nested structures directly
          purchase :: Number -> Person -> Boolean
          purchase itemPrice (Person { wallet: (Wallet { money }) }) = money >= itemPrice

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          -- Good example: Separating concerns into different modules
          module UserData where

          fetchUserData :: Effect UserData
          fetchUserData =
            -- ...

          module UserView where

          renderUser :: UserData -> String
          renderUser user =
            -- ...

      - title: Bad Example
        code: |
          -- Bad example: Mixing data retrieval and presentation in one module
          module User where

          fetchUserData :: Effect UserData
          fetchUserData =
            -- ...

          renderUser :: UserData -> String
          renderUser user =
            -- ...
