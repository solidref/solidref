---
language: C++
code: cpp
birth: 1985
parent:
  - ada
  - c
  - simula
description: C++ is a general-purpose programming language created as an extension of the C programming language. It adds features like object-oriented programming and generic programming to C, making it a versatile language used in various domains.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Using C++11 features to enhance the class design
          class UserDataManager {
          public:
              void saveUserData() const { /* ... */ }
          };

          class UserNotification {
          public:
              void sendNotification() const { /* ... */ }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Splitting responsibilities using classes
          class UserDataManager {
          public:
              void saveUserData() { /* ... */ }
          };

          class UserNotification {
          public:
              void sendNotification() { /* ... */ }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): A single C++11 class handling both user data and notifications
          class User {
          public:
              void saveUserData() const { /* ... */ }
              void sendNotification() const { /* ... */ }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): A single class handling both user data and notifications
          class User {
          public:
              void saveUserData() { /* ... */ }
              void sendNotification() { /* ... */ }
          };
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Using C++11 features like override for clearer intent
          class Shape {
          public:
              virtual double computeArea() const = 0;
          };

          class Rectangle : public Shape {
          private:
              double width, height;
          public:
              Rectangle(double w, double h) : width(w), height(h) {}
              double computeArea() const override {
                  return width * height;
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Using inheritance to allow extension without modification
          class Shape {
          public:
              virtual double computeArea() const = 0;
          };

          class Rectangle : public Shape {
          private:
              double width, height;
          public:
              Rectangle(double w, double h) : width(w), height(h) {}
              double computeArea() const {
                  return width * height;
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Modifying existing C++11 class methods to add new functionality
          class AreaCalculator {
          public:
              double computeArea(const Shape& shape) {
                  // ... logic to determine shape type using typeid or dynamic_cast and compute area
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Modifying existing code to add new functionality
          class AreaCalculator {
          public:
              double computeArea(const Shape& shape) {
                  // ... logic to determine shape type and compute area
              }
          };
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Derived classes can substitute for their base class without altering the correctness of the program
          class Bird {
          public:
              virtual void fly() const { /* ... */ }
          };

          class Sparrow : public Bird {
          public:
              void fly() const override { /* ... */ }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Subclasses can be replaced with their base class without altering correctness
          class Shape {
          public:
              virtual double area() const = 0;
          };

          class Circle : public Shape {
          private:
              double radius;
          public:
              Circle(double r) : radius(r) {}
              double area() const {
                  return 3.14 * radius * radius;
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Violating LSP by overriding functionality in a way that doesn't make sense for all subclasses
          class Bird {
          public:
              virtual void fly() const { /* ... */ }
          };

          class Penguin : public Bird {
          public:
              void fly() const override {
                  // Penguins can't fly!
                  throw std::logic_error("Penguins can't fly!");
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Square is a special type of rectangle, but in this context, it violates LSP
          class Rectangle {
          protected:
              double width, height;
          public:
              virtual void setWidth(double w) { width = w; }
              virtual void setHeight(double h) { height = h; }
              double area() const {
                  return width * height;
              }
          };

          class Square : public Rectangle {
          public:
              void setWidth(double w) override {
                  width = height = w;
              }
              void setHeight(double h) override {
                  width = height = h;
              }
          };
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Separate interfaces for different functionalities
          class Printable {
          public:
              virtual void print() const = 0;
          };

          class Savable {
          public:
              virtual void save() const = 0;
          };

          class Document : public Printable, public Savable {
          public:
              void print() const override { /* ... */ }
              void save() const override { /* ... */ }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Using multiple interfaces to segregate functionalities
          class Printable {
          public:
              virtual void print() const = 0;
          };

          class Savable {
          public:
              virtual void save() const = 0;
          };

          class Document : public Printable, public Savable {
          public:
              void print() const { /* ... */ }
              void save() const { /* ... */ }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): A monolithic interface requiring many potentially unnecessary methods
          class MonolithicDocument {
          public:
              virtual void print() const = 0;
              virtual void save() const = 0;
              virtual void spellCheck() const = 0;
              // ... many other methods
          };

          class SimpleDocument : public MonolithicDocument {
          public:
              void print() const override { /* ... */ }
              void save() const override { /* ... */ }
              void spellCheck() const override {
                  // Not needed for this simple document but still required by the interface!
                  throw std::logic_error("Not supported!");
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): A single, broad interface
          class MonolithicDocument {
          public:
              virtual void print() const = 0;
              virtual void save() const = 0;
              virtual void spellCheck() const = 0;
              // ... and so on
          };
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): High-level modules should not depend on low-level modules. Both should depend on abstractions.
          class LoggerInterface {
          public:
              virtual void log(const std::string &message) const = 0;
          };

          class ConsoleLogger : public LoggerInterface {
          public:
              void log(const std::string &message) const override {
                  std::cout << message << std::endl;
              }
          };

          class Application {
          private:
              LoggerInterface &logger;
          public:
              Application(LoggerInterface &log) : logger(log) {}
              void run() {
                  logger.log("Application started.");
                  // ...
                  logger.log("Application ended.");
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Dependency on abstraction (LoggerInterface) not concretion
          class LoggerInterface {
          public:
              virtual void log(const std::string &message) const = 0;
          };

          class ConsoleLogger : public LoggerInterface {
          public:
              void log(const std::string &message) const {
                  std::cout << message << std::endl;
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): High-level module (Application) directly depending on a low-level module (ConsoleLogger)
          class ConsoleLogger {
          public:
              void log(const std::string &message) const {
                  std::cout << message << std::endl;
              }
          };

          class Application {
          private:
              ConsoleLogger logger;
          public:
              void run() {
                  logger.log("Application started.");
                  // ...
                  logger.log("Application ended.");
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Direct dependency without abstraction
          class ConsoleLogger {
          public:
              void log(const std::string &message) const {
                  std::cout << message << std::endl;
              }
          };
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Common functionality encapsulated in a single method
          class MathOperations {
          public:
              int add(int a, int b) const {
                  return a + b;
              }
              int subtract(int a, int b) const {
                  return a - b;
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Factorizing repeated code
          class Printer {
          public:
              void printHeader() const {
                  std::cout << "Header" << std::endl;
              }
              void printFooter() const {
                  std::cout << "Footer" << std::endl;
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Repeated logic across methods
          class BadMathOperations {
          public:
              int add(int a, int b, bool log) const {
                  if (log) {
                      std::cout << "Adding numbers." << std::endl;
                  }
                  return a + b;
              }
              int subtract(int a, int b, bool log) const {
                  if (log) {
                      std::cout << "Subtracting numbers." << std::endl;
                  }
                  return a - b;
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Repeated logic in multiple places
          class BadPrinter {
          public:
              void printStartPage() const {
                  std::cout << "Header" << std::endl;
                  std::cout << "Starting page content..." << std::endl;
              }
              void printEndPage() const {
                  std::cout << "Ending page content..." << std::endl;
                  std::cout << "Footer" << std::endl;
              }
          };
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Simple function to calculate area of rectangle
          int calculateArea(int width, int height) {
              return width * height;
          }
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): A straightforward way to check if a number is even
          bool isEven(int number) {
              return number % 2 == 0;
          }
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Overcomplicating a simple task
          class RectangleAreaCalculator {
          private:
              int width;
              int height;
              bool hasComputed;
              int area;

          public:
              RectangleAreaCalculator(int w, int h) : width(w), height(h), hasComputed(false), area(0) {}

              void compute() {
                  if (!hasComputed) {
                      area = width * height;
                      hasComputed = true;
                  }
              }

              int getArea() const {
                  return area;
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Overcomplicating the check for even numbers
          class Number {
          private:
              int value;
          public:
              Number(int v) : value(v) {}
              bool isEven() const {
                  if (value == 0) return true;
                  for (int i = -value; i <= value; i += 2) {
                      if (i == value) return true;
                  }
                  return false;
              }
          };
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Simple class for managing a user's name
          class User {
          private:
              std::string name;
          public:
              User(const std::string &n) : name(n) {}
              std::string getName() const {
                  return name;
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Simple function to add two numbers
          int add(int a, int b) {
              return a + b;
          }
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Introducing unnecessary complexity
          class AdvancedUser {
          private:
              std::string firstName;
              std::string lastName;
              std::vector<std::string> nicknames;
              bool hasChangedName;

          public:
              AdvancedUser(const std::string &first, const std::string &last)
                  : firstName(first), lastName(last), hasChangedName(false) {}

              void changeName(const std::string &first, const std::string &last) {
                  nicknames.push_back(firstName + " " + lastName);
                  firstName = first;
                  lastName = last;
                  hasChangedName = true;
              }

              // ... other unnecessary methods
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Adding unnecessary features to a basic operation
          class Calculator {
          private:
              int lastResult;
          public:
              Calculator() : lastResult(0) {}

              int addWithMemory(int a, int b) {
                  lastResult = a + b;
                  return lastResult;
              }

              int getLastResult() const {
                  return lastResult;
              }

              // ... other unnecessary features
          };
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Keeping dependencies and interactions to a minimum
          class User {
          private:
              std::string name;
          public:
              User(const std::string &n) : name(n) {}
              std::string getName() const {
                  return name;
              }
          };

          class Printer {
          public:
              void printUserName(const User &user) {
                  std::cout << user.getName() << std::endl;
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): Each class has clear responsibilities and minimal knowledge of others
          class Book {
          public:
              std::string getTitle() const { /* ... */ }
          };

          class Library {
          public:
              Book getBook() const { /* ... */ }
          };

          class Reader {
          public:
              void readBookTitle(const Book &book) {
                  std::cout << book.getTitle() << std::endl;
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Breaking the principle by diving too deep into an object's structure
          class Address {
          private:
              std::string street;
              // ... other members
          public:
              std::string getStreet() const {
                  return street;
              }
              // ... other methods
          };

          class User {
          private:
              Address address;
          public:
              Address getAddress() const {
                  return address;
              }
          };

          class Printer {
          public:
              void printUserStreet(const User &user) {
                  std::cout << user.getAddress().getStreet() << std::endl; // Violates the principle
              }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Deeply nested calls
          class Book {
              std::string getTitle() const { /* ... */ }
          };

          class Shelf {
              Book getBook() const { /* ... */ }
          };

          class Room {
              Shelf getShelf() const { /* ... */ }
          };

          class Library {
              Room getRoom() const { /* ... */ }
          };

          class Reader {
              void readBookTitle(const Library &library) {
                  std::cout << library.getRoom().getShelf().getBook().getTitle() << std::endl; // Violates the principle
              }
          };
  - title: Separation of Concerns
    examples:
      - title: Good Example (C++11)
        code: |
          // Good example (C++11): Separation of database operations and business logic
          class Database {
          public:
              void saveUserData(const std::string &data) { /* ... */ }
          };

          class UserManager {
          private:
              Database db;
          public:
              void createUser(const std::string &name) {
                  // ... business logic ...
                  db.saveUserData(name);
              }
          };
      - title: Good Example (C++03)
        code: |
          // Good example (C++03): UI and business logic separation
          class UserInterface {
          public:
              void displayUser(const std::string &name) { /* ... */ }
          };

          class BusinessLogic {
          private:
              UserInterface ui;
          public:
              void processUser(const std::string &name) {
                  // ... some processing ...
                  ui.displayUser(name);
              }
          };
      - title: Bad Example (C++11)
        code: |
          // Bad example (C++11): Mixing database operations with business logic in a single class
          class UserManager {
          public:
              void createUser(const std::string &name) {
                  // ... business logic ...
                  saveUserDataToDB(name); // Database operation inside business logic
              }
          private:
              void saveUserDataToDB(const std::string &data) { /* ... */ }
          };
      - title: Bad Example (C++03)
        code: |
          // Bad example (C++03): Mixing UI with business logic
          class Application {
          public:
              void processAndDisplayUser(const std::string &name) {
                  // ... some processing ...
                  displayUser(name); // UI mixed with logic
              }
          private:
              void displayUser(const std::string &name) { /* ... */ }
          };

  - title: Resource Acquisition Is Initialization (RAII)
    description: RAII is a coding idiom in C++ where resources such as memory, file handles, and network sockets are acquired during the initialization of an object and released automatically when the object goes out of scope (i.e., upon its destruction). This ensures resource leaks are minimized and management of resources is more intuitive.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using RAII to manage a file resource
          class FileHandle {
          private:
              std::FILE* file;
          public:
              FileHandle(const char* filename, const char* mode) {
                  file = std::fopen(filename, mode);
                  if(!file) {
                      throw std::runtime_error("Failed to open file");
                  }
              }
              ~FileHandle() {
                  std::fclose(file);
              }
              // Other member functions...
          };
      - title: Bad Example (C++11)
        code: |
          // Manually managing a file resource without RAII
          class FileHandle {
          private:
              std::FILE* file;
          public:
              void open(const char* filename, const char* mode) {
                  file = std::fopen(filename, mode);
                  if(!file) {
                      throw std::runtime_error("Failed to open file");
                  }
              }
              void close() {
                  std::fclose(file);
              }
              // Risk of forgetting to close the file manually
          };
  - title: Use Smart Pointers for Dynamic Allocation
    description: In C++, dynamic memory allocation can be a source of memory leaks and other bugs. Smart pointers, introduced in C++11, are classes designed to manage the lifetime of dynamically allocated objects automatically. They reduce the risk of memory leaks by ensuring that resources are cleaned up appropriately when no longer in use.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using a smart pointer to manage dynamic memory
          std::unique_ptr<int> p(new int(42));
      - title: Bad Example (C++11)
        code: |
          // Using a raw pointer and forgetting to delete
          int* p = new int(42);
          // ... forgot to delete
  - title: Prefer the Standard Library (STL)
    description: The C++ Standard Library (STL) offers a wide range of data structures, algorithms, and utilities. Leveraging the STL can help ensure code is more efficient, readable, and maintainable. Additionally, it reduces the risk of bugs since STL components are widely tested.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using STL's sort algorithm
          std::vector<int> vec = {3, 1, 4, 1, 5, 9, 2, 6, 5};
          std::sort(vec.begin(), vec.end());

      - title: Bad Example (C++11)
        code: |
          // Implementing a custom sort (which might be error-prone)
          void customSort(std::vector<int>& vec) {
              // ... implementation
          }
          customSort(vec);
  - title: Favor Const-Correctness
    description: |
      "Const-correctness" refers to using the `const` keyword to promise that a function won't modify certain data.
      This enhances code safety and readability, allowing developers to understand intent and avoid accidental modifications.
    examples:
      - title: Good Example (C++11)
        code: |
          // A function that promises not to modify the passed string
          void printStringLength(const std::string& str) {
              std::cout << str.length() << std::endl;
          }
      - title: Bad Example (C++11)
        code: |
          // A function without const, risking modification of the string
          void riskyPrintStringLength(std::string& str) {
              // ... might accidentally modify str
              std::cout << str.length() << std::endl;
          }
  - title: Use Automatic Type Deduction (`auto`) Judiciously
    description: With C++11, the `auto` keyword allows for automatic type deduction. While it can make code more concise, it should be used judiciously to ensure code readability and clarity of intent.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using auto for iterators which can have verbose types
          std::map<std::string, int> mapping;
          for (auto it = mapping.begin(); it != mapping.end(); ++it) {
              // ... use it
          }
      - title: Bad Example (C++11)
        code: |
          // Overusing auto where explicit types are clearer
          auto x = 42; // Better as int x = 42;
          auto y = "hello"; // Better as const char* y = "hello";
  - title: Avoid Raw Pointers for Ownership
    description: Raw pointers don't clearly convey ownership semantics, leading to potential memory leaks or double-deletions. Instead, smart pointers (like `std::unique_ptr` and `std::shared_ptr`) should be used as they more explicitly manage ownership.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using a smart pointer to manage ownership
          std::unique_ptr<MyClass> obj(new MyClass());
      - title: Bad Example (C++11)
        code: |
          // Using a raw pointer, leading to ambiguity about ownership
          MyClass* obj = new MyClass();
          // ... might forget to delete, or delete multiple times
  - title: RAII (Resource Acquisition Is Initialization)
    description: RAII is a coding principle in C++ where the lifetime of an object is tied to its scope. This ensures resources (like memory, files, network sockets) are automatically managed and released when they're no longer needed, reducing errors like leaks.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using RAII for file management
          {
              std::ofstream file("example.txt");
              file << "Hello, RAII!";
          } // file's destructor is automatically called here, closing the file

      - title: Bad Example (C++11)
        code: |
          // Manual file management, which can lead to leaks/errors
          std::ofstream* file = new std::ofstream("example.txt");
          *file << "Hello, manual management!";
          // ... might forget to delete file or close it

  - title: Prefer Stack to Heap Allocation
    description: Memory on the stack is automatically managed, making it faster and reducing the risk of memory leaks. When feasible, prefer stack allocation over heap allocation. Heap allocation is suited for larger or dynamically-sized objects.
    examples:
      - title: Good Example (C++11)
        code: |
          // Allocating on the stack
          int array[100]; // stack-allocated

      - title: Bad Example (C++11)
        code: |
          // Unnecessary heap allocation
          int* array = new int[100]; // heap-allocated
          // ... might forget to delete[] array

  - title: Avoid C-style Arrays
    description: C-style arrays don't store their size and can easily result in overflows. It's preferable to use container classes like `std::vector` that are safer and offer more functionality.
    examples:
      - title: Good Example (C++11)
        code: |
          // Using std::vector instead of C-style array
          std::vector<int> vec = {1, 2, 3, 4, 5};

      - title: Bad Example (C++11)
        code: |
          // Using C-style array
          int arr[5] = {1, 2, 3, 4, 5};
          // ... risks of buffer overflows or out-of-bounds access

  - title: Utilize C++ Casts Over C-style Casts
    description: C++ offers a suite of cast operators (`static_cast`, `dynamic_cast`, `const_cast`, `reinterpret_cast`) which are more explicit and safer than C-style casts.
    examples:
      - title: Good Example (C++11)
        code: |
          double value = 3.14;
          int intValue = static_cast<int>(value);

      - title: Bad Example (C++11)
        code: |
          double value = 3.14;
          int intValue = (int)value;  // C-style cast
