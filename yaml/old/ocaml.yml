---
language: OCaml
code: ocaml
birth: 1996
parent: ml
description: >
  A functional and statically-typed programming language known for its strong type inference and safety features.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Splitting responsibilities into separate modules *)
          module UserDataManager = struct
            let save_user_data () = (* ... *)
          end

          module UserNotification = struct
            let send_notification () = (* ... *)
          end

      - title: Bad Example
        code: |
          (* Bad example: A module handling both user data management and user notifications *)
          module User = struct
            let save_user_data () = (* ... *)
            let send_notification () = (* ... *)
          end

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Using abstraction to allow extension without modification *)
          type shape =
            | Rectangle of float * float
            | Circle of float

          let compute_area shape =
            match shape with
            | Rectangle (width, height) -> width *. height
            | Circle radius -> 3.14 *. radius *. radius

      - title: Bad Example
        code: |
          (* Bad example: Modifying existing code to add new functionality *)
          type shape =
            | Rectangle of float * float
            | Circle of float

          let compute_area shape =
            match shape with
            | Rectangle (width, height) -> width *. height
            | Circle radius -> 3.14 *. radius *. radius

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Derived classes maintain the behavior of the base class *)
          type bird =
            | Sparrow
            | NonFlyingBird

          let fly bird =
            match bird with
            | Sparrow -> "Flying high!"
            | NonFlyingBird -> "Can't fly!"

      - title: Bad Example
        code: |
          (* Bad example: Derived class changes the behavior of the base class *)
          type bird =
            | Sparrow
            | Ostrich

          let fly bird =
            match bird with
            | Sparrow -> "Flying high!"
            | Ostrich -> "Can't fly!"

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Smaller module signatures with specific methods *)
          module type Lightable = sig
            val turn_on : unit -> unit
          end

          module LightBulb : Lightable = struct
            let turn_on () = print_endline "Light bulb turned on"
          end

          let operate (module Device : Lightable) = Device.turn_on ()

      - title: Bad Example
        code: |
          (* Bad example: A bulky module signature *)
          module type Lightable = sig
            val turn_on : unit -> unit
            val turn_off : unit -> unit
          end

          module LightBulb : Lightable = struct
            let turn_on () = print_endline "Light bulb turned on"
            let turn_off () = print_endline "Light bulb turned off"
          end

          let operate (module Device : Lightable) = Device.turn_on ()

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          (* Good example: Using Higher-Order Functions *)
          let greet formatter name = formatter name

          let polite_formatter name = "Hello, " ^ name ^ "! How are you today?"

          let casual_formatter name = "Hey, " ^ name ^ "!"

          (* Usage *)
          let _ = greet polite_formatter "Alice"  (* "Hello, Alice! How are you today?" *)
          let _ = greet casual_formatter "Bob"      (* "Hey, Bob!" *)

          (* Using Abstract Modules (Module Signatures) *)
          module type DATABASE = sig
            val fetch : string -> string
          end

          module MockDatabase : DATABASE = struct
            let fetch id = "Mock data for " ^ id
          end

          module ProductionDatabase : DATABASE = struct
            let fetch id = "Real data for " ^ id (* Assume some real fetching here *)
          end

          let get_data (module DB : DATABASE) id = DB.fetch id

          (* Usage *)
          let _ = get_data (module MockDatabase) "123"       (* "Mock data for 123" *)
          let _ = get_data (module ProductionDatabase) "123" (* "Real data for 123" *)

      - title: Bad Example
        code: |
          (* Bad example: Using Records or Objects *)
          type database = {
            fetch : string -> string
          }

          let mock_database = {
            fetch = fun id -> "Mock data for " ^ id
          }

          let production_database = {
            fetch = fun id -> "Real data for " ^ id (* Assume some real fetching here *)
          }

          let get_data db id = db.fetch id

          (* Usage *)
          let _ = get_data mock_database "123"       (* "Mock data for 123" *)
          let _ = get_data production_database "123" (* "Real data for 123" *)

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          (* Good example: Single function for repeated logic *)
          let add_tax ?(rate=0.05) price = price +. price *. rate

      - title: Bad Example
        code: |
          (* Bad example: Repeated logic *)
          let add_tax_for_food price = price +. price *. 0.05

          let add_tax_for_electronics price = price +. price *. 0.05

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          (* Good example: Simplified approach *)
          let is_even num = num mod 2 = 0

      - title: Bad Example
        code: |
          (* Bad example: Overcomplicated way to check even numbers *)
          let is_even num = num mod (if num > 0 then 2 else -2) = 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          (* Good example: Only implement what's needed *)
          type car = Drive

      - title: Bad Example
        code: |
          (* Bad example: Adding unnecessary features *)
          type car =
            | Drive
            | Fly  (* Cars don't fly! *)

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          (* Good example: Using pattern matching to minimize knowledge *)
          let purchase item_price person =
            match person with
            | { wallet = { money } } when money >= item_price -> true
            | _ -> false

      - title: Bad Example
        code: |
          (* Bad example: Accessing nested structures directly *)
          let purchase item_price { wallet = { money } } = money >= item_price

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          (* Good example: Separating concerns into different modules *)
          module UserData = struct
            let fetch_user_data () = (* ... *)
          end

          module UserView = struct
            let render_user user = (* ... *)
          end

      - title: Bad Example
        code: |
          (* Bad example: Mixing data retrieval and presentation in one module *)
          module User = struct
            let fetch_user_data () = (* ... *)
            let render_user user = (* ... *)
          end
