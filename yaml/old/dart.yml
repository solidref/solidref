---
language: Dart
code: dart
parent: c
birth: 2011
description: Developed by Google, Dart is an object-oriented, class-based language with C-style syntax. It can be transpiled to JavaScript and is used for building mobile and desktop web applications.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate classes
          class UserDataManager {
            void saveUserData() { /* ... */ }
          }

          class UserNotification {
            void sendNotification() { /* ... */ }
          }

      - title: Bad Example
        code: |
          // Bad example: A class handling both user data management and user notifications
          class User {
            void saveUserData() { /* ... */ }
            void sendNotification() { /* ... */ }
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Using abstraction to allow extension without modification
          abstract class Shape {
            double computeArea();
          }

          class Circle extends Shape {
            double radius;
            @override
            double computeArea() => 3.14 * radius * radius;
          }

      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          class Rectangle {
            double width;
            double height;
            double computeArea() => width * height;
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          class FlyingBird {
            void fly() { /* ... */ }
          }

          class NonFlyingBird {
            void walk() { /* ... */ }
          }

      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          class Bird {
            void fly() { /* ... */ }
          }

          class Ostrich extends Bird {
            @override
            void fly() {
              throw Exception("Can't fly");
            }
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Segregated interfaces
          abstract class Workable {
            void work();
          }

          abstract class Eatable {
            void eat();
          }

      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          abstract class Worker {
            void work();
            void eat();
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          abstract class Device {
            void turnOn();
          }

          class Fan implements Device {
            @override
            void turnOn() { /* ... */ }
          }

          class Switch {
            final Device device;
            Switch(this.device);
            void operate() {
              device.turnOn();
            }
          }

      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          class LightBulb {
            void turnOn() { /* ... */ }
          }

          class Switch {
            final LightBulb bulb;
            Switch(this.bulb);
            void operate() {
              bulb.turnOn();
            }
          }

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Single function for repeated logic
          double addTax(double price, [double rate = 0.05]) {
            return price + (price * rate);
          }

      - title: Bad Example
        code: |
          // Bad example: Repeated logic
          double addTaxForFood(double price) {
            return price + (price * 0.05);
          }

          double addTaxForElectronics(double price) {
            return price + (price * 0.05);
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified approach
          bool isEven(int num) {
            return num % 2 == 0;
          }

      - title: Bad Example
        code: |
          // Bad example: Overcomplicated way to check even numbers
          bool isEven(int num) {
            return num % num.abs() == 0;
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Only implement what's needed
          class Car {
            void drive() { /* ... */ }
          }

      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          class Car {
            void drive() { /* ... */ }
            void fly() { /* ... */ }  // Cars don't fly!
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using encapsulation
          class Wallet {
            double _money = 100;
            double getAmount() => _money;
          }

          class Person {
            Wallet wallet = Wallet();
            double getMoneyAmount() => wallet.getAmount();
          }

          void purchase(Item item, Person buyer) {
            if (buyer.getMoneyAmount() >= item.price) {
              // ...
            }
          }

      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          class Wallet {
            Money money = Money(100);
          }

          class Person {
            Wallet wallet = Wallet();
          }

          void purchase(Item item, Person buyer) {
            if (buyer.wallet.money.amount >= item.price) {
              // ...
            }
          }

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different modules
          class UserDataService {
            void fetchUserData() { /* ... */ }
          }

          class UserLogic {
            void calculateAge() { /* ... */ }
          }

          class UserComponent {
            void render() { /* ... */ }
          }

      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval and presentation
          class UserComponent {
            void fetchUserData() { /* ... */ }
            void render() { /* ... */ }
            void calculateAge() { /* ... */ }
          }
