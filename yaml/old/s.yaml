language: S
code: s
birth: 1976
description: >
  S is a statistical programming language developed primarily at AT&T Bell Laboratories. The language aims to provide an interactive environment for data analysis and graphics. R, an open-source programming language, is an implementation and extension of the S language.
principles:
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          # Good example: Reusing a single function for tax calculation
          calculate.tax <- function(rate, price) {
              return(price * rate)
          }
      - title: Bad Example
        code: |
          # Bad example: Repeated logic for tax calculation
          calculate.tax.for.food <- function(price) {
              return(price * 0.1)
          }

          calculate.tax.for.electronics <- function(price) {
              return(price * 0.1)
          }
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          # Good example: Simplified logic for checking even numbers
          is.even <- function(num) {
              return(num %% 2 == 0)
          }
      - title: Bad Example
        code: |
          # Bad example: Overly complex logic for checking even numbers
          is.even <- function(num) {
              if (num > 0) {
                  if (num %% 2 == 0) {
                      return(TRUE)
                  }
                  return(FALSE)
              } else {
                  if (num %% -2 == 0) {
                      return(TRUE)
                  }
                  return(FALSE)
              }
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          # Good example: Implementing only what's needed
          drive.car <- function() {
              cat("Car is driving\n")
          }
      - title: Bad Example
        code: |
          # Bad example: Adding unnecessary features to a function
          drive.car <- function() {
              cat("Car is driving\n")
          }

          fly.car <- function() {
              cat("Cars don't fly!\n")
          }
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          # Good example: Direct interaction with a given structure
          display.price <- function(item) {
              cat("The price of the item is:", item$price, "\n")
          }
      - title: Bad Example
        code: |
          # Bad example: Accessing nested structures directly
          display.price <- function(buyer) {
              cat("The price of the item is:", buyer$item$price, "\n")
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          # Good example: Separating data retrieval and display
          fetch.data <- function() {
              data <- "sample data"
              return(data)
          }

          display.data <- function(data) {
              cat(data, "\n")
          }
      - title: Bad Example
        code: |
          # Bad example: Mixing data retrieval and display
          fetch.data.and.display <- function() {
              data <- "sample data"
              cat(data, "\n")
          }
  - title: Use Vectorization
    examples:
      - title: Good Example
        code: |
          # Good example: Using vectorized operations for efficient computation
          x <- c(1, 2, 3, 4)
          y <- x * 2
      - title: Bad Example
        code: |
          # Bad example: Using loops unnecessarily when vectorized operations are available
          x <- c(1, 2, 3, 4)
          y <- numeric(length(x))
          for(i in 1:length(x)) {
              y[i] <- x[i] * 2
          }
  - title: Prefer Functional Programming
    examples:
      - title: Good Example
        code: |
          # Good example: Using lapply to apply a function over a list or vector
          numbers <- list(1:4, 5:8, 9:12)
          squares <- lapply(numbers, function(x) x^2)
      - title: Bad Example
        code: |
          # Bad example: Using explicit loops for the same task
          numbers <- list(1:4, 5:8, 9:12)
          squares <- list()
          for(i in 1:length(numbers)) {
              squares[[i]] <- numbers[[i]]^2
          }
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          # Good example: Direct interaction with a given structure
          display.price <- function(item) {
              cat("The price of the item is:", item$price, "\n")
          }
      - title: Bad Example
        code: |
          # Bad example: Accessing nested structures directly
          display.price <- function(buyer) {
              cat("The price of the item is:", buyer$item$price, "\n")
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          # Good example: Separating data retrieval and display
          fetch.data <- function() {
              data <- "sample data"
              return(data)
          }

          display.data <- function(data) {
              cat(data, "\n")
          }
      - title: Bad Example
        code: |
          # Bad example: Mixing data retrieval and display
          fetch.data.and.display <- function() {
              data <- "sample data"
              cat(data, "\n")
          }
  - title: Use Vectorization
    examples:
      - title: Good Example
        code: |
          # Good example: Using vectorized operations for efficient computation
          x <- c(1, 2, 3, 4)
          y <- x * 2
      - title: Bad Example
        code: |
          # Bad example: Using loops unnecessarily when vectorized operations are available
          x <- c(1, 2, 3, 4)
          y <- numeric(length(x))
          for(i in 1:length(x)) {
              y[i] <- x[i] * 2
          }
  - title: Prefer Functional Programming
    examples:
      - title: Good Example
        code: |
          # Good example: Using lapply to apply a function over a list or vector
          numbers <- list(1:4, 5:8, 9:12)
          squares <- lapply(numbers, function(x) x^2)
      - title: Bad Example
        code: |
          # Bad example: Using explicit loops for the same task
          numbers <- list(1:4, 5:8, 9:12)
          squares <- list()
          for(i in 1:length(numbers)) {
              squares[[i]] <- numbers[[i]]^2
          }
