---
language: TypeScript
code: typescript
parent: javascript
birth: 2012
description: Developed by Microsoft, TypeScript is a superset of JavaScript that adds optional static typing. It can catch type-related errors at compile-time, making it a favorite for large-scale applications.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate classes
          class UserDataManager {
              saveUserData() { /* ... */ }
          }

          class UserNotification {
              sendNotification() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: A class handling both user data management and user notifications
          class User {
              saveUserData() { /* ... */ }
              sendNotification() { /* ... */ }
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Using abstraction to allow extension without modification
          interface Shape {
              computeArea(): number;
          }

          class Circle implements Shape {
              radius: number;
              computeArea() {
                  return 3.14 * this.radius * this.radius;
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          class Rectangle {
              width: number;
              height: number;
          }

          class AreaCalculator {
              computeArea(rectangle: Rectangle) {
                  return rectangle.width * rectangle.height;
              }
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          class FlyingBird {
              fly() { /* ... */ }
          }

          class NonFlyingBird {
              walk() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          class Bird {
              fly() { /* ... */ }
          }

          class Ostrich extends Bird {
              fly() {
                  throw new Error("Can't fly");
              }
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Segregated interfaces
          interface Workable {
              work(): void;
          }

          interface Eatable {
              eat(): void;
          }
      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          interface Worker {
              work(): void;
              eat(): void;
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          interface Device {
              turnOn(): void;
          }

          class Fan implements Device {
              turnOn() { /* ... */ }
          }

          class Switch {
              constructor(private device: Device) {}
              operate() {
                  this.device.turnOn();
              }
          }
      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          class LightBulb {
              turnOn() { /* ... */ }
          }

          class Switch {
              constructor(private bulb: LightBulb) {}
              operate() {
                  this.bulb.turnOn();
              }
          }

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Single function for repeated logic
          function addTax(price: number, rate: number = 0.05) {
              return price + (price * rate);
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic
          function addTaxForFood(price: number) {
              return price + (price * 0.05);
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified approach
          function isEven(num: number): boolean {
              return num % 2 === 0;
          }
      - title: Bad Example
        code: |
          // Bad example: Overcomplicated way to check even numbers
          function isEven(num: number): boolean {
              return num % Math.abs(2) === 0;
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Only implement what's needed
          class Car {
              drive() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          class Car {
              drive() { /* ... */ }
              fly() { /* ... */ }  // Cars don't fly!
          }

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using encapsulation
          class Wallet {
              private money: number;
              getAmount() { return this.money; }
          }

          class Person {
              wallet: Wallet;
              getMoneyAmount() { return this.wallet.getAmount(); }
          }

          function purchase(item: any, buyer: Person) {
              if (buyer.getMoneyAmount() >= item.price) { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          class Wallet {
              money: { amount: number };
          }

          class Person {
              wallet: Wallet;
          }

          function purchase(item: any, buyer: Person) {
              if (buyer.wallet.money.amount >= item.price) { /* ... */ }
          }

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different modules
          class UserDataService {
              fetchUserData() { /* ... */ }
          }

          class UserLogic {
              calculateAge() { /* ... */ }
          }

          class UserComponent {
              render() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval and presentation
          class UserComponent {
              fetchUserData() { /* ... */ }
              render() { /* ... */ }
              calculateAge() { /* ... */ }
          }
