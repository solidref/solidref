language: Tcl
code: tcl
parent: c
birth: 1988
description: >
  Tcl (Tool Command Language) is a dynamic programming language suitable for a wide range of uses, including web and desktop applications, networking, administration, and testing. It is known for its simple syntax and the popular GUI toolkit called Tk.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          # Good example: Separating responsibilities into separate procedures
          proc fetchData {} {
              # Fetching data logic
          }

          proc renderData {data} {
              # Rendering logic
          }
      - title: Bad Example
        code: |
          # Bad example: A procedure handling both fetching and rendering
          proc fetchAndRenderData {} {
              # Fetching data
              # Rendering data
          }
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          # Good example: Use variables and procedures for easy modification and extension
          proc getMultiplier {type} {
              switch $type {
                  "double" { return 2 }
                  "triple" { return 3 }
                  default  { return 1 }
              }
          }
      - title: Bad Example
        code: |
          # Bad example: Hardcoding values
          proc computeValue {type value} {
              if {$type eq "double"} {
                  return [expr {$value * 2}]
              } else {
                  return $value
              }
          }
  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          # Good example: Derived procedures maintain the behavior of the base procedure
          proc printAnimalSound {animal} {
              switch $animal {
                  "dog"   { puts "Bark!" }
                  "cat"   { puts "Meow!" }
                  default { puts "Some sound" }
              }
          }
      - title: Bad Example
        code: |
          # Bad example: Changing behavior unexpectedly
          proc printAnimalSound {animal} {
              if {$animal eq "fish"} {
                  error "Fish don't make sound!"
              }
              # ... rest of the code
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using namespaces to group related procedures
          namespace eval Math {
              proc add {a b} {
                  return [expr {$a + $b}]
              }
          }

          namespace eval StringManipulation {
              proc length {str} {
                  return [string length $str]
              }
          }
      - title: Bad Example
        code: |
          # Bad example: Placing unrelated procedures in the same namespace
          namespace eval Utils {
              proc add {a b} {
                  return [expr {$a + $b}]
              }
              proc length {str} {
                  return [string length $str]
              }
          }
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using a consistent interface for procedures
          proc turnOn {device} {
              $device turnOn
          }

          namespace eval Bulb {
              proc turnOn {} {
                  puts "Bulb is turned on"
              }
          }

          turnOn Bulb
      - title: Bad Example
        code: |
          # Bad example: Directly calling a specific implementation
          proc turnOnBulb {} {
              puts "Bulb is turned on"
          }
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          # Good example: Reusing a single procedure for tax calculation
          proc calculateTax {rate price} {
              return [expr {$price * $rate}]
          }
      - title: Bad Example
        code: |
          # Bad example: Repeated logic for tax calculation
          proc calculateTaxForFood {price} {
              return [expr {$price * 0.1}]
          }

          proc calculateTaxForElectronics {price} {
              return [expr {$price * 0.1}]
          }
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          # Good example: Simplified logic for checking even numbers
          proc isEven {num} {
              return [expr {$num % 2 == 0}]
          }
      - title: Bad Example
        code: |
          # Bad example: Overly complex logic for checking even numbers
          proc isEven {num} {
              if {$num > 0} {
                  if {$num % 2 == 0} {
                      return 1
                  }
                  return 0
              } else {
                  if {$num % -2 == 0} {
                      return 1
                  }
                  return 0
              }
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          # Good example: Implementing only what's needed
          proc driveCar {} {
              puts "Car is driving"
          }
      - title: Bad Example
        code: |
          # Bad example: Adding unnecessary features to a procedure
          proc driveCar {} {
              puts "Car is driving"
          }

          proc flyCar {} {
              puts "Cars don't fly!"
          }
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          # Good example: Directly working with given data
          proc displayPrice {item} {
              puts "The price of the item is: $item(price)"
          }
      - title: Bad Example
        code: |
          # Bad example: Accessing nested structures directly
          proc displayPrice {buyer} {
              puts "The price of the item is: $buyer(item, price)"
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          # Good example: Separating data retrieval and display
          proc fetchData {} {
              # ... code to fetch data
              set data "sample data"
              return $data
          }

          proc displayData {data} {
              puts $data
          }
      - title: Bad Example
        code: |
          # Bad example: Mixing data retrieval and presentation
          proc fetchDataAndDisplay {} {
              # ... code to fetch data
              set data "sample data"
              puts $data
          }
  - title: Keep Global Scope Clean
    examples:
      - title: Good Example
        code: |
          # Good example: Using namespaces to avoid polluting the global scope
          namespace eval MyModule {
              variable localVar "Local to the namespace"
              proc myFunc {} {
                  puts $localVar
              }
          }
      - title: Bad Example
        code: |
          # Bad example: Creating variables and procedures directly in the global scope
          set globalVar "This is a global variable"
          proc myGlobalFunc {} {
              puts $globalVar
          }
