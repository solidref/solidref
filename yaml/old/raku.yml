---
language: Raku
code: raku
birth: 2015
parent: perl
description: Raku is a member of the Perl family of programming languages, designed as its successor. While retaining many features of Perl, Raku has been redesigned and extended to provide modern programming capabilities.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using separate classes for different responsibilities
          class Storage {
              has @.data;
          }

          class Display {
              method show($data) {
                  say $data;
              }
          }

      - title: Bad Example
        code: |
          # Bad example: Merging storage and display functionality
          class StoreAndDisplay {
              has @.data;
              method show() {
                  say @!data;
              }
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          # Good example: Extending classes without modifying the original
          class Shape {
              method area() { ... }
          }

          class Circle is Shape {
              has $.radius;
              method area() { return 3.14 * $.radius * $.radius; }
          }

      - title: Bad Example
        code: |
          # Bad example: Modifying the base class for new types
          class Shape {
              has $.type;
              method area() {
                  given $.type {
                      when 'circle' { return 3.14 * $.radius * $.radius; }
                      # Adding more shape types will modify this class
                  }
              }
          }

  - title: Use Native Raku Features
    examples:
      - title: Good Example
        code: |
          # Good example: Using Raku's built-in Junctions for more expressive conditions
          if $x == 1 | 2 | 3 {
              say "x is 1, 2, or 3";
          }

      - title: Bad Example
        code: |
          # Bad example: Not utilizing Raku's expressiveness
          if $x == 1 || $x == 2 || $x == 3 {
              say "x is 1, 2, or 3";
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          # Good example: Derived classes maintain the behavior of the base class
          class Bird {
              method fly() { say "Flying"; }
          }

          class Sparrow is Bird {
              method fly() { say "Sparrow flying"; }
          }

      - title: Bad Example
        code: |
          # Bad example: Derived class changes the behavior of the base class
          class Ostrich is Bird {
              method fly() { die "Ostriches can't fly!"; }
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          # Good example: Using roles to create specific interfaces
          role CanFly {
              method fly() { ... }
          }

          role CanSwim {
              method swim() { ... }
          }

      - title: Bad Example
        code: |
          # Bad example: One role with too many methods
          role AnimalActions {
              method fly() { ... }
              method swim() { ... }
          }

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          # Good example: Depending on abstractions using roles
          role Logger {
              method log($message) { ... }
          }

          class ConsoleLogger does Logger {
              method log($message) { say $message; }
          }

          class Application {
              has Logger $.logger;
          }

      - title: Bad Example
        code: |
          # Bad example: Directly depending on a concrete implementation
          class Application {
              has ConsoleLogger $.logger;
          }

  - title: Embrace Functional Programming Capabilities
    examples:
      - title: Good Example
        code: |
          # Good example: Using Raku's functional capabilities
          my @nums = 1, 2, 3, 4, 5;
          my @squared = @nums.map({ $_ ** 2 });

      - title: Bad Example
        code: |
          # Bad example: Not leveraging functional programming
          my @nums = 1, 2, 3, 4, 5;
          my @squared;
          for @nums -> $num {
              @squared.push($num ** 2);
          }
  - title: Use Strong Typing Capabilities
    examples:
      - title: Good Example
        code: |
          # Good example: Specifying types for better clarity and safety
          subset PositiveInt of Int where * > 0;

          class Product {
              has Str $.name;
              has PositiveInt $.stock;
          }

      - title: Bad Example
        code: |
          # Bad example: Not specifying types, making code more error-prone
          class Product {
              has $.name;
              has $.stock;
          }

  - title: Leverage Concurrency and Parallelism
    examples:
      - title: Good Example
        code: |
          # Good example: Using Raku's concurrency capabilities
          start {
              say "This runs concurrently";
          }

      - title: Bad Example
        code: |
          # Bad example: Not leveraging concurrency, potentially making code slower
          say "This runs in a blocking manner";

  - title: Embrace Raku's Grammar and Parsing Capabilities
    examples:
      - title: Good Example
        code: |
          # Good example: Creating a custom grammar for parsing
          grammar NumberParser {
              token TOP { <number> }
              token number { \d+ }
          }

          my $result = NumberParser.parse("12345");

      - title: Bad Example
        code: |
          # Bad example: Using regex for complex parsing tasks
          if "12345" ~~ m/^\d+$/ {
              say "It's a number";
          }

  - title: Use Native Call Interface for Interoperability
    examples:
      - title: Good Example
        code: |
          # Good example: Interacting with external C libraries
          use NativeCall;
          sub gethostname(Str $name, int $size) returns int is native;
          my $name = " " x 256;
          gethostname($name, 256);
          say $name;

      - title: Bad Example
        code: |
          # Bad example: Not leveraging Raku's native call interface for interoperability
          # (Assuming a hypothetical situation where a better solution exists in an external library)
