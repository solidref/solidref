---
language: F#
code: fsharp
birth: 2005
parent: ocaml
description: >
  A functional-first programming language developed by Microsoft. F# combines functional, imperative, and object-oriented programming styles and is known for its concise and expressive syntax.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate modules
          module UserDataManager =
              let saveUserData data = // ...

          module UserNotification =
              let sendNotification notification = // ...

      - title: Bad Example
        code: |
          // Bad example: A module handling both user data management and user notifications
          module User =
              let saveUserData data = // ...

              let sendNotification notification = // ...

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          // Good example: Using abstraction to allow extension without modification
          type IShape =
              abstract CalculateArea : float

          type Rectangle(width: float, height: float) =
              interface IShape with
                  member this.CalculateArea = width * height

          type Circle(radius: float) =
              interface IShape with
                  member this.CalculateArea = 3.14 * radius * radius

      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          type Shape =
              | Rectangle of float * float
              | Circle of float

          let calculateArea shape =
              match shape with
              | Rectangle (width, height) -> width * height
              | Circle radius -> 3.14 * radius * radius

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          // Good example: Derived classes maintain the behavior of the base class
          type FlyingBird() =
              member this.Fly() = // ...

          type NonFlyingBird() =
              member this.Walk() = // ...

      - title: Bad Example
        code: |
          // Bad example: Derived class changes the behavior of the base class
          type Bird() =
              member this.Fly() = // ...

          type Ostrich() =
              inherit Bird()
              override this.Fly() = failwith "Can't fly"

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          // Good example: Smaller type interfaces with specific methods
          type IWorkable =
              abstract Work : unit -> unit

          type IEatable =
              abstract Eat : unit -> unit

      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          type IWorker =
              abstract Work : unit -> unit
              abstract Eat : unit -> unit

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          type IDevice =
              abstract TurnOn : unit -> unit

          type Fan() =
              interface IDevice with
                  member this.TurnOn() = // ...

          type SmartSwitch(device: IDevice) =
              member this.Operate() = device.TurnOn()

      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          type LightBulb() =
              member this.TurnOn() = // ...

          type Switch(bulb: LightBulb) =
              member this.Operate() = bulb.TurnOn()

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Single function for repeated logic
          let addTax rate price = price + price * rate

      - title: Bad Example
        code: |
          // Bad example: Repeated logic
          let addTaxForFood price = price + price * 0.05

          let addTaxForElectronics price = price + price * 0.05

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simplified approach
          let isEven num = num % 2 = 0

      - title: Bad Example
        code: |
          // Bad example: Overcomplicated way to check even numbers
          let isEven num = num % (if num > 0 then 2 else -2) = 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Only implement what's needed
          type Car = Drive

      - title: Bad Example
        code: |
          // Bad example: Adding unnecessary features
          type Car =
              | Drive
              | Fly  // Cars don't fly!

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Using pattern matching to minimize knowledge
          let purchase itemPrice (buyer: Person) =
              match buyer.Wallet with
              | Wallet(money) when money >= itemPrice -> true
              | _ -> false

      - title: Bad Example
        code: |
          // Bad example: Accessing nested structures directly
          let purchase itemPrice (buyer: Person) =
              buyer.Wallet.Money >= itemPrice

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different modules
          module UserDataService =
              let fetchUserData() = // ...

          module UserLogic =
              let calculateAge(user: UserData) = // ...

          module UserComponent =
              let render(user: UserData) = // ...
