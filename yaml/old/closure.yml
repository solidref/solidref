---
language: ClojureScript
code: clojure
parent: javascript
birth: 2011
description: A compiler for Clojure that targets JavaScript. It brings the power of Clojure (a functional Lisp dialect) to web development.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          ;; Good example: Splitting responsibilities into separate namespaces
          (ns user-data-manager)

          (defn save-user-data [data]
              ;; ...
              )

          (ns user-notification)

          (defn send-notification [notification]
              ;; ...
              )

      - title: Bad Example
        code: |
          ;; Bad example: A namespace handling both user data management and user notifications
          (ns user)

          (defn save-user-data [data]
              ;; ...
              )

          (defn send-notification [notification]
              ;; ...
              )

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          ;; Using multi-methods to represent different shapes and their areas
          (defmulti compute-area :shape)

          (defmethod compute-area :rectangle [{:keys [width height]}]
              (* width height))

          (defmethod compute-area :circle [{:keys [radius]}]
              (* 3.14 radius radius))
      - title: Bad Example
        code: |
          ;; Modifying existing code to add new functionality
          (defn compute-area [shape]
              (cond
                  (= (:type shape) :rectangle) (* (:width shape) (:height shape))
                  (= (:type shape) :circle) (* 3.14 (:radius shape) (:radius shape))
                  :else (throw (ex-info "Unknown shape" {:shape shape}))))
  - title: SOLID / Liskov Substitution Principle (LSP)
    code: "Given that Clojure is a dynamically-typed language, the LSP doesn't apply in the same way as in statically-typed languages. However, when using polymorphism (like multi-methods), it's essential to ensure that all implementations are substitutable."
  - title: SOLID / Interface Segregation Principle (ISP)
    code: "Clojure doesn't have interfaces or classes in the traditional sense. However, protocols in Clojure can be seen as a way to define interfaces. Using protocols and multi-methods, you can define clear contracts and invert dependencies."
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          ;; Using Higher-Order Functions
          (defn greet [formatter name]
              (formatter name))

          (defn polite-formatter [name]
              (str "Hello, " name "! How are you today?"))

          (defn casual-formatter [name]
              (str "Hey, " name "!"))

          ;; Usage
          (greet polite-formatter "Alice")  ;; "Hello, Alice! How are you today?"
          (greet casual-formatter "Bob")    ;; "Hey, Bob!"
      - title: Bad Example
        code: |
          ;; Not using Higher-Order Functions
          (defn greet-politely [name]
              (str "Hello, " name "! How are you today?"))

          (defn greet-casually [name]
              (str "Hey, " name "!"))

          ;; Usage
          (greet-politely "Alice")  ;; "Hello, Alice! How are you today?"
          (greet-casually "Bob")    ;; "Hey, Bob!"
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          ;; Good example: Single function for repeated logic
          (defn add-tax [price & [rate]]
              (+ price (* price (or rate 0.05))))
      - title: Bad Example
        code: |
          ;; Bad example: Repeated logic
          (defn add-tax-for-food [price]
              (+ price (* price 0.05)))
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          ;; Good example: Simplified approach
          (defn is-even [num]
              (zero? (mod num 2)))
      - title: Bad Example
        code: |
          ;; Bad example: Overcomplicated way to check even numbers
          (defn is-even [num]
              (zero? (mod (if (> num 0) num (- num)) 2)))
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          ;; Good example: Only implement what's needed
          (defprotocol CarActions
              (drive [this]))
      - title: Bad Example
        code: |
          ;; Bad example: Adding unnecessary features
          (defprotocol CarActions
              (drive [this])
              (fly [this]))  ;; Cars don't fly!
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          ;; Good example: Using destructuring to minimize knowledge
          (defn purchase [item-price {:keys [wallet]}]
              (let [money (:money wallet)]
                  (>= money item-price)))
      - title: Bad Example
        code: |
          ;; Bad example: Accessing nested structures directly
          (defn purchase [item-price {:keys [wallet]}]
              (let [{:keys [money]} wallet]
                  (>= money item-price)))
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          ;; Good example: Separating concerns into different namespaces
          (ns user-data)

          (defn fetch-user-data []
              ;; ...
              )

          (ns user-view)

          (defn render-user [user]
              ;; ...
              )
      - title: Bad Example
        code: |
          ;; Bad example: Mixing data retrieval and presentation in one namespace
          (ns user)

          (defn fetch-user-data []
              ;; ...
              )

          (defn render-user [user]
              ;; ...
              )
