---
language: C
code: c
birth: 1972
description: |
  C is a general-purpose programming language known for its low-level memory manipulation and efficient performance. It has a simple and expressive syntax and is widely used in system programming and embedded systems.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Separating concerns into different functions or modules */
          void fetchUserData() {
              // ...
          }

          void renderUserData(UserData data) {
              // ...
          }
      - title: Bad Example
        code: |
          /* Bad example: A function handling both data retrieval and presentation */
          void fetchAndRenderUserData() {
              // ...
          }

  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Using abstraction to allow extension without modification */
          typedef struct {
              float (*computeArea)(void* self);
          } Shape;

          typedef struct {
              Shape shape;
              float radius;
          } Circle;

          float computeCircleArea(void* self) {
              Circle* circle = (Circle*)self;
              return 3.14 * circle->radius * circle->radius;
          }
      - title: Bad Example
        code: |
          /* Bad example: Modifying existing code to add new functionality */
          struct Rectangle {
              float width;
              float height;
          };

          float computeArea(struct Rectangle rect) {
              return rect.width * rect.height;
          }

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Derived structs maintain the behavior of the base struct */
          typedef struct {
              void (*fly)(void* self);
          } FlyingBird;

          typedef struct {
              void (*walk)(void* self);
          } NonFlyingBird;
      - title: Bad Example
        code: |
          /* Bad example: Derived struct changes the behavior of the base struct */
          typedef struct {
              void (*fly)(void* self);
          } Bird;

          void ostrichFly(void* self) {
              // Ostrich can't fly
          }

  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Segregated interfaces */
          typedef struct {
              void (*work)(void* self);
          } Workable;

          typedef struct {
              void (*eat)(void* self);
          } Eatable;
      - title: Bad Example
        code: |
          /* Bad example: A bulky interface */
          typedef struct {
              void (*work)(void* self);
              void (*eat)(void* self);
          } Worker;

  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          /* Good example: Both high-level and low-level modules depend on abstractions */
          typedef struct {
              void (*turnOn)(void* self);
          } Device;

          typedef struct {
              Device* device;
          } Fan;

          typedef struct {
              Device* device;
          } Switch;
      - title: Bad Example
        code: |
          /* Bad example: High-level module depending on a low-level module */
          typedef struct {
              void (*turnOn)(void* self);
          } LightBulb;

          typedef struct {
              LightBulb* bulb;
          } Switch;

  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          /* Good example: Single function for repeated logic */
          int addTax(int price, float rate) {
              return price + (int)(price * rate);
          }
      - title: Bad Example
        code: |
          /* Bad example: Repeated logic */
          int addTaxForFood(int price) {
              return price + (price * 0.05);
          }

  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          /* Good example: Simplified approach */
          int isEven(int num) {
              return num % 2 == 0;
          }
      - title: Bad Example
        code: |
          /* Bad example: Overcomplicated way to check even numbers */
          int isEven(int num) {
              return num % abs(2) == 0;
          }

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          /* Good example: Only implement what's needed */
          typedef struct {
              void (*drive)(void* self);
          } Car;
      - title: Bad Example
        code: |
          /* Bad example: Adding unnecessary features */
          struct Car {
              void (*drive)(void* self);
              void (*fly)(void* self);  // Cars don't fly!
          };

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          /* Good example: Using encapsulation */
          typedef struct {
              float money;
          } Money;

          typedef struct {
              Money money;
          } Wallet;

          typedef struct {
              Wallet wallet;
          } Person;

          float getMoneyAmount(Person* buyer) {
              return buyer->wallet.money;
          }

          bool purchase(void* item, Person* buyer) {
              if (getMoneyAmount(buyer) >= item.price) { /* ... */ }
              return 0;
          }
      - title: Bad Example
        code: |
          /* Bad example: Accessing nested structures directly */
          typedef struct {
              float amount;
          } Money;

          typedef struct {
              Money money;
          } Wallet;

          typedef struct {
              Wallet wallet;
          } Person;

          bool purchase(void* item, Person* buyer) {
              if (buyer->wallet.money.amount >= item.price) { /* ... */ }
              return 0;
          }

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          /* Good example: Separating concerns into different modules */
          typedef struct {
              void (*fetchUserData)(void* self);
          } UserDataService;

          typedef struct {
              void (*calculateAge)(void* self);
          } UserLogic;

          typedef struct {
              void (*render)(void* self);
          } UserComponent;
      - title: Bad Example
        code: |
          /* Bad example: Mixing data retrieval and presentation */
          typedef struct {
              void (*fetchUserData)(void* self);
              void (*render)(void* self);
              void (*calculateAge)(void* self);
          } UserComponent;
