---
language: Julia
code: julia
birth: 2012
parent:
  - c
  - lisp
  - python
  - r
  - ruby
description: Julia is a high-level, high-performance dynamic language for technical computing, with syntax that is familiar to users of other technical computing environments.
principles:
  - title: SOLID / Single Responsibility Principle (SRP)
    examples:
      - title: Good Example
        code: |
          function authenticate_user(user_credentials)
              # authentication logic
          end
      - title: Bad Example
        code: |
          function user(credentials, log_date=false)
              if log_date
                  # logging logic
              else
                  # authentication logic
              end
          end
  - title: SOLID / Open/Closed Principle (OCP)
    examples:
      - title: Good Example
        code: |
          function area_circle(radius)
              π * radius^2
          end
      - title: Bad Example
        code: |
          function area_shape(type, width=0, height=0, radius=0)
              if type == "circle"
                  return π * radius^2
              elseif type == "rectangle"
                  return width * height
              end
          end

  - title: SOLID / Liskov Substitution Principle (LSP)
    examples:
      - title: Good Example
        code: |
          function bird_fly(bird)
              if bird == "sparrow"
                  # Sparrow flying logic
              end
          end
      - title: Bad Example
        code: |
          function bird_fly(bird)
              if bird == "penguin"
                  error("Penguins can't fly!")
              end
          end
  - title: SOLID / Interface Segregation Principle (ISP)
    examples:
      - title: Good Example
        code: |
          function bird_actions(action, bird)
              if action == "fly" && bird == "sparrow"
                  # Sparrow flying logic
              elseif action == "swim" && bird == "penguin"
                  # Penguin swimming logic
              end
          end
      - title: Bad Example
        code: |
          function bird_actions(action, bird)
              if action == "swim" && bird == "sparrow"
                  # Doesn't make sense for a Sparrow
              end
          end
  - title: SOLID / Dependency Inversion Principle (DIP)
    examples:
      - title: Good Example
        code: |
          function save_data(storage_type, data)
              storage_type(data)
          end
          function cloud_storage(data)
              # save data to the cloud
          end
      - title: Bad Example
        code: |
          function save_data(data)
              hard_drive_storage(data)
          end
          function hard_drive_storage(data)
              # save data to the hard drive
          end
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          function greet(name)
              "Hello, $name"
          end
      - title: Bad Example
        code: |
          function greet_user(name)
              "Hello, $name"
          end
          function greet_admin(name)
              "Hello, $name"
          end
  - title: Keep It Simple, Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          function add(a, b)
              a + b
          end
      - title: Bad Example
        code: |
          function add(a, b, debug=false)
              if debug
                  println("Inputs: $a, $b")
              end
              result = a + b
              if debug
                  println("Result: $result")
              end
              return result
          end
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          struct ShoppingCart
              items::Vector{String}
          end
          function add_item(cart::ShoppingCart, item)
              push!(cart.items, item)
          end
      - title: Bad Example
        code: |
          struct ShoppingCart
              items::Vector{String}
              futureFeatures::Dict{String, Any}
          end
          function add_item(cart::ShoppingCart, item)
              push!(cart.items, item)
          end
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          mutable struct Wallet
              balance::Float64
          end
          function deduct_amount(wallet::Wallet, amount)
              wallet.balance -= amount
          end
          function person_pay(wallet::Wallet, amount)
              deduct_amount(wallet, amount)
          end
      - title: Bad Example
        code: |
          mutable struct Wallet
              balance::Float64
          end
          function person_pay_bad(wallet::Wallet, amount)
              wallet.balance -= amount
          end
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          function save_user(user)
              # save user logic
          end
