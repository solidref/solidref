---
principles:
  - title: Single Responsibility
    examples:
      - title: Good Example
        code: |
          class UserDataManager {
              saveUserData() { /* ... */ }
          }

          class UserNotification {
              sendNotification() { /* ... */ }
          }
      - title: Bad Example
        code: |
          class User {
              saveUserData() { /* ... */ }
              sendNotification() { /* ... */ }
          }
  - title: Open-Closed
    examples:
      - title: Good Example
        code: |
          class Shape {
              computeArea(): number { throw new Error('Must be implemented in subclasses'); }
          }

          class Rectangle extends Shape {
              constructor(private width: number, private height: number) {
                  super();
              }

              computeArea(): number {
                  return this.width * this.height;
              }
          }
      - title: Bad Example
        code: |
          class AreaCalculator {
              computeArea(shape: any): number {
                  if (shape instanceof Rectangle) {
                      return shape.width * shape.height;
                  } else if (shape instanceof Circle) {
                      return 3.14 * shape.radius * shape.radius;
                  }
              }
          }
  - title: Liskov Substitution
    examples:
      - title: Good Example
        code: |
          class Bird {
              fly() { /* ... */ }
          }

          class Sparrow extends Bird {
              fly() { /* ... */ }  // Sparrow, being a Bird, can fly
          }
      - title: Bad Example
        code: |
          class Bird {
              fly() { /* ... */ }
          }

          class Ostrich extends Bird {
              fly() {
                  throw new Error("Can't fly");  // Ostrich, being a Bird, should not alter the expected behavior of the fly method
              }
          }
  - title: Interface Segregation
    examples:
      - title: Good Example
        code: |
          class Worker {
              work() { /* ... */ }
          }

          class Feeder {
              eat() { /* ... */ }
          }

          class Human extends Worker {}
          class Robot extends Worker {}

          class Animal extends Feeder {}
      - title: Bad Example
        code: |
          class Worker {
              work() { /* ... */ }
              eat() { /* ... */ }  // This method should not be part of the Worker interface
          }
  - title: Dependency Inversion
    examples:
      - title: Good Example
        code: |
          interface Device {
              turnOn(): void;
          }

          class Switch {
              constructor(private device: Device) {}
              operate() {
                  this.device.turnOn();
              }
          }

          class Fan implements Device {
              turnOn() { /* ... */ }
          }

          const wallSwitch = new Switch(new Fan());
      - title: Bad Example
        code: |
          class LightBulb {
              turnOn() { /* ... */ }
          }

          class Switch {
              constructor() {
                  this.bulb = new LightBulb();
              }
              operate() {
                  this.bulb.turnOn();
              }
          }
