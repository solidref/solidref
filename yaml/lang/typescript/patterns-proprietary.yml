---
patterns:
  - title: Module
    description:
      - variant: subtitle1
        content: |
          The Module Pattern encapsulates "privacy", state, and organization using closures. It's commonly used in the JavaScript community due to its powerful ability to create private and public parts.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          This pattern provides a way to encapsulate private members while exposing a public API. It also helps in organizing code into manageable sections.
    examples:
      - code: |
          namespace Module {
              let privateVar: string = 'I am private...';

              export function publicMethod() {
                  console.log(privateVar);
              }
          }

          Module.publicMethod(); // Outputs: 'I am private...'
  - title: Mixin
    description:
      - variant: subtitle1
        content: |
          JavaScript's object model includes features that allow it to mimic a classical inheritance pattern, known as Mixins. They allow objects to take on properties and methods from other objects.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Mixins help in avoiding the issues related to traditional inheritance and provide a way to add reusable functionalities to objects. They can be used to augment a class by adding multiple behaviors like event handling as mixins.
    examples:
      - code: |
          class Car {
              constructor(public name: string) {}
          }

          interface CarMixin {
              revEngine(): void;
          }

          function applyMixin(targetClass: any, mixin: any) {
              Object.getOwnPropertyNames(mixin.prototype).forEach(name => {
                  targetClass.prototype[name] = mixin.prototype[name];
              });
          }

          class SportsCarMixin implements CarMixin {
              revEngine() {
                  console.log(`The ${this.name} goes vroom vroom!`);
              }
          }

          applyMixin(Car, SportsCarMixin);

          let raceCar = new Car("Ferrari");
          raceCar.revEngine(); // Outputs: The Ferrari goes vroom vroom!
  - title: Publish/Subscribe
    description:
      - variant: subtitle1
        content: |
          This pattern allows you to create modules that can communicate with each other over a single interface without knowing about each other's inner workings. It's a form of decoupling that can be incredibly useful for larger applications.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          The pattern promotes loose coupling and enables better testability, maintainability, and scalability of the application. It's an essential pattern for building complex applications that require various modules to communicate with each other asynchronously.
    examples:
      - code: |
          type Handler<T> = (data: T) => void;

          class PubSub<T> {
              private topics: { [key: string]: Handler<T>[] } = {};

              subscribe(topic: string, handler: Handler<T>): string {
                  if (!this.topics[topic]) {
                      this.topics[topic] = [];
                  }
                  const token = (Math.random() * 1000).toFixed(0);
                  this.topics[topic].push(handler);
                  return token;
              }

              publish(topic: string, data: T): void {
                  const handlers = this.topics[topic];
                  if (handlers) {
                      handlers.forEach(handler => handler(data));
                  }
              }

              unsubscribe(topic: string, token: string): void {
                  const handlers = this.topics[topic];
                  if (handlers) {
                      this.topics[topic] = handlers.filter(h => h.toString() !== token);
                  }
              }
          }

          const pubsub = new PubSub<string>();

          const messageLogger: Handler<string> = (data: string) => {
              console.log(`Logging: ${data}`);
          };

          const subscription = pubsub.subscribe('inbox/newMessage', messageLogger);

          pubsub.publish('inbox/newMessage', 'hello world!');
          pubsub.publish('inbox/newMessage', 'test');
          pubsub.publish('inbox/newMessage', 'another message');

          pubsub.unsubscribe('inbox/newMessage', subscription);
  - title: Promise
    description:
      - variant: subtitle1
        content: |
          With the advent of ES6, Promises are a model for asynchronous programming. Promises are a first-class representation of a value that may be made available in the future.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Promises provide a cleaner, more robust way of handling asynchronous operations compared to callbacks. They simplify error handling, improve readability and make it easier to write asynchronous code.
    examples:
      - code: |
          let promise = new Promise<string>((resolve, reject) => {
              setTimeout(() => {
                  resolve('Hello world!');
              }, 2000);
          });

          promise.then(value => {
              console.log(value); // "Hello world!"
          }).catch(error => {
              console.log(error);
          });
  - title: Type Guards
    description:
      - variant: subtitle1
        content: |
          Type Guards are a TypeScript-specific pattern used to narrow down the type of a variable within a conditional block. They are particularly useful when dealing with union types or custom types.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Type Guards help ensure type safety by allowing developers to make assertions about the type of a variable within specific code blocks, reducing the likelihood of runtime errors.
    examples:
      - code: |
          function isString(value: any): value is string {
              return typeof value === 'string';
          }

          function exampleFunction(value: string | number) {
              if (isString(value)) {
                  // value is now narrowed down to type 'string'
                  console.log(value.toUpperCase());
              } else {
                  // value is now narrowed down to type 'number'
                  console.log(value.toFixed(2));
              }
          }

          exampleFunction("hello"); // Outputs: HELLO
          exampleFunction(3.14159); // Outputs: 3.14

  - title: Conditional Types
    description:
      - variant: subtitle1
        content: |
          Conditional Types are a feature introduced in TypeScript that allow types to be selected based on conditions. They are used to create flexible and reusable type definitions that adapt to different input types.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Conditional Types enable developers to create more dynamic and expressive type definitions, improving code readability and maintainability. They are especially useful in libraries and frameworks where generic types need to handle various scenarios.
    examples:
      - code: |
          type TypeName<T> =
              T extends string ? "string" :
              T extends number ? "number" :
              T extends boolean ? "boolean" :
              "object";

          type StringOrNumber = TypeName<string | number>; // "string" | "number"
          type StringOrBoolean = TypeName<string | boolean>; // "string" | "boolean"

  - title: Mapped Types
    description:
      - variant: subtitle1
        content: |
          Mapped Types are a powerful feature of TypeScript that allow you to transform the properties of an existing type into a new type. They are often used to create new types based on existing ones, with modified or filtered properties.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Mapped Types provide a convenient way to create new types based on existing ones, reducing code duplication and improving type safety. They are particularly useful when working with complex data structures or APIs.
    examples:
      - code: |
          type Optional<T> = {
              [P in keyof T]?: T[P];
          };

          interface Person {
              name: string;
              age: number;
          }

          type PartialPerson = Optional<Person>;

          const partialPerson: PartialPerson = { name: "John" };
  - title: Nullish Coalescing Operator (??)
    description:
      - variant: subtitle1
        content: |
          The Nullish Coalescing Operator (??) is a TypeScript feature that provides a concise way to handle null or undefined values by providing a default value if the variable is null or undefined.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          The Nullish Coalescing Operator simplifies code by reducing the need for verbose null-checking expressions, making it easier to handle potentially null or undefined values in a concise and readable manner.
    examples:
      - code: |
          const name: string | null | undefined = null;
          const displayName = name ?? "Guest";
          console.log(displayName); // Outputs: Guest
  - title: Optional Chaining Operator (?.)
    description:
      - variant: subtitle1
        content: |
          The Optional Chaining Operator (?.) is a TypeScript feature that allows you to access properties or methods of an object without causing an error if the object is null or undefined.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          The Optional Chaining Operator improves code robustness by gracefully handling null or undefined values, reducing the likelihood of runtime errors caused by accessing properties of non-existent objects.
    examples:
      - code: |
          interface User {
              name?: string;
              address?: {
                  city?: string;
                  zipCode?: string;
              };
          }

          const user: User = {};

          const city = user.address?.city; // No error if address or city is null or undefined
          console.log(city); // Outputs: undefined
  - title: Discriminated Unions
    description:
      - variant: subtitle1
        content: |
          Discriminated Unions are a TypeScript pattern used to model complex data structures with multiple possible shapes. They involve creating a union type with a common discriminant property to differentiate between the different shapes.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Discriminated Unions provide a type-safe way to work with complex data structures, ensuring that only valid shapes are allowed and enabling the TypeScript compiler to perform exhaustive type checking.
    examples:
      - code: |
          interface Square {
              kind: "square";
              size: number;
          }

          interface Rectangle {
              kind: "rectangle";
              width: number;
              height: number;
          }

          interface Circle {
              kind: "circle";
              radius: number;
          }

          type Shape = Square | Rectangle | Circle;

          function area(shape: Shape): number {
              switch (shape.kind) {
                  case "square":
                      return shape.size * shape.size;
                  case "rectangle":
                      return shape.width * shape.height;
                  case "circle":
                      return Math.PI * shape.radius ** 2;
              }
          }

          const square: Shape = { kind: "square", size: 5 };
          console.log(area(square)); // Outputs: 25
  - title: Type Assertion
    description:
      - variant: subtitle1
        content: |
          Type Assertion is a TypeScript feature that allows you to assert or override the type of a variable when you know more about its type than TypeScript can infer.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Type Assertion provides a way to tell the TypeScript compiler that you know the type of a variable better than it does, allowing you to access properties or methods that are not part of the inferred type.
    examples:
      - code: |
          let value: any = "hello";
          let length: number = (value as string).length;
          console.log(length); // Outputs: 5
