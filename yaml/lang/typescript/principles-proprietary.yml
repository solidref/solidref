---
principles:
  - title: "Static Typing"
    description:
      - variant: subtitle1
        content: |
          TypeScript provides static typing, allowing variables to be associated with specific types, helping catch type-related errors during development.
      - variant: subtitle1
        content: |
          TypeScript does offer static typing, but it still retains the dynamic typing feature of JavaScript. Variables can be assigned values of different types at runtime.
    examples:
      - code: |
          llet data: number = 42; // data is now a number
          // data = 'hello'; // Error: Type '"hello"' is not assignable to type 'number'
          data = 10; // Valid

  - title: Class-based Object Orientation
    description:
      - variant: subtitle1
        content: |
          TypeScript supports classical inheritance with classes, allowing for more structured and organized code compared to prototype-based inheritance in JavaScript.
    examples:
      - code: |
          class Person {
              constructor(private firstName: string) {}

              sayHello(): string {
                  return `Hello, I'm ${this.firstName}`;
              }
          }

          const john = new Person("John");
          console.log(john.sayHello()); // "Hello, I'm John"

  - title: "First-Class Functions"
    description:
      - variant: subtitle1
        content: |
          In JavaScript, functions are first-class objects. They can be stored in variables, passed as arguments to other functions, returned from those functions, and have their own properties and methods.
      - variant: subtitle1
        content: |
          Functions in TypeScript are still first-class objects, just like in JavaScript. They can be assigned to variables, passed as arguments, returned from other functions, and have properties and methods.
    examples:
      - code: |
          function greet() {
            return "Hello World!";
          }
          let greetMsg = greet; // Assigning function to variable
          console.log(greetMsg()); // "Hello World!"

  - title: Stronger Type System
    description:
      - variant: subtitle1
        content: |
          TypeScript has a stronger type system compared to JavaScript, enabling better code quality and maintainability through type checking.
    examples:
      - code: |
          function add(x: number, y: number): number {
              return x + y;
          }

          let result: number = add(5, 10); // Valid
          // let result: string = add(5, 10); // Error: Type 'number' is not assignable to type 'string'

  - title: Enums
    description:
      - variant: subtitle1
        content: |
          TypeScript provides enums to define a set of named constants, which can improve code readability and maintainability.
    examples:
      - code: |
          enum Color {
              Red,
              Green,
              Blue,
          }

          let color: Color = Color.Red;
          console.log(color); // 0

  - title: Type Inference
    description:
      - variant: subtitle1
        content: |
          TypeScript can infer types based on context, reducing the need for explicit type annotations and making code more concise.
    examples:
      - code: |
          let message = "Hello"; // Type inference infers 'string' type
          // message = 10; // Error: Type 'number' is not assignable to type 'string'

  - title: Asynchronous Programming
    description:
      - variant: subtitle1
        content: |
          With features like callbacks, promises, and async/await, JavaScript handles asynchronous operations. This is especially useful for operations like fetching data from a server without blocking the main thread.
      - variant: subtitle1
        content: |
          TypeScript, being a superset of JavaScript, inherits its asynchronous programming features, including callbacks, promises, and async/await syntax for handling asynchronous operations.
    examples:
      - code: |
          async function fetchData() {
            let response = await fetch('https://api.example.com/data');
            let data = await response.json();
            console.log(data);
          }
          fetchData();

  - title: Closure
    description:
      - variant: subtitle1
        content: |
          Functions in TypeScript form closures just like in JavaScript. A closure is created when a function is defined within another function and has access to the outer function's variables.
    examples:
      - code: |
          function makeAdder(x) {
            return function(y) {
              return x + y;
            };
          }
          let add5 = makeAdder(5);
          console.log(add5(2));  // 7

  - title: Single-Threaded with Non-blocking I/O
    description:
      - variant: subtitle1
        content: |
          TypeScript applications run in a single-threaded environment with an event loop, similar to JavaScript. Asynchronous operations such as setTimeout, fetch, and event handling ensure non-blocking I/O.
    examples:
      - code: |
          console.log('First');
          setTimeout(function() {
            console.log('Second');
          }, 0);
          console.log('Third');
          // Output: First, Third, Second

  - title: Truthy and Falsy Values
    description:
      - variant: subtitle1
        content: |
          TypeScript, like JavaScript, evaluates values as truthy or falsy in conditional statements. Understanding truthy and falsy values is important for flow control in TypeScript code.
    examples:
      - code: |
          if ('') console.log('Falsy!');
          if ('hello') console.log('Truthy!');
          // Output: Truthy!

  - title: Template Literals
    description:
      - variant: subtitle1
        content: |
          JavaScript allows for string interpolation and multi-line strings in a more readable fashion with template literals.
      - variant: subtitle1
        content: |
          TypeScript supports template literals, providing a convenient way to create strings with embedded expressions. This feature enhances readability and maintainability of string formatting.
    examples:
      - code: |
          const name = "world";
          console.log(`Hello, ${name}!`); // Hello, world!

  - title: ES6 and Beyond Compatibility
    description:
      - variant: subtitle1
        content: |
          TypeScript is designed to be compatible with modern ECMAScript features, including ES6 and beyond, providing access to advanced language capabilities while ensuring compatibility with older environments.
    examples:
      - code: |
          class Animal {
              constructor(private name: string) {}

              speak() {
                  console.log(`${this.name} makes a noise.`);
              }
          }

          class Dog extends Animal {
              speak() {
                  console.log(`${this.name} barks.`);
              }
          }

          let dog = new Dog('Rex');
          dog.speak(); // Rex barks.
