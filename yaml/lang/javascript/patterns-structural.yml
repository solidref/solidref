---
patterns:
  - title: Adapter
    examples:
      - code: |
          // Adapter Pattern in JavaScript
          class Target {
              request() {
                  return 'Target: The default target\'s behavior.';
              }
          }

          class Adaptee {
              specificRequest() {
                  return '.eetpadA eht fo roivaheb laicepS';
              }
          }

          class Adapter extends Target {
              constructor(adaptee) {
                  super();
                  this.adaptee = adaptee;
              }

              request() {
                  const result = this.adaptee.specificRequest().split('').reverse().join('');
                  return `Adapter: (TRANSLATED) ${result}`;
              }
          }

          // Client code
          const target = new Target();
          console.log(target.request());

          const adaptee = new Adaptee();
          console.log(`Adaptee: ${adaptee.specificRequest()}`);

          console.log('After using Adapter...');
          const adapter = new Adapter(adaptee);
          console.log(adapter.request());

  - title: Bridge
    examples:
      - code: |
          // Bridge Pattern in JavaScript
          class Abstraction {
              constructor(implementation) {
                  this.implementation = implementation;
              }

              operation() {
                  const result = this.implementation.operationImplementation();
                  return `Abstraction: Base operation with:\n${result}`;
              }
          }

          class ExtendedAbstraction extends Abstraction {
              operation() {
                  const result = this.implementation.operationImplementation();
                  return `ExtendedAbstraction: Extended operation with:\n${result}`;
              }
          }

          class ImplementationA {
              operationImplementation() {
                  return 'ImplementationA: Here\'s the result on the platform A.';
              }
          }

          class ImplementationB {
              operationImplementation() {
                  return 'ImplementationB: Here\'s the result on the platform B.';
              }
          }

          // Client code
          let implementation = new ImplementationA();
          let abstraction = new Abstraction(implementation);
          console.log(abstraction.operation());

          implementation = new ImplementationB();
          abstraction = new ExtendedAbstraction(implementation);
          console.log(abstraction.operation());

  - title: Composite
    examples:
      - code: |
          // Composite Pattern in JavaScript
          class Component {
              constructor(name) {
                  this.name = name;
              }

              add(component) {}

              remove(component) {}

              display(depth) {}
          }

          class Leaf extends Component {
              constructor(name) {
                  super(name);
              }

              display(depth) {
                  console.log('-'.repeat(depth) + this.name);
              }
          }

          class Composite extends Component {
              constructor(name) {
                  super(name);
                  this.children = [];
              }

              add(component) {
                  this.children.push(component);
              }

              remove(component) {
                  const index = this.children.indexOf(component);
                  if (index > -1) {
                      this.children.splice(index, 1);
                  }
              }

              display(depth) {
                  console.log('-'.repeat(depth) + this.name);

                  for (const child of this.children) {
                      child.display(depth + 2);
                  }
              }
          }

          // Client code
          const root = new Composite('root');
          root.add(new Leaf('Leaf A'));
          root.add(new Leaf('Leaf B'));

          const comp = new Composite('Composite X');
          comp.add(new Leaf('Leaf XA'));
          comp.add(new Leaf('Leaf XB'));

          root.add(comp);
          root.add(new Leaf('Leaf C'));

          const leaf = new Leaf('Leaf D');
          root.add(leaf);
          root.remove(leaf);

          root.display(1);

  - title: Decorator
    examples:
      - code: |
          // Decorator Pattern in JavaScript
          class Component {
              operation() {
                  return 'Component';
              }
          }

          class ConcreteComponent extends Component {
              operation() {
                  return `ConcreteComponent`;
              }
          }

          class Decorator extends Component {
              constructor(component) {
                  super();
                  this.component = component;
              }

              operation() {
                  return this.component.operation();
              }
          }

          class ConcreteDecoratorA extends Decorator {
              operation() {
                  return `ConcreteDecoratorA(${super.operation()})`;
              }
          }

          class ConcreteDecoratorB extends Decorator {
              operation() {
                  return `ConcreteDecoratorB(${super.operation()})`;
              }
          }

          // Client code
          let simple = new ConcreteComponent();
          console.log(`Simple component: ${simple.operation()}`);

          let decorator1 = new ConcreteDecoratorA(simple);
          let decorator2 = new ConcreteDecoratorB(decorator1);
          console.log(`Decorated component: ${decorator2.operation()}`);

  - title: Facade
    examples:
      - code: |
          // Facade Pattern in JavaScript
          class Subsystem1 {
              operation1() {
                  return 'Subsystem1: Ready!';
              }

              operationN() {
                  return 'Subsystem1: Go!';
              }
          }

          class Subsystem2 {
              operation1() {
                  return 'Subsystem2: Get ready!';
              }

              operationZ() {
                  return 'Subsystem2: Fire!';
              }
          }

          class Facade {
              constructor(subsystem1, subsystem2) {
                  this.subsystem1 = subsystem1 || new Subsystem1();
                  this.subsystem2 = subsystem2 || new Subsystem2();
              }

              operation() {
                  let result = 'Facade initializes subsystems:\n';
                  result += this.subsystem1.operation1();
                  result += this.subsystem2.operation1();
                  result += 'Facade orders subsystems to perform the action:\n';
                  result += this.subsystem1.operationN();
                  result += this.subsystem2.operationZ();
                  return result;
              }
          }

          // Client code
          const subsystem1 = new Subsystem1();
          const subsystem2 = new Subsystem2();
          const facade = new Facade(subsystem1, subsystem2);
          console.log(facade.operation());

  - title: Flyweight
    examples:
      - code: |
          // Flyweight Pattern in JavaScript
          class Flyweight {
              constructor(sharedState) {
                  this.sharedState = sharedState;
              }

              operation(uniqueState) {
                  const s = JSON.stringify(this.sharedState);
                  const u = JSON.stringify(uniqueState);
                  console.log(`Flyweight: Displaying shared (${s}) and unique (${u}) state.`);
              }
          }

          class FlyweightFactory {
              constructor(initialFlyweights) {
                  this.flyweights = {};
                  for (const state of initialFlyweights) {
                      this.flyweights[this.getKey(state)] = new Flyweight(state);
                  }
              }

              getKey(state) {
                  return state.join('_');
              }

              getFlyweight(sharedState) {
                  const key = this.getKey(sharedState);

                  if (!(key in this.flyweights)) {
                      console.log('FlyweightFactory: Can\'t find a flyweight, creating new one.');
                      this.flyweights[key] = new Flyweight(sharedState);
                  } else {
                      console.log('FlyweightFactory: Reusing existing flyweight.');
                  }

                  return this.flyweights[key];
              }
          }

          // Client code
          const factory = new FlyweightFactory([
              ['Chevrolet', 'Camaro2018', 'pink'],
              ['Mercedes Benz', 'C300', 'black'],
              ['Mercedes Benz', 'C500', 'red'],
          ]);

          factory.getFlyweight(['Chevrolet', 'Camaro2018', 'pink']).operation(['A001', 'Jul 30, 2020']);
          factory.getFlyweight(['Mercedes Benz', 'C300', 'black']).operation(['B002', 'May 18, 2021']);

          console.log('\nAdding new car to pool');
          factory.getFlyweight(['BMW', 'M5', 'red']).operation(['C003', 'Mar 15, 2022']);

  - title: Proxy
    examples:
      - code: |
          // Proxy Pattern in JavaScript
          class Subject {
              request() {
                  return 'Subject: Handling request.';
              }
          }

          class RealSubject extends Subject {
              request() {
                  return 'RealSubject: Handling request.';
              }
          }

          class Proxy extends Subject {
              constructor(realSubject) {
                  super();
                  this.realSubject = realSubject;
              }

              request() {
                  if (this.checkAccess()) {
                      this.realSubject.request();
                      this.logAccess();
                      return 'Proxy: Logged and handing over to RealSubject.';
                  }
                  return 'Proxy: I am sorry, but I cannot let you through.';
              }

              checkAccess() {
                  // Some real checks should go here.
                  console.log('Proxy: Checking access prior to firing a real request.');
                  return true;
              }

              logAccess() {
                  console.log('Proxy: Logging the time of request.');
              }
          }

          // Client code
          const realSubject = new RealSubject();
          console.log(realSubject.request());

          const proxy = new Proxy(realSubject);
          console.log(proxy.request());
