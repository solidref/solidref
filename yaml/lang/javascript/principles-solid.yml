---
principles:
  - title: Single Responsibility
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using ES6 classes to split responsibilities
          class UserDataManager {
              saveUserData() { /* ... */ }
          }

          class UserNotification {
              sendNotification() { /* ... */ }
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Splitting responsibilities using function constructors
          function UserDataManager() {
              this.saveUserData = function() { /* ... */ };
          }

          function UserNotification() {
              this.sendNotification = function() { /* ... */ };
          }
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): A single ES6 class handling both user data and notifications
          class User {
              saveUserData() { /* ... */ }
              sendNotification() { /* ... */ }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): A single function constructor handling both user data and notifications
          function User() {
              this.saveUserData = function() { /* ... */ };
              this.sendNotification = function() { /* ... */ };
          }
  - title: Open-Closed
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using ES6 classes and inheritance for the Open/Closed principle
          class Shape {
              computeArea() { throw new Error('Must be implemented in subclasses'); }
          }

          class Rectangle extends Shape {
              constructor(width, height) {
                  super();
                  this.width = width;
                  this.height = height;
              }

              computeArea() {
                  return this.width * this.height;
              }
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Using prototype to allow extension without modification
          function Shape() {}
          Shape.prototype.computeArea = function() { throw new Error('Must be implemented in subclasses'); };

          function Rectangle(width, height) {
              this.width = width;
              this.height = height;
          }
          Rectangle.prototype = Object.create(Shape.prototype);
          Rectangle.prototype.computeArea = function() {
              return this.width * this.height;
          };
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Modifying existing ES6 class methods to add new functionality
          class AreaCalculator {
              computeArea(shape) {
                  if (shape instanceof Rectangle) {
                      return shape.width * shape.height;
                  } else if (shape instanceof Circle) {
                      return 3.14 * shape.radius * shape.radius;
                  }
              }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Modifying existing code to add new functionality
          function AreaCalculator(shape) {
              if (shape.type === 'rectangle') {
                  return shape.width * shape.height;
              } else if (shape.type === 'circle') {
                  return 3.14 * shape.radius * shape.radius;
              }
          }
  - title: Liskov Substitution
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using ES6 classes to ensure derived classes maintain the behavior of the base class
          class Bird {
              fly() { /* ... */ }
          }

          class Sparrow extends Bird {
              fly() { /* ... */ }  // Sparrow, being a Bird, can fly
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Using function constructors and prototype inheritance
          function Bird() {}
          Bird.prototype.fly = function() { /* ... */ };

          function Sparrow() {}
          Sparrow.prototype = Object.create(Bird.prototype);
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Using ES6 classes where the derived class changes the behavior of the base class
          class Bird {
              fly() { /* ... */ }
          }

          class Ostrich extends Bird {
              fly() {
                  throw new Error("Can't fly");  // Ostrich, being a Bird, should not alter the expected behavior of the fly method
              }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Using function constructors where the derived class alters the base class behavior
          function Bird() {}
          Bird.prototype.fly = function() { /* ... */ };

          function Ostrich() {}
          Ostrich.prototype = Object.create(Bird.prototype);
          Ostrich.prototype.fly = function() {
              throw new Error("Can't fly");
          }
  - title: Interface Segregation
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using ES6 classes to provide specific interfaces
          class Worker {
              work() { /* ... */ }
          }

          class Feeder {
              eat() { /* ... */ }
          }

          class Human extends Worker {}
          class Robot extends Worker {}

          class Animal extends Feeder {}
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Using function constructors to segregate interfaces
          function Worker() {}
          Worker.prototype.work = function() { /* ... */ };

          function Feeder() {}
          Feeder.prototype.eat = function() { /* ... */ };

          function Human() {}
          Human.prototype = Object.create(Worker.prototype);

          function Robot() {}
          Robot.prototype = Object.create(Worker.prototype);

          function Animal() {}
          Animal.prototype = Object.create(Feeder.prototype);
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Using a single ES6 class that does not segregate interfaces
          class Worker {
              work() { /* ... */ }
              eat() { /* ... */ }  // This method should not be part of the Worker interface
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Using a single function constructor that does not segregate interfaces
          function Worker() {}
          Worker.prototype.work = function() { /* ... */ };
          Worker.prototype.eat = function() { /* ... */ };  // This method should not be part of the Worker interface
  - title: Dependency Inversion
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using ES6 classes with both high-level and low-level modules depending on abstractions
          class Switch {
              constructor(device) {
                  this.device = device;
              }
              operate() {
                  this.device.turnOn();
              }
          }

          class Fan {
              turnOn() { /* ... */ }
          }

          const wallSwitch = new Switch(new Fan());
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Using function constructors and prototype inheritance for dependency inversion
          function Switch(device) {
              this.device = device;
          }
          Switch.prototype.operate = function() {
              this.device.turnOn();
          };

          function Fan() {}
          Fan.prototype.turnOn = function() { /* ... */ };

          const wallSwitch = new Switch(new Fan());
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Using ES6 classes where the high-level module depends directly on a low-level module
          class LightBulb {
              turnOn() { /* ... */ }
          }

          class Switch {
              constructor() {
                  this.bulb = new LightBulb();
              }
              operate() {
                  this.bulb.turnOn();
              }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Using function constructors where the high-level module has a direct dependency on the low-level module
          function LightBulb() {}
          LightBulb.prototype.turnOn = function() { /* ... */ };

          function Switch() {
              this.bulb = new LightBulb();
          }
          Switch.prototype.operate = function() {
              this.bulb.turnOn();
          };
