---
principles:
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using default parameters and arrow functions for repeated logic
          const addTax = (price, rate = 0.05) => price + (price * rate);
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Reusing a single function to avoid duplicated logic
          function addTax(price, rate) {
              rate = rate || 0.05;
              return price + (price * rate);
          }
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Repeated logic in separate arrow functions
          const addTaxForFood = (price) => price + (price * 0.05);
          const addTaxForElectronics = (price) => price + (price * 0.05);
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Repeated logic in separate functions
          function addTaxForFood(price) {
              return price + (price * 0.05);
          }

          function addTaxForElectronics(price) {
              return price + (price * 0.05);
          }
  - title: Keep It Simple Stupid (KISS)
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Simplified approach using arrow function
          const isEven = num => num % 2 === 0;
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Straightforward function to check even numbers
          function isEven(num) {
              return num % 2 === 0;
          }
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Overcomplicated check using arrow function
          const isEven = num => num % Math.abs(2) === 0;
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Overcomplicated way to check even numbers
          function isEven(num) {
              return num % Math.abs(2) === 0;
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Implementing only the needed methods using classes
          class Car {
              drive() { /* ... */ }
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Implementing only the needed methods using function constructor
          function Car() {}
          Car.prototype.drive = function() { /* ... */ };
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Adding unnecessary features using classes
          class Car {
              drive() { /* ... */ }
              fly() { /* ... */ }  // Cars don't fly!
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Adding unnecessary features using function constructor
          function Car() {}
          Car.prototype.drive = function() { /* ... */ };
          Car.prototype.fly = function() { /* ... */ };  // Cars don't fly!
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Using classes for encapsulation
          class Wallet {
              constructor() {
                  this._money = 100;
              }
              getAmount() {
                  return this._money;
              }
          }

          class Person {
              constructor() {
                  this.wallet = new Wallet();
              }
              getMoneyAmount() {
                  return this.wallet.getAmount();
              }
          }

          function purchase(item, buyer) {
              if (buyer.getMoneyAmount() >= item.price) { /* ... */ }
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Using function constructors for encapsulation
          function Wallet() {
              this._money = 100;
          }
          Wallet.prototype.getAmount = function() {
              return this._money;
          }

          function Person() {
              this.wallet = new Wallet();
          }
          Person.prototype.getMoneyAmount = function() {
              return this.wallet.getAmount();
          }

          function purchase(item, buyer) {
              if (buyer.getMoneyAmount() >= item.price) { /* ... */ }
          }
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Accessing nested structures directly using classes
          class Wallet {
              constructor() {
                  this.money = { amount: 100 };
              }
          }

          class Person {
              constructor() {
                  this.wallet = new Wallet();
              }
          }

          function purchase(item, buyer) {
              if (buyer.wallet.money.amount >= item.price) { /* ... */ }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Accessing nested structures directly using function constructors
          function Wallet() {
              this.money = { amount: 100 };
          }

          function Person() {
              this.wallet = new Wallet();
          }

          function purchase(item, buyer) {
              if (buyer.wallet.money.amount >= item.price) { /* ... */ }
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example (ES6)
        code: |
          // Good example (ES6): Separating concerns into different classes
          class UserDataService {
              fetchUserData() { /* ... */ }
          }

          class UserLogic {
              calculateAge() { /* ... */ }
          }

          class UserComponent {
              render() { /* ... */ }
          }
      - title: Good Example (ES5)
        code: |
          // Good example (ES5): Separating concerns into different function constructors
          function UserDataService() {}
          UserDataService.prototype.fetchUserData = function() { /* ... */ }

          function UserLogic() {}
          UserLogic.prototype.calculateAge = function() { /* ... */ }

          function UserComponent() {}
          UserComponent.prototype.render = function() { /* ... */ }
      - title: Bad Example (ES6)
        code: |
          // Bad example (ES6): Mixing data retrieval, logic, and presentation in one class
          class UserComponent {
              fetchUserData() { /* ... */ }
              render() { /* ... */ }
              calculateAge() { /* ... */ }
          }
      - title: Bad Example (ES5)
        code: |
          // Bad example (ES5): Mixing data retrieval, logic, and presentation in one function constructor
          function UserComponent() {}
          UserComponent.prototype.fetchUserData = function() { /* ... */ }
          UserComponent.prototype.render = function() { /* ... */ }
          UserComponent.prototype.calculateAge = function() { /* ... */ }
