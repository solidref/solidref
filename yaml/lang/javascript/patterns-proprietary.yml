---
patterns:
  - title: Module
    description:
      - variant: subtitle1
        content: |
          The Module Pattern encapsulates "privacy", state, and organization using closures. It's commonly used in the JavaScript community due to its powerful ability to create private and public parts.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          This pattern provides a way to encapsulate private members while exposing a public API. It also helps in organizing code into manageable sections.
    examples:
      - code: |
          const Module = (function() {
              let privateVar = 'I am private...';
              return {
                  publicMethod: function() {
                      console.log(privateVar);
                  }
              };
          })();
          Module.publicMethod(); // Outputs: 'I am private...'
  - title: Revealing Module
    description:
      - variant: subtitle1
        content: |
          A variant of the Module pattern, the Revealing Module Pattern explicitly reveals public pointers to methods inside the module's scope.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          This pattern makes the syntax more consistent and makes it clear at the end of the module which of its members are public.
    examples:
      - code: |
          const RevealingModule = (function() {
              let privateVar = 'I am private...';
              function privateFunction() {
                  console.log(privateVar);
              }
              return {
                  publicMethod: function() {
                      privateFunction();
                  }
              };
          })();
          RevealingModule.publicMethod(); // Outputs: 'I am private...'
  - title: Mixin
    description:
      - variant: subtitle1
        content: |
          JavaScript's object model includes features that allow it to mimic a classical inheritance pattern, known as Mixins. They allow objects to take on properties and methods from other objects.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Mixins help in avoiding the issues related to traditional inheritance and provide a way to add reusable functionalities to objects. They can be used to augment a class by adding multiple behaviors like event handling as mixins.
    examples:
      - code: |
          let CarMixin = {
              revEngine() {
                  console.log(`The ${this.name} goes vroom vroom!`);
              }
          };
          function Car(name) {
              this.name = name;
          }
          Object.assign(Car.prototype, CarMixin);
          let raceCar = new Car("Ferrari");
          raceCar.revEngine();  // Outputs: The Ferrari goes vroom vroom!
  - title: Publish/Subscribe
    description:
      - variant: subtitle1
        content: |
          This pattern allows you to create modules that can communicate with each other over a single interface without knowing about each other's inner workings. It's a form of decoupling that can be incredibly useful for larger applications.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          The pattern promotes loose coupling and enables better testability, maintainability, and scalability of the application. It's an essential pattern for building complex applications that require various modules to communicate with each other asynchronously.
    examples:
      - code: |
          var pubsub = {};
          (function(q) {
              var topics = {}, subUid = -1;
              q.publish = function(topic, args) {
                  if (!topics[topic]) {
                      return false;
                  }
                  var subscribers = topics[topic],
                      len = subscribers ? subscribers.length : 0;
                  while (len--) {
                      subscribers[len].func(topic, args);
                  }
                  return this;
              };
              q.subscribe = function(topic, func) {
                  if (!topics[topic]) {
                      topics[topic] = [];
                  }
                  var token = (++subUid).toString();
                  topics[topic].push({
                      token: token,
                      func: func
                  });
                  return token;
              };
              q.unsubscribe = function(token) {
                  for (var m in topics) {
                      if (topics[m]) {
                          for (var i = 0, j = topics[m].length; i < j; i++) {
                              if (topics[m][i].token === token) {
                                  topics[m].splice(i, 1);
                                  return token;
                              }
                          }
                      }
                  }
                  return this;
              };
          }(pubsub));
          var messageLogger = function(topics, data) {
              console.log(`Logging: ${topics}: ${data}`);
          };
          var subscription = pubsub.subscribe('inbox/newMessage', messageLogger);
          pubsub.publish('inbox/newMessage', 'hello world!');
          pubsub.publish('inbox/newMessage', ['test', 'a', 'b', 'c']);
          pubsub.publish('inbox/newMessage', [{
              sender: 'hello@google.com',
              body: 'Hey again!'
          }]);
          pubsub.unsubscribe(subscription);
  - title: Promise
    description:
      - variant: subtitle1
        content: |
          With the advent of ES6, Promises are a model for asynchronous programming. Promises are a first-class representation of a value that may be made available in the future.
      - variant: h6
        content: Benefits
      - variant: subtitle1
        content: |
          Promises provide a cleaner, more robust way of handling asynchronous operations compared to callbacks. They simplify error handling, improve readability and make it easier to write asynchronous code.
    examples:
      - code: |
          let promise = new Promise(function(resolve, reject) {
              setTimeout(function() {
                  resolve('Hello world!');
              }, 2000);
          });
          promise.then(function(value) {
              console.log(value); // "Hello world!"
          }).catch(function(error) {
              console.log(error);
          });
