principles:
  - title: "Static Typing"
    description:
      - variant: subtitle1
        content: |
          Go is a statically typed language, meaning variables are explicitly typed, and their types are checked at compile time. This helps catch type-related errors early in the development process.
    examples:
      - title: "Static Typing Example"
        code: |
          var data int = 42 // data is explicitly typed as an integer
          // data = 'hello' // This would result in a compile-time error

  - title: "Structs Instead of Classes"
    description:
      - variant: subtitle1
        content: |
          Go uses structs instead of classes for structuring code. Methods can be associated with structs to provide behavior.
    examples:
      - title: "Structs and Methods Example"
        code: |
          type Person struct {
              FirstName string
          }

          func (p Person) SayHello() string {
              return "Hello, I'm " + p.FirstName
          }

          var john = Person{"John"}
          fmt.Println(john.SayHello()) // "Hello, I'm John"

  - title: "Interfaces for Polymorphism"
    description:
      - variant: subtitle1
        content: |
          Go uses interfaces to achieve polymorphism. An interface type is defined by a set of method signatures, and any type that implements those methods satisfies the interface.
    examples:
      - title: "Interfaces Example"
        code: |
          type Greeter interface {
              Greet() string
          }

          type EnglishSpeaker struct{}

          func (EnglishSpeaker) Greet() string {
              return "Hello!"
          }

          type SpanishSpeaker struct{}

          func (SpanishSpeaker) Greet() string {
              return "Â¡Hola!"
          }

  - title: "Concurrency with Goroutines and Channels"
    description:
      - variant: subtitle1
        content: |
          Go provides built-in support for concurrency with goroutines and channels. Goroutines are functions that can run concurrently, and channels are used for communication between them.
    examples:
      - title: "Concurrency Example"
        code: |
          func say(s string) {
              for i := 0; i < 5; i++ {
                  fmt.Println(s)
              }
          }

          func main() {
              go say("world")
              say("hello")
          }

  - title: "Error Handling"
    description:
      - variant: subtitle1
        content: |
          Go handles errors explicitly using error values, rather than exceptions. Functions often return an error value, and calling code checks this error before proceeding.
    examples:
      - title: "Error Handling Example"
        code: |
          func divide(a, b float64) (float64, error) {
              if b == 0.0 {
                  return 0.0, errors.New("division by zero")
              }
              return a / b, nil
          }

  - title: "Package System"
    description:
      - variant: subtitle1
        content: |
          Go's package system organizes code into reusable components. Each package serves as a namespace for its identifiers and can be imported by other packages.
    examples:
      - title: "Package Example"
        code: |
          package main

          import (
              "fmt"
              "math"
          )

          func main() {
              fmt.Println(math.Sqrt(16))
          }

  - title: "Composition over Inheritance"
    description:
      - variant: subtitle1
        content: |
          Go favors composition over inheritance, allowing types to be composed using smaller pieces of functionality.
    examples:
      - title: "Composition Example"
        code: |
          type Engine interface {
              Start()
              Stop()
          }

          type Car struct {
              Engine
          }

  - title: "Type Assertions and Type Switches"
    description:
      - variant: subtitle1
        content: |
          Go allows for type assertions and type switches to handle dynamic types safely at runtime, particularly when working with interfaces.
    examples:
      - title: "Type Assertion Example"
        code: |
          var i interface{} = "hello"
          s := i.(string)
          fmt.Println(s)

  - title: "Deferred Function Calls"
    description:
      - variant: subtitle1
        content: |
          Go allows functions to be deferred until the surrounding function completes. This is often used for cleanup activities.
    examples:
      - title: "Deferred Calls Example"
        code: |
          func main() {
              defer fmt.Println("world")
              fmt.Println("hello")
          }

  - title: "Go Routines and Select Statement"
    description:
      - variant: subtitle1
        content: |
          Go's select statement lets a goroutine wait on multiple communication operations, facilitating complex concurrency patterns.
    examples:
      - title: "Select Statement Example"
        code: |
          select {
          case msg1 := <-channel1:
              fmt.Println("Received", msg1)
          case msg2 := <-channel2:
              fmt.Println("Received", msg2)
          }
