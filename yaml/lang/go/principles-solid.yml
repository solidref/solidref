---
principles:
  - abbr: SRP
    examples:
      - title: Good Example
        code: |
          // Good example: Splitting responsibilities into separate functions
          func SaveUserData(userData UserData) {
              // ...
          }

          func SendNotification(notification Notification) {
              // ...
          }
      - title: Bad Example
        code: |
          // Bad example: A function handling both user data management and user notifications
          func SaveUserData(userData UserData) {
              // ...
          }
  - abbr: OCP
    examples:
      - title: Good Example
        code: |
          // Good example: Using interfaces to allow extension without modification
          type Shape interface {
              CalculateArea() float64
          }

          func CalculateArea(shape Shape) float64 {
              return shape.CalculateArea()
          }

          type Rectangle struct {
              Width  float64
              Height float64
          }

          func (r Rectangle) CalculateArea() float64 {
              return r.Width * r.Height
          }

          type Circle struct {
              Radius float64
          }

          func (c Circle) CalculateArea() float64 {
              return 3.14 * c.Radius * c.Radius
          }
      - title: Bad Example
        code: |
          // Bad example: Modifying existing code to add new functionality
          func CalculateArea(shape Shape) float64 {
              switch shape.(type) {
              case Rectangle:
                  rect := shape.(Rectangle)
                  return rect.Width * rect.Height
              case Circle:
                  circle := shape.(Circle)
                  return 3.14 * circle.Radius * circle.Radius
              }
              return 0.0
          }
  - abbr: LSP
    examples:
        - title: Good Example
          code: |
            // Good example: Derived types maintain the behavior of the base type
            type FlyingBird interface {
                Fly()
            }

            type NonFlyingBird interface {
                Walk()
            }
        - title: Bad Example
          code: |
            // Bad example: Derived type changes the behavior of the base type
            type Ostrich struct{}

            func (o Ostrich) Fly() {
                panic("Ostrich can't fly")
            }
  - abbr: ISP
    examples:
      - title: Good Example
        code: |
          // Good example: Breaking down the interface into more specific ones
          type Workable interface {
              Work()
          }

          type Eatable interface {
              Eat()
          }
      - title: Bad Example
        code: |
          // Bad example: A bulky interface
          type Worker interface {
              Work()
              Eat()
          }
  - abbr: DIP
    examples:
      - title: Good Example
        code: |
          // Good example: Both high-level and low-level modules depend on abstractions
          type Device interface {
              TurnOn()
          }

          type Fan struct{}

          func (f Fan) TurnOn() {
              // ...
          }

          type SmartSwitch struct {
              Device Device
          }

          func (ss SmartSwitch) Operate() {
              ss.Device.TurnOn()
          }
      - title: Bad Example
        code: |
          // Bad example: High-level module depending on a low-level module
          type LightBulb struct{}

          func (lb LightBulb) TurnOn() {
              // ...
          }

          type Switch struct {
              Bulb LightBulb
          }

          func (s Switch) Operate() {
              s.Bulb.TurnOn()
          }
