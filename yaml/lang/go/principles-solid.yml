principles:
  - title: Single Responsibility
    examples:
      - title: Good Example (Go)
        code: |
          package main

          type UserDataManager struct{}

          func (udm *UserDataManager) SaveUserData() {
              // save user data
          }

          type UserNotification struct{}

          func (un *UserNotification) SendNotification() {
              // send notification
          }
      - title: Bad Example (Go)
        code: |
          package main

          type User struct{}

          func (u *User) SaveUserData() {
              // save user data
          }

          func (u *User) SendNotification() {
              // send notification
          }

  - title: Open-Closed
    examples:
      - title: Good Example (Go)
        code: |
          package main

          type Shape interface {
              ComputeArea() float64
          }

          type Rectangle struct {
              Width, Height float64
          }

          func (r Rectangle) ComputeArea() float64 {
              return r.Width * r.Height
          }

          type Circle struct {
              Radius float64
          }

          func (c Circle) ComputeArea() float64 {
              return 3.14 * c.Radius * c.Radius
          }
      - title: Bad Example (Go)
        code: |
          package main

          type AreaCalculator struct{}

          func (ac *AreaCalculator) ComputeArea(shape interface{}) float64 {
              // type assertion to determine shape and compute area
              // violates open-closed principle
          }

  - title: Liskov Substitution
    examples:
      - title: Good Example (Go)
        code: |
          package main

          type Bird interface {
              Fly()
          }

          type Sparrow struct{}

          func (s *Sparrow) Fly() {
              // implementation for sparrow flying
          }

          type Ostrich struct{}

          func (o *Ostrich) Walk() {
              // ostrich can't fly, so we don't implement Fly()
          }
      - title: Bad Example (Go)
        code: |
          package main

          type Bird struct{}

          func (b *Bird) Fly() {
              // assumed all birds can fly
          }

          // Ostrich inherits from Bird but can't fly, violating LSP

  - title: Interface Segregation
    examples:
      - title: Good Example (Go)
        code: |
          package main

          type Worker interface {
              Work()
          }

          type Eater interface {
              Eat()
          }

          type Human struct{}

          func (h Human) Work() {
              // human working
          }

          func (h Human) Eat() {
              // human eating
          }

          type Robot struct{}

          func (r Robot) Work() {
              // robot working
          }

          // Robot does not implement Eater, adhering to ISP

      - title: Bad Example (Go)
        code: |
          package main

          type Worker struct{}

          func (w *Worker) Work() {
              // work implementation
          }

          func (w *Worker) Eat() {
              // not all workers eat, violating ISP

  - title: Dependency Inversion
    examples:
      - title: Good Example (Go)
        code: |
          package main

          type Switchable interface {
              TurnOn()
          }

          type Switch struct {
              Device Switchable
          }

          func (s *Switch) Operate() {
              s.Device.TurnOn()
          }

          type LightBulb struct{}

          func (lb *LightBulb) TurnOn() {
              // light bulb turning on
          }

      - title: Bad Example (Go)
        code: |
          package main

          type LightBulb struct{}

          func (lb *LightBulb) TurnOn() {
              // light bulb turning on
          }

          type Switch struct {
              Bulb LightBulb
          }

          func (s *Switch) Operate() {
              s.Bulb.TurnOn()
          }
