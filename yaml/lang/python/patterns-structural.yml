---
patterns:
  - title: Adapter
    examples:
      - code: |
          class Target:
              def request(self) -> str:
                  return "Target: The default target's behavior."

          class Adaptee:
              def specific_request(self) -> str:
                  return ".eetpadA eht fo roivaheb laicepS"

          class Adapter(Target):
              def __init__(self, adaptee: Adaptee):
                  self.adaptee = adaptee

              def request(self) -> str:
                  result = self.adaptee.specific_request()[::-1]
                  return f"Adapter: (TRANSLATED) {result}"

          # Client code
          target = Target()
          print(target.request())

          adaptee = Adaptee()
          print(f"Adaptee: {adaptee.specific_request()}")

          print('After using Adapter...')
          adapter = Adapter(adaptee)
          print(adapter.request())


  - title: Bridge
    examples:
      - code: |
          class Implementation:
              def operation_implementation(self) -> str:
                  pass

          class Abstraction:
              def __init__(self, implementation: Implementation):
                  self.implementation = implementation

              def operation(self) -> str:
                  result = self.implementation.operation_implementation()
                  return f"Abstraction: Base operation with:\n{result}"

          class ExtendedAbstraction(Abstraction):
              def operation(self) -> str:
                  result = self.implementation.operation_implementation()
                  return f"ExtendedAbstraction: Extended operation with:\n{result}"

          class ImplementationA(Implementation):
              def operation_implementation(self) -> str:
                  return "ImplementationA: Here's the result on the platform A."

          class ImplementationB(Implementation):
              def operation_implementation(self) -> str:
                  return "ImplementationB: Here's the result on the platform B."

          # Client code
          implementation = ImplementationA()
          abstraction = Abstraction(implementation)
          print(abstraction.operation())

          implementation = ImplementationB()
          abstraction = ExtendedAbstraction(implementation)
          print(abstraction.operation())

  - title: Composite
    examples:
      - code: |
          class Component:
              def add(self, component) -> None:
                  pass

              def remove(self, component) -> None:
                  pass

              def display(self, depth: int) -> None:
                  pass

          class Leaf(Component):
              def __init__(self, name: str):
                  self.name = name

              def display(self, depth: int) -> None:
                  print("-" * depth + self.name)

          class Composite(Component):
              def __init__(self, name: str):
                  self.name = name
                  self.children = []

              def add(self, component: Component) -> None:
                  self.children.append(component)

              def remove(self, component: Component) -> None:
                  self.children.remove(component)

              def display(self, depth: int) -> None:
                  print("-" * depth + self.name)
                  for child in self.children:
                      child.display(depth + 2)

          # Client code
          root = Composite('root')
          root.add(Leaf('Leaf A'))
          root.add(Leaf('Leaf B'))

          comp = Composite('Composite X')
          comp.add(Leaf('Leaf XA'))
          comp.add(Leaf('Leaf XB'))

          root.add(comp)
          root.add(Leaf('Leaf C'))

          leaf = Leaf('Leaf D')
          root.add(leaf)
          root.remove(leaf)

          root.display(1)

  - title: Decorator
    examples:
      - code: |
          class Component:
              def operation(self) -> str:
                  pass

          class ConcreteComponent(Component):
              def operation(self) -> str:
                  return "ConcreteComponent"

          class Decorator(Component):
              def __init__(self, component: Component):
                  self.component = component

              def operation(self) -> str:
                  return self.component.operation()

          class ConcreteDecoratorA(Decorator):
              def operation(self) -> str:
                  return f"ConcreteDecoratorA({super().operation()})"

          class ConcreteDecoratorB(Decorator):
              def operation(self) -> str:
                  return f"ConcreteDecoratorB({super().operation()})"

          # Client code
          simple = ConcreteComponent()
          print(f"Simple component: {simple.operation()}")

          decorator1 = ConcreteDecoratorA(simple)
          decorator2 = ConcreteDecoratorB(decorator1)
          print(f"Decorated component: {decorator2.operation()}")

  - title: Facade
    examples:
      - code: |
          class Subsystem1:
              def operation1(self) -> str:
                  return 'Subsystem1: Ready!'
              def operationN(self) -> str:
                  return 'Subsystem1: Go!'

          class Subsystem2:
              def operation1(self) -> str:
                  return 'Subsystem2: Get ready!'
              def operationZ(self) -> str:
                  return 'Subsystem2: Fire!'

          class Facade:
              def __init__(self, subsystem1: Subsystem1, subsystem2: Subsystem2):
                  self.subsystem1 = subsystem1 or Subsystem1()
                  self.subsystem2 = subsystem2 or Subsystem2()

              def operation(self) -> str:
                  results = []
                  results.append("Facade initializes subsystems:")
                  results.append(self.subsystem1.operation1())
                  results.append(self.subsystem2.operation1())
                  results.append("Facade orders subsystems to perform the action:")
                  results.append(self.subsystem1.operationN())
                  results.append(self.subsystem2.operationZ())
                  return "\\n".join(results)

          # Client code
          facade = Facade(Subsystem1(), Subsystem2())
          print(facade.operation())

  - title: Flyweight
    examples:
      - code: |
          import json

          class Flyweight:
              def __init__(self, shared_state):
                  self.shared_state = shared_state

              def operation(self, unique_state):
                  s = json.dumps(self.shared_state)
                  u = json.dumps(unique_state)
                  print(f"Flyweight: Displaying shared ({s}) and unique ({u}) state.")

          class FlyweightFactory:
              _flyweights = {}

              def __init__(self, initial_flyweights):
                  for state in initial_flyweights:
                      self._flyweights[self.get_key(state)] = Flyweight(state)

              def get_key(self, state):
                  return "_".join(sorted(state))

              def get_flyweight(self, shared_state):
                  key = self.get_key(shared_state)
                  if not key in self._flyweights:
                      print("FlyweightFactory: Can't find a flyweight, creating new one.")
                      self._flyweights[key] = Flyweight(shared_state)
                  else:
                      print("FlyweightFactory: Reusing existing flyweight.")
                  return self._flyweights[key]

              def list_flyweights(self):
                  count = len(self._flyweights)
                  print(f"FlyweightFactory: I have {count} flyweights:")
                  print("\\n".join(map(str, self._flyweights.keys())))

          # Client code
          factory = FlyweightFactory([
              ["Chevrolet", "Camaro2018", "pink"],
              ["Mercedes Benz", "C300", "black"],
              ["Mercedes Benz", "C500", "red"],
              ["BMW", "M5", "red"],
              ["BMW", "X6", "white"],
          ])
          factory.list_flyweights()

          def add_car_to_police_database(factory, plates, owner, brand, model, color):
              print("\\nAdding car to database")
              flyweight = factory.get_flyweight([brand, model, color])
              flyweight.operation([plates, owner])

          add_car_to_police_database(factory, "CL234IR", "James Doe", "BMW", "M5", "red")
          add_car_to_police_database(factory, "ZM456IN", "John Smith", "BMW", "X1", "white")

          factory.list_flyweights()

  - title: Proxy
    examples:
      - code: |
          class Subject:
              def request(self) -> str:
                  pass

          class RealSubject(Subject):
              def request(self) -> str:
                  return "RealSubject: Handling request."

          class Proxy(Subject):
              def __init__(self, real_subject: RealSubject):
                  self.real_subject = real_subject

              def request(self) -> str:
                  if self.check_access():
                      self.real_subject.request()
                      self.log_access()
                      return "Proxy: Logged and handing over to RealSubject."
                  else:
                      return "Proxy: I am sorry, but I cannot let you through."

              def check_access(self) -> bool:
                  print("Proxy: Checking access prior to firing a real request.")
                  # Some real checks should go here.
                  return True

              def log_access(self) -> None:
                  print("Proxy: Logging the time of request.")

          # Client code
          real_subject = RealSubject()
          print(real_subject.request())

          print('After using Proxy...')
          proxy = Proxy(real_subject)
          print(proxy.request())
