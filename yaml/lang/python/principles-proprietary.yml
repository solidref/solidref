---
principles:
  - title: Zen of Python (PEP 20)
    description:
      - variant: subtitle1
        content: |
          The Zen of Python, as per PEP 20, is a collection of 19 aphorisms that capture the philosophy of Python. It emphasizes simplicity, readability, and the importance of writing code that is "Pythonic."
    examples:
      - code: |
          import this

  - title: Explicit is better than implicit
    description:
      - variant: subtitle1
        content: |
          This principle from the Zen of Python encourages developers to write code that is clear and understandable over code that is overly clever or hard to read. It promotes transparency and maintainability.
    examples:
      - title: Good Example
        code: |
          list_of_numbers = [1, 2, 3]
          length = len(list_of_numbers)  # Explicitly get the length
      - title: Less Clear Example
        code: |
          list_of_numbers = [1, 2, 3]
          length = sum(1 for _ in list_of_numbers)  # Implicitly calculate length

  - title: Simple is better than complex
    description:
      - variant: subtitle1
        content: |
          This principle advises that simplicity in your codebase should be preferred over complex solutions, which aligns with Python's philosophy of readability and maintainability.
    examples:
      - title: Good Example
        code: |
          def greet(name):
              return f"Hello, {name}!"
      - title: Overly Complex Example
        code: |
          def greet(name):
              return ''.join(['Hello, ', name, '!'])

  - title: Readability Counts
    description:
      - variant: subtitle1
        content: |
          A core principle where the readability of code is emphasized, reflecting Python's commitment to making code understandable and maintainable by humans.
    examples:
      - title: Good Example
        code: |
          def calculate_area(base, height):
              return (base * height) / 2
      - title: Less Readable Example
        code: |
          def calculate_area(b, h):
              return (b * h) / 2

  - title: EAFP (Easier to Ask for Forgiveness than Permission)
    description:
      - variant: subtitle1
        content: |
          This principle is about the coding style where operations are performed directly, relying on catching exceptions if an error occurs, rather than checking for conditions in advance.
    examples:
      - title: Good Example
        code: |
          try:
              value = my_dict['key']
          except KeyError:
              handle_error()
      - title: LBYL (Look Before You Leap) - Contrary to EAFP
        code: |
          if 'key' in my_dict:
              value = my_dict['key']
          else:
              handle_error()

  - title: Duck Typing
    description:
      - variant: subtitle1
        content: |
          In Python, the type or class of an object is less important than the methods it defines. If it looks like a duck and quacks like a duck, it can be treated as a duck.
    examples:
      - code: |
          class Duck:
            def quack(self):
                return "Quack, quack!"

          class Person:
            def quack(self):
                return "I'm pretending to be a duck!"

          def make_it_quack(duck):
            print(duck.quack())

          make_it_quack(Duck())  # Quack, quack!
          make_it_quack(Person())  # I'm pretending to be a duck!
