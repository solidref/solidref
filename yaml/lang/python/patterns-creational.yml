---
patterns:
  - title: Factory Method
    examples:
      - code: |
          class Creator:
              def factory_method(self):
                  raise NotImplementedError("Factory method not implemented")

              def some_operation(self):
                  product = self.factory_method()
                  result = f"Creator: The same creator's code has just worked with {product.operation()}"
                  return result

          class ConcreteCreator1(Creator):
              def factory_method(self):
                  return ConcreteProduct1()

          class ConcreteCreator2(Creator):
              def factory_method(self):
                  return ConcreteProduct2()

          class Product:
              def operation(self):
                  pass

          class ConcreteProduct1(Product):
              def operation(self):
                  return "{Result of the ConcreteProduct1}"

          class ConcreteProduct2(Product):
              def operation(self):
                  return "{Result of the ConcreteProduct2}"

          def client_code(creator):
              print("Client: I'm not aware of the creator's class, but it still works.")
              print(creator.some_operation())

          client_code(ConcreteCreator1())
          client_code(ConcreteCreator2())

  - title: Abstract Factory
    examples:
      - code: |
          class AbstractFactory:
              def create_product_a(self):
                  pass

              def create_product_b(self):
                  pass

          class ConcreteFactory1(AbstractFactory):
              def create_product_a(self):
                  return ConcreteProductA1()

              def create_product_b(self):
                  return ConcreteProductB1()

          class ConcreteFactory2(AbstractFactory):
              def create_product_a(self):
                  return ConcreteProductA2()

              def create_product_b(self):
                  return ConcreteProductB2()

          class AbstractProductA:
              def useful_function_a(self):
                  pass

          class ConcreteProductA1(AbstractProductA):
              def useful_function_a(self):
                  return "The result of the product A1."

          class ConcreteProductA2(AbstractProductA):
              def useful_function_a(self):
                  return "The result of the product A2."

          class AbstractProductB:
              def useful_function_b(self):
                  pass

          class ConcreteProductB1(AbstractProductB):
              def useful_function_b(self):
                  return "The result of the product B1."

          class ConcreteProductB2(AbstractProductB):
              def useful_function_b(self):
                  return "The result of the product B2."

          def client_code(factory):
              product_a = factory.create_product_a()
              product_b = factory.create_product_b()

              print(product_b.useful_function_b())
              print(product_b.useful_function_b())

          client_code(ConcreteFactory1())
          client_code(ConcreteFactory2())

  - title: Builder
    examples:
      - code: |
          class Builder:
              def build_part_a(self):
                  pass

              def build_part_b(self):
                  pass

              def build_part_c(self):
                  pass

          class ConcreteBuilder(Builder):
              def __init__(self):
                  self.product = Product()

              def build_part_a(self):
                  self.product.parts.append("PartA")

              def build_part_b(self):
                  self.product.parts.append("PartB")

              def build_part_c(self):
                  self.product.parts.append("PartC")

              def get_result(self):
                  return self.product

          class Product:
              def __init__(self):
                  self.parts = []

              def list_parts(self):
                  print(f"Product parts: {', '.join(self.parts)}")

          builder = ConcreteBuilder()
          builder.build_part_a()
          builder.build_part_b()
          builder.build_part_c()
          product = builder.get_result()
          product.list_parts()

  - title: Prototype
    examples:
      - code: |
          import copy

          class Prototype:
              def clone(self):
                  return copy.deepcopy(self)

          class ConcretePrototype1(Prototype):
              def __init__(self, field):
                  self.field = field

          p1 = ConcretePrototype1("Field value")
          p2 = p1.clone()

          print(p1.field)
          print(p2.field)
          print("Same object?", p1 is p2)
          print("Same value?", p1.field == p2.field)

  - title: Singleton
    examples:
      - code: |
          class SingletonMeta(type):
              _instances = {}

              def __call__(cls, *args, **kwargs):
                  if cls not in cls._instances:
                      cls._instances[cls] = super().__call__(*args, **kwargs)
                  return cls._instances[cls]

          class Singleton(metaclass=SingletonMeta):
              def some_business_logic(self):
                  pass

          s1 = Singleton()
          s2 = Singleton()

          print("Same instance?", s1 is s2)
