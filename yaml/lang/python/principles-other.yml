principles:
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          # Good example: Using default arguments for repeated logic
          def add_tax(price, rate=0.05):
              return price + (price * rate)
      - title: Bad Example
        code: |
          def add_tax_for_food(price):
              return price + (price * 0.05)

          def add_tax_for_electronics(price):
              return price + (price * 0.05)

  - title: Keep It Simple Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          # Simple and straightforward function to check if a number is even
          def is_even(num):
              return num % 2 == 0
      - title: Bad Example
        code: |
          # Overly complicated version of the same functionality
          def is_even(num):
              return num % abs(2) == 0

  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          class Car:
              def drive(self):
                  pass  # Drive functionality
      - title: Bad Example
        code: |
          class Car:
              def drive(self):
                  pass  # Drive functionality

              def fly(self):
                  pass  # Unnecessary functionality for a Car

  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          class Wallet:
              def __init__(self):
                  self._money = 100

              def get_amount(self):
                  return self._money

          class Person:
              def __init__(self):
                  self.wallet = Wallet()

              def get_money_amount(self):
                  return self.wallet.get_amount()

          def purchase(item, buyer):
              if buyer.get_money_amount() >= item['price']:
                  pass  # Purchase logic
      - title: Bad Example
        code: |
          class Wallet:
              def __init__(self):
                  self.money = {'amount': 100}

          class Person:
              def __init__(self):
                  self.wallet = Wallet()

          def purchase(item, buyer):
              if buyer.wallet.money['amount'] >= item['price']:
                  pass  # Purchase logic, violating the Law of Demeter

  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          class UserDataService:
              def fetch_user_data(self):
                  pass  # Data fetching logic

          class UserLogic:
              def calculate_age(self):
                  pass  # Age calculation logic

          class UserComponent:
              def render(self):
                  pass  # Rendering logic
      - title: Bad Example
        code: |
          class UserComponent:
              def fetch_user_data(self):
                  pass  # Combines data fetching

              def render(self):
                  pass  # With rendering

              def calculate_age(self):
                  pass  # And business logic in one class
