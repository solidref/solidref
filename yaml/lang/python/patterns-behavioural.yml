---
patterns:
  - title: Chain Of Responsibility
    examples:
      - code: |
          class Handler:
              def __init__(self, successor=None):
                  self._successor = successor

              def handle(self, request):
                  if self._successor:
                      return self._successor.handle(request)
                  return None

          class ConcreteHandler1(Handler):
              def handle(self, request):
                  if request == "handle1":
                      return "Handled by ConcreteHandler1"
                  return super().handle(request)

          class ConcreteHandler2(Handler):
              def handle(self, request):
                  if request == "handle2":
                      return "Handled by ConcreteHandler2"
                  return super().handle(request)

          handler1 = ConcreteHandler1()
          handler2 = ConcreteHandler2(handler1)

          print(handler2.handle("handle2"))
          print(handler2.handle("handle1"))

  - title: Command
    examples:
      - code: |
          class Command:
              def execute(self):
                  pass

          class Light:
              def turn_on(self):
                  print('Light turned on')

              def turn_off(self):
                  print('Light turned off')

          class TurnOnCommand(Command):
              def __init__(self, light):
                  self.light = light

              def execute(self):
                  self.light.turn_on()

          class TurnOffCommand(Command):
              def __init__(self, light):
                  self.light = light

              def execute(self):
                  self.light.turn_off()

          class RemoteControl:
              def submit(self, command):
                  command.execute()

          light = Light()
          turn_on = TurnOnCommand(light)
          turn_off = TurnOffCommand(light)
          remote = RemoteControl()

          remote.submit(turn_on)
          remote.submit(turn_off)

  - title: Iterator
    examples:
      - code: |
          class Iterator:
              def __init__(self, collection):
                  self._collection = collection
                  self._index = 0

              def next(self):
                  if self._index < len(self._collection):
                      item = self._collection[self._index]
                      self._index += 1
                      return item
                  raise StopIteration

              def has_next(self):
                  return self._index < len(self._collection)

          items = [1, 'two', 3, 'four', 5]
          iterator = Iterator(items)

          while iterator.has_next():
              print(iterator.next())

  - title: Mediator
    examples:
      - code: |
          class Mediator:
              def send(self, message, colleague):
                  pass

          class Colleague:
              def __init__(self):
                  self.mediator = None

              def send(self, message):
                  if self.mediator:
                      self.mediator.send(message, self)

              def receive(self, message):
                  pass

          class ConcreteColleague1(Colleague):
              def receive(self, message):
                  print(f"{self.__class__.__name__} received message: {message}")

          class ConcreteColleague2(Colleague):
              def receive(self, message):
                  print(f"{self.__class__.__name__} received message: {message}")

          class ConcreteMediator(Mediator):
              def __init__(self):
                  self.colleagues = []

              def register(self, colleague):
                  self.colleagues.append(colleague)
                  colleague.mediator = self

              def send(self, message, sender):
                  for colleague in self.colleagues:
                      if colleague is not sender:
                          colleague.receive(message)

          mediator = ConcreteMediator()
          colleague1 = ConcreteColleague1()
          colleague2 = ConcreteColleague2()

          mediator.register(colleague1)
          mediator.register(colleague2)

          colleague1.send("Hello from Colleague 1")
          colleague2.send("Hello from Colleague 2")

  - title: Memento
    examples:
      - code: |
          class Memento:
              def __init__(self, state):
                  self._state = state

              def get_state(self):
                  return self._state

          class Originator:
              def __init__(self):
                  self._state = ""

              def set_state(self, state):
                  self._state = state

              def get_state(self):
                  return self._state

              def save(self):
                  return Memento(self._state)

              def restore(self, memento):
                  self._state = memento.get_state()

          class Caretaker:
              def __init__(self):
                  self._mementos = []

              def add_memento(self, memento):
                  self._mementos.append(memento)

              def get_memento(self, index):
                  return self._mementos[index]

          originator = Originator()
          caretaker = Caretaker()

          originator.set_state('State #1')
          caretaker.add_memento(originator.save())

          originator.set_state('State #2')
          caretaker.add_memento(originator.save())

          originator.restore(caretaker.get_memento(0))
          print(originator.get_state())

  - title: Observer
    examples:
      - code: |
          class Subject:
              def __init__(self):
                  self._observers = []

              def subscribe(self, observer):
                  self._observers.append(observer)

              def unsubscribe(self, observer):
                  self._observers.remove(observer)

              def notify(self, data):
                  for observer in self._observers:
                      observer.update(data)

          class Observer:
              def update(self, data):
                  pass

          class ConcreteObserver(Observer):
              def update(self, data):
                  print(f"Observer received data: {data}")

          subject = Subject()
          observer1 = ConcreteObserver()
          observer2 = ConcreteObserver()

          subject.subscribe(observer1)
          subject.subscribe(observer2)

          subject.notify("Hello Observers!")

          subject.unsubscribe(observer2)
          subject.notify("Goodbye Observers!")

  - title: State
    examples:
      - code: |
          class State:
              def handle(self, context):
                  pass

          class ConcreteStateA(State):
              def handle(self, context):
                  print("Handling state A")
                  context.state = ConcreteStateB()

          class ConcreteStateB(State):
              def handle(self, context):
                  print("Handling state B")
                  context.state = ConcreteStateA()

          class Context:
              def __init__(self, state):
                  self.state = state

              def request(self):
                  self.state.handle(self)

          # Client code
          context = Context(ConcreteStateA())
          context.request()  # Handling state A
          context.request()  # Handling state B


  - title: Strategy
    examples:
      - code: |
          class Strategy:
              def execute(self, data):
                  pass

          class ConcreteStrategyA(Strategy):
              def execute(self, data):
                  return f"Processed with Strategy A: {data}"

          class ConcreteStrategyB(Strategy):
              def execute(self, data):
                  return f"Processed with Strategy B: {data}"

          class Context:
              def __init__(self, strategy):
                  self.strategy = strategy

              def set_strategy(self, strategy):
                  self.strategy = strategy

              def execute_strategy(self, data):
                  return self.strategy.execute(data)

          # Client code
          context = Context(ConcreteStrategyA())
          print(context.execute_strategy("data"))  # Processed with Strategy A: data

          context.set_strategy(ConcreteStrategyB())
          print(context.execute_strategy("data"))  # Processed with Strategy B: data

  - title: Template Method
    examples:
      - code: |
          class AbstractClass:
              def template_method(self):
                  self.step_one()
                  self.step_two()
                  self.hook()

              def step_one(self):
                  print("Abstract step one")

              def step_two(self):
                  print("Abstract step two")

              def hook(self):
                  pass

          class ConcreteClass(AbstractClass):
              def step_two(self):
                  print("Concrete step two")

              def hook(self):
                  print("Concrete hook")

          # Client code
          concrete = ConcreteClass()
          concrete.template_method()

  - title: Visitor
    examples:
      - code: |
          class Visitor:
              def visit_element_a(self, element):
                  pass

              def visit_element_b(self, element):
                  pass

          class Element:
              def accept(self, visitor):
                  pass

          class ConcreteElementA(Element):
              def accept(self, visitor):
                  visitor.visit_element_a(self)

          class ConcreteElementB(Element):
              def accept(self, visitor):
                  visitor.visit_element_b(self)

          class ConcreteVisitor(Visitor):
              def visit_element_a(self, element):
                  print("Visitor is processing ConcreteElementA")

              def visit_element_b(self, element):
                  print("Visitor is processing ConcreteElementB")

          # Client code
          elements = [ConcreteElementA(), ConcreteElementB()]
          visitor = ConcreteVisitor()

          for element in elements:
              element.accept(visitor)
