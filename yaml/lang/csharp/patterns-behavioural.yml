---
patterns:
  - title: Chain Of Responsibility
    examples:
      - code: |
          public abstract class Handler {
              protected Handler nextHandler;

              public Handler(Handler nextHandler) {
                  this.nextHandler = nextHandler;
              }

              public virtual string Handle(string request) {
                  if (nextHandler != null) {
                      return nextHandler.Handle(request);
                  }

                  return null;
              }
          }

          public class ConcreteHandler1 : Handler {
              public ConcreteHandler1(Handler nextHandler) : base(nextHandler) {}

              public override string Handle(string request) {
                  if (request == "handle1") {
                      return "Handled by ConcreteHandler1";
                  }
                  return base.Handle(request);
              }
          }

          public class ConcreteHandler2 : Handler {
              public ConcreteHandler2(Handler nextHandler) : base(nextHandler) {}

              public override string Handle(string request) {
                  if (request == "handle2") {
                      return "Handled by ConcreteHandler2";
                  }
                  return base.Handle(request);
              }
          }

          // Usage
          var handler1 = new ConcreteHandler1(null);
          var handler2 = new ConcreteHandler2(handler1);

          Console.WriteLine(handler2.Handle("handle2"));
          Console.WriteLine(handler2.Handle("handle1"));

  - title: Command
    examples:
      - code: |
          public interface ICommand {
              void Execute();
          }

          public class Light {
              public void TurnOn() => Console.WriteLine("Light turned on");
              public void TurnOff() => Console.WriteLine("Light turned off");
          }

          public class TurnOnCommand : ICommand {
              private Light light;

              public TurnOnCommand(Light light) {
                  this.light = light;
              }

              public void Execute() {
                  light.TurnOn();
              }
          }

          public class TurnOffCommand : ICommand {
              private Light light;

              public TurnOffCommand(Light light) {
                  this.light = light;
              }

              public void Execute() {
                  light.TurnOff();
              }
          }

          public class RemoteControl {
              public void Submit(ICommand command) {
                  command.Execute();
              }
          }

          // Usage
          var light = new Light();
          var turnOnCommand = new TurnOnCommand(light);
          var turnOffCommand = new TurnOffCommand(light);
          var remote = new RemoteControl();

          remote.Submit(turnOnCommand);
          remote.Submit(turnOffCommand);

  - title: Iterator
    examples:
      - code: |
          public interface IIterator<T> {
              T Next();
              bool HasNext();
          }

          public class ConcreteIterator<T> : IIterator<T> {
              private readonly List<T> _collection;
              private int _currentIndex = 0;

              public ConcreteIterator(List<T> collection) {
                  _collection = collection;
              }

              public bool HasNext() {
                  return _currentIndex < _collection.Count;
              }

              public T Next() {
                  if (!HasNext()) throw new InvalidOperationException();
                  return _collection[_currentIndex++];
              }
          }

          // Usage
          var items = new List<object> {1, "two", 3, "four", 5};
          var iterator = new ConcreteIterator<object>(items);

          while (iterator.HasNext()) {
              Console.WriteLine(iterator.Next());
          }

  - title: Mediator
    examples:
      - code: |
          public interface IMediator {
              void Send(string message, Colleague colleague);
          }

          public abstract class Colleague {
              protected IMediator mediator;

              public Colleague(IMediator mediator) {
                  this.mediator = mediator;
              }

              public abstract void Send(string message);
              public abstract void Receive(string message);
          }

          public class ConcreteMediator : IMediator {
              private List<Colleague> colleagues = new List<Colleague>();

              public void Register(Colleague colleague) {
                  colleagues.Add(colleague);
              }

              public void Send(string message, Colleague sender) {
                  foreach (var colleague in colleagues) {
                      if (colleague != sender) {
                          colleague.Receive(message);
                      }
                  }
              }
          }

          public class ConcreteColleague1 : Colleague {
              public ConcreteColleague1(IMediator mediator) : base(mediator) {}

              public override void Send(string message) {
                  mediator.Send(message, this);
              }

              public override void Receive(string message) {
                  Console.WriteLine($"ConcreteColleague1 received: {message}");
              }
          }

          public class ConcreteColleague2 : Colleague {
              public ConcreteColleague2(IMediator mediator) : base(mediator) {}

              public override void Send(string message) {
                  mediator.Send(message, this);
              }

              public override void Receive(string message) {
                  Console.WriteLine($"ConcreteColleague2 received: {message}");
              }
          }

          // Usage
          var mediator = new ConcreteMediator();
          var colleague1 = new ConcreteColleague1(mediator);
          var colleague2 = new ConcreteColleague2(mediator);

          mediator.Register(colleague1);
          mediator.Register(colleague2);

          colleague1.Send("Hello from Colleague 1");
          colleague2.Send("Hello from Colleague 2");

  - title: Memento
    examples:
      - code: |
          public class Memento {
              public string State { get; }

              public Memento(string state) {
                  State = state;
              }
          }

          public class Originator {
              private string _state;

              public void SetState(string state) {
                  _state = state;
              }

              public Memento Save() {
                  return new Memento(_state);
              }

              public void Restore(Memento memento) {
                  _state = memento.State;
              }
          }

          public class Caretaker {
              private List<Memento> _mementos = new List<Memento>();

              public void AddMemento(Memento memento) {
                  _mementos.Add(memento);
              }

              public Memento GetMemento(int index) {
                  return _mementos[index];
              }
          }

          // Usage
          var originator = new Originator();
          var caretaker = new Caretaker();

          originator.SetState("State #1");
          caretaker.AddMemento(originator.Save());

          originator.SetState("State #2");
          caretaker.AddMemento(originator.Save());

          originator.Restore(caretaker.GetMemento(0));
          Console.WriteLine($"Current State: {_state}");

  - title: Observer
    examples:
      - code: |
          public interface IObserver {
              void Update(string message);
          }

          public interface ISubject {
              void Attach(IObserver observer);
              void Detach(IObserver observer);
              void Notify(string message);
          }

          public class Subject : ISubject {
              private List<IObserver> _observers = new List<IObserver>();

              public void Attach(IObserver observer) {
                  _observers.Add(observer);
              }

              public void Detach(IObserver observer) {
                  _observers.Remove(observer);
              }

              public void Notify(string message) {
                  foreach (var observer in _observers) {
                      observer.Update(message);
                  }
              }
          }

          public class ConcreteObserver : IObserver {
              public void Update(string message) {
                  Console.WriteLine($"Observer received: {message}");
              }
          }

          // Usage
          var subject = new Subject();
          var observer1 = new ConcreteObserver();
          var observer2 = new ConcreteObserver();

          subject.Attach(observer1);
          subject.Attach(observer2);

          subject.Notify("Hello Observers!");

          subject.Detach(observer2);
          subject.Notify("Goodbye Observers!");

  - title: State
    examples:
      - code: |
          public interface IState {
              void Handle1();
              void Handle2();
          }

          public class Context {
              private IState _state;

              public Context(IState state) {
                  TransitionTo(state);
              }

              public void TransitionTo(IState state) {
                  Console.WriteLine($"Context: Transition to {state.GetType().Name}");
                  _state = state;
                  _state.SetContext(this);
              }

              public void Request1() {
                  _state.Handle1();
              }

              public void Request2() {
                  _state.Handle2();
              }
          }

          public abstract class State : IState {
              protected Context _context;

              public void SetContext(Context context) {
                  _context = context;
              }

              public abstract void Handle1();
              public abstract void Handle2();
          }

          public class ConcreteStateA : State {
              public override void Handle1() {
                  Console.WriteLine("ConcreteStateA handles request1.");
                  _context.TransitionTo(new ConcreteStateB());
              }

              public override void Handle2() {
                  Console.WriteLine("ConcreteStateA handles request2.");
              }
          }

          public class ConcreteStateB : State {
              public override void Handle1() {
                  Console.WriteLine("ConcreteStateB handles request1.");
              }

              public override void Handle2() {
                  Console.WriteLine("ConcreteStateB handles request2.");
                  _context.TransitionTo(new ConcreteStateA());
              }
          }

          // Usage
          var context = new Context(new ConcreteStateA());
          context.Request1();
          context.Request2();

  - title: Strategy
    examples:
      - code: |
          public interface IStrategy {
              string Execute(string data);
          }

          public class ConcreteStrategyA : IStrategy {
              public string Execute(string data) {
                  return $"Strategy A with data {data}";
              }
          }

          public class ConcreteStrategyB : IStrategy {
              public string Execute(string data) {
                  return $"Strategy B with data {data}";
              }
          }

          public class Context {
              private IStrategy _strategy;

              public Context(IStrategy strategy) {
                  _strategy = strategy;
              }

              public void SetStrategy(IStrategy strategy) {
                  _strategy = strategy;
              }

              public void ExecuteStrategy(string data) {
                  var result = _strategy.Execute(data);
                  Console.WriteLine(result);
              }
          }

          // Usage
          var context = new Context(new ConcreteStrategyA());
          context.ExecuteStrategy("123");

          context.SetStrategy(new ConcreteStrategyB());
          context.ExecuteStrategy("456");

  - title: Template Method
    examples:
      - code: |
          public abstract class AbstractClass {
              // The template method defines the skeleton of an algorithm.
              public void TemplateMethod() {
                  BaseOperation1();
                  RequiredOperations1();
                  BaseOperation2();
                  Hook1();
                  RequiredOperation2();
                  BaseOperation3();
                  Hook2();
              }

              protected void BaseOperation1() {
                  Console.WriteLine("AbstractClass says: I am doing the bulk of the work");
              }

              protected void BaseOperation2() {
                  Console.WriteLine("AbstractClass says: But I let subclasses override some operations");
              }

              protected void BaseOperation3() {
                  Console.WriteLine("AbstractClass says: But I am doing the bulk of the work anyway");
              }

              // These operations have to be implemented in subclasses.
              protected abstract void RequiredOperations1();
              protected abstract void RequiredOperation2();

              // These are "hooks." Subclasses may override them, but it's not mandatory
              // since the hooks have default (but empty) implementation.
              protected virtual void Hook1() { }
              protected virtual void Hook2() { }
          }

          public class ConcreteClass1 : AbstractClass {
              protected override void RequiredOperations1() {
                  Console.WriteLine("ConcreteClass1 says: Implemented Operation1");
              }

              protected override void RequiredOperation2() {
                  Console.WriteLine("ConcreteClass1 says: Implemented Operation2");
              }
          }

          public class ConcreteClass2 : AbstractClass {
              protected override void RequiredOperations1() {
                  Console.WriteLine("ConcreteClass2 says: Implemented Operation1");
              }

              protected override void RequiredOperation2() {
                  Console.WriteLine("ConcreteClass2 says: Implemented Operation2");
              }

              protected override void Hook1() {
                  Console.WriteLine("ConcreteClass2 says: Overridden Hook1");
              }
          }

          // Usage
          Console.WriteLine("Same client code can work with different subclasses:");
          var concreteClass1 = new ConcreteClass1();
          concreteClass1.TemplateMethod();

          Console.WriteLine();

          var concreteClass2 = new ConcreteClass2();
          concreteClass2.TemplateMethod();

  - title: Visitor
    examples:
      - code: |
          public interface IComponent {
              void Accept(IVisitor visitor);
          }

          public class ConcreteComponentA : IComponent {
              public void Accept(IVisitor visitor) {
                  visitor.VisitConcreteComponentA(this);
              }

              public string ExclusiveMethodOfConcreteComponentA() {
                  return "A";
              }
          }

          public class ConcreteComponentB : IComponent {
              public void Accept(IVisitor visitor) {
                  visitor.VisitConcreteComponentB(this);
              }

              public string SpecialMethodOfConcreteComponentB() {
                  return "B";
              }
          }

          public interface IVisitor {
              void VisitConcreteComponentA(ConcreteComponentA element);
              void VisitConcreteComponentB(ConcreteComponentB element);
          }

          public class ConcreteVisitor1 : IVisitor {
              public void VisitConcreteComponentA(ConcreteComponentA element) {
                  Console.WriteLine($"{element.ExclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1");
              }

              public void VisitConcreteComponentB(ConcreteComponentB element) {
                  Console.WriteLine($"{element.SpecialMethodOfConcreteComponentB()} + ConcreteVisitor1");
              }
          }

          // Usage
          var components = new List<IComponent> {
              new ConcreteComponentA(),
              new ConcreteComponentB(),
          };

          var visitor1 = new ConcreteVisitor1();

          foreach (var component in components) {
              component.Accept(visitor1);
          }
