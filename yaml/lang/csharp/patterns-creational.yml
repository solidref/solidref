---
patterns:
  - title: Factory Method
    examples:
      - code: |
          public interface IProduct {
              string Operation();
          }

          public class ConcreteProductA : IProduct {
              public string Operation() {
                  return "Result of ConcreteProductA";
              }
          }

          public class ConcreteProductB : IProduct {
              public string Operation() {
                  return "Result of ConcreteProductB";
              }
          }

          public abstract class Creator {
              public abstract IProduct FactoryMethod();

              public string SomeOperation() {
                  var product = FactoryMethod();
                  var result = $"Creator: The same creator's code has just worked with {product.Operation()}";
                  return result;
              }
          }

          public class ConcreteCreatorA : Creator {
              public override IProduct FactoryMethod() => new ConcreteProductA();
          }

          public class ConcreteCreatorB : Creator {
              public override IProduct FactoryMethod() => new ConcreteProductB();
          }

          // Usage
          var creatorA = new ConcreteCreatorA();
          Console.WriteLine("Client: I'm not aware of the creator's class, but it still works.\n" + creatorA.SomeOperation());

          var creatorB = new ConcreteCreatorB();
          Console.WriteLine("Client: I'm not aware of the creator's class, but it still works.\n" + creatorB.SomeOperation());

  - title: Abstract Factory
    examples:
      - code: |
          public interface IAbstractFactory {
              IProductA CreateProductA();
              IProductB CreateProductB();
          }

          public class ConcreteFactory1 : IAbstractFactory {
              public IProductA CreateProductA() => new ProductA1();

              public IProductB CreateProductB() => new ProductB1();
          }

          public class ConcreteFactory2 : IAbstractFactory {
              public IProductA CreateProductA() => new ProductA2();

              public IProductB CreateProductB() => new ProductB2();
          }

          public interface IProductA {
              string UsefulFunctionA();
          }

          public class ProductA1 : IProductA {
              public string UsefulFunctionA() => "The result of the product A1.";
          }

          public class ProductA2 : IProductA {
              public string UsefulFunctionA() => "The result of the product A2.";
          }

          public interface IProductB {
              string UsefulFunctionB();
              string AnotherUsefulFunctionB(IProductA collaborator);
          }

          public class ProductB1 : IProductB {
              public string UsefulFunctionB() => "The result of the product B1.";

              public string AnotherUsefulFunctionB(IProductA collaborator) => $"The result of the B1 collaborating with the ({collaborator.UsefulFunctionA()})";
          }

          public class ProductB2 : IProductB {
              public string UsefulFunctionB() => "The result of the product B2.";

              public string AnotherUsefulFunctionB(IProductA collaborator) => $"The result of the B2 collaborating with the ({collaborator.UsefulFunctionA()})";
          }

          // Usage
          void ClientMethod(IAbstractFactory factory) {
              var productA = factory.CreateProductA();
              var productB = factory.CreateProductB();

              Console.WriteLine(productB.UsefulFunctionB());
              Console.WriteLine(productB.AnotherUsefulFunctionB(productA));
          }

          var factory1 = new ConcreteFactory1();
          ClientMethod(factory1);

          var factory2 = new ConcreteFactory2();
          ClientMethod(factory2);

  - title: Builder
    examples:
      - code: |
          public class Product {
              public List<string> Parts { get; } = new List<string>();
          }

          public interface IBuilder {
              void BuildPartA();
              void BuildPartB();
              void BuildPartC();
          }

          public class ConcreteBuilder : IBuilder {
              private Product _product = new Product();

              public ConcreteBuilder() {
                  Reset();
              }

              public void Reset() {
                  _product = new Product();
              }

              public void BuildPartA() {
                  _product.Parts.Add("PartA");
              }

              public void BuildPartB() {
                  _product.Parts.Add("PartB");
              }

              public void BuildPartC() {
                  _product.Parts.Add("PartC");
              }

              public Product GetProduct() {
                  Product result = _product;
                  Reset();
                  return result;
              }
          }

          public class Director {
              private IBuilder _builder;

              public IBuilder Builder {
                  set { _builder = value; }
              }

              public void buildMinimalViableProduct() {
                  _builder.BuildPartA();
              }

              public void buildFullFeaturedProduct() {
                  _builder.BuildPartA();
                  _builder.BuildPartB();
                  _builder.BuildPartC();
              }
          }

          // Usage
          var director = new Director();
          var builder = new ConcreteBuilder();
          director.Builder = builder;

          director.buildMinimalViableProduct();
          Console.WriteLine(string.Join(", ", builder.GetProduct().Parts));

          director.buildFullFeaturedProduct();
          Console.WriteLine(string.Join(", ", builder.GetProduct().Parts));

  - title: Prototype
    examples:
      - code: |
          public interface IPrototype {
              IPrototype Clone();
          }

          public class ConcretePrototype : IPrototype {
              public int FieldA { get; set; }
              public string FieldB { get; set; }

              public IPrototype Clone() {
                  return this.MemberwiseClone() as IPrototype;
              }
          }

          // Usage
          var original = new ConcretePrototype { FieldA = 1, FieldB = "Prototype" };
          var clone = original.Clone();

          Console.WriteLine($"Original FieldA: {original.FieldA}, FieldB: {original.FieldB}");
          Console.WriteLine($"Clone FieldA: {clone.FieldA}, FieldB: {clone.FieldB}");

  - title: Singleton
    examples:
      - code: |
          public class Singleton {
              private static Singleton _instance;
              private static readonly object _lock = new object();

              private Singleton() {}

              public static Singleton GetInstance() {
                  if (_instance == null) {
                      lock (_lock) {
                          if (_instance == null) {
                              _instance = new Singleton();
                          }
                      }
                  }
                  return _instance;
              }

              public void SomeBusinessLogic() {
                  // Implementation of some business logic
              }
          }

          // Usage
          var instance1 = Singleton.GetInstance();
          var instance2 = Singleton.GetInstance();

          Console.WriteLine(instance1 == instance2);  // Output: True
