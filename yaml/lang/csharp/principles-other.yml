principles:
  - title: Don't Repeat Yourself (DRY)
    examples:
      - title: Good Example
        code: |
          // Good example: Using optional parameters to avoid repeated logic
          public class TaxCalculator {
              public decimal AddTax(decimal price, decimal rate = 0.05m) {
                  return price * (1 + rate);
              }
          }
      - title: Bad Example
        code: |
          // Bad example: Repeated logic in separate methods
          public class TaxCalculator {
              public decimal AddTaxForFood(decimal price) {
                  return price * 1.05m;
              }

              public decimal AddTaxForElectronics(decimal price) {
                  return price * 1.05m;
              }
          }
  - title: Keep It Simple Stupid (KISS)
    examples:
      - title: Good Example
        code: |
          // Good example: Simple method to check if a number is even
          public bool IsEven(int num) {
              return num % 2 == 0;
          }
      - title: Bad Example
        code: |
          // Bad example: Overcomplicated method to check if a number is even
          public bool IsEven(int num) {
              return num % Math.Abs(2) == 0;
          }
  - title: You Aren't Gonna Need It (YAGNI)
    examples:
      - title: Good Example
        code: |
          // Good example: Implementing only the necessary functionality
          public class Car {
              public void Drive() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Implementing unnecessary functionality
          public class Car {
              public void Drive() { /* ... */ }
              public void Fly() { /* ... */ } // Unnecessary for a Car
          }
  - title: Law of Demeter (Principle of Least Knowledge)
    examples:
      - title: Good Example
        code: |
          // Good example: Adhering to the Law of Demeter
          public class Wallet {
              private decimal _money = 100;
              public decimal GetAmount() => _money;
          }

          public class Person {
              private Wallet _wallet = new Wallet();
              public decimal GetMoneyAmount() => _wallet.GetAmount();
          }

          public bool Purchase(decimal itemPrice, Person buyer) {
              return buyer.GetMoneyAmount() >= itemPrice;
          }
      - title: Bad Example
        code: |
          // Bad example: Violating the Law of Demeter
          public class Wallet {
              public decimal Money = 100;
          }

          public class Person {
              public Wallet Wallet = new Wallet();
          }

          public bool Purchase(decimal itemPrice, Person buyer) {
              return buyer.Wallet.Money >= itemPrice;
          }
  - title: Separation of Concerns
    examples:
      - title: Good Example
        code: |
          // Good example: Separating concerns into different classes
          public class UserDataService {
              public void FetchUserData() { /* ... */ }
          }

          public class UserLogic {
              public int CalculateAge(DateTime birthDate) {
                  // Implementation...
              }
          }

          public class UserComponent {
              public void Render() { /* ... */ }
          }
      - title: Bad Example
        code: |
          // Bad example: Mixing data retrieval, logic, and presentation in one class
          public class UserComponent {
              public void FetchUserData() { /* ... */ }
              public void Render() { /* ... */ }
              public int CalculateAge(DateTime birthDate) {
                  // Implementation...
              }
          }
