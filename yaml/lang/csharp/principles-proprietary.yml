---
principles:
  - title: Properties and Auto-Implemented Properties
    description:
      - variant: subtitle1
        content: |
          C# provides properties as a way to encapsulate access to fields of a class. Auto-implemented properties simplify property declaration when no additional logic is required in the property accessors.
    examples:
      - code: |
          public class Person {
              public string Name { get; set; } // Auto-implemented property
          }

  - title: Delegates and Events
    description:
      - variant: subtitle1
        content: |
          Delegates are type-safe function pointers allowing methods to be passed as arguments. Events in C# are a way of providing notifications. They use delegates to allow consumer objects to subscribe to events.
    examples:
      - code: |
          public delegate void EventHandler(string message);
          public class MyEventClass {
              public event EventHandler MyEvent;

              public void TriggerEvent() {
                  MyEvent?.Invoke("Event triggered!");
              }
          }

  - title: Language Integrated Query (LINQ)
    description:
      - variant: subtitle1
        content: |
          LINQ introduces query capabilities directly into the C# language. It provides a consistent model for working with data across various sources (arrays, collections, databases).
    examples:
      - code: |
          var numbers = new List<int> { 1, 2, 3, 4, 5 };
          var evenNumbers = from num in numbers
                            where num % 2 == 0
                            select num;

  - title: Async/Await
    description:
      - variant: subtitle1
        content: |
          The async and await keywords in C# are used for asynchronous programming, allowing non-blocking operations without complex callbacks or thread management.
    examples:
      - code: |
          public async Task<string> GetDataAsync() {
              using (var client = new HttpClient()) {
                  string data = await client.GetStringAsync("https://api.example.com/data");
                  return data;
              }
          }

  - title: Nullable Reference Types
    description:
      - variant: subtitle1
        content: |
          (Introduced in C# 8.0): Allows for explicit declaration of nullable and non-nullable reference types, enhancing code safety by making nullability a part of the type system.
    examples:
      - code: |
          public class ExampleClass {
              public string NonNullableProperty { get; set; }
              public string? NullableProperty { get; set; } // C# 8.0 feature
          }

  - title: Pattern Matching
    description:
      - variant: subtitle1
        content: |
          (Enhanced in C# 7.0 and beyond): Provides a powerful way to work with data based on its shape or structure, allowing for more expressive conditional logic.
    examples:
      - code: |
          public void DoAction(object obj) {
              if (obj is int i) {
                  Console.WriteLine($"Integer: {i}");
              } else if (obj is string s) {
                  Console.WriteLine($"String: {s}");
              }
          }

  - title: Record Types
    description:
      - variant: subtitle1
        content: |
          (Introduced in C# 9.0): Records are a reference type that provides built-in functionality for encapsulating immutable data. They are especially useful for value-based equality.
    examples:
      - code: |
          public record Person(string Name, int Age);

  - title: Local Functions
    description:
      - variant: subtitle1
        content: |
           C# allows defining functions inside the body of another function, enhancing encapsulation and readability for helper functions.
    examples:
      - code: |
          public void OuterFunction() {
              int InnerFunction(int x) => x * x;
              Console.WriteLine(InnerFunction(5));
          }

  - title: Extension Methods
    description:
      - variant: subtitle1
        content: |
          Extension methods enable adding new methods to existing types without modifying them, enhancing the flexibility of type extension.
    examples:
      - code: |
          public static class StringExtensions {
              public static string Quote(this string input) => $"\"{input}\"";
          }
