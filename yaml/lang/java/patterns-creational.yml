---
patterns:
  - title: Factory Method
    examples:
      - code: |
          interface Shape {
              void draw();
          }

          class Rectangle implements Shape {
              @Override
              public void draw() {
                  System.out.println("Inside Rectangle::draw() method.");
              }
          }

          class Circle implements Shape {
              @Override
              public void draw() {
                  System.out.println("Inside Circle::draw() method.");
              }
          }

          abstract class ShapeFactory {
              abstract Shape createShape();

              // Other implementations
          }

          class RectangleFactory extends ShapeFactory {
              @Override
              Shape createShape() {
                  return new Rectangle();
              }
          }

          class CircleFactory extends ShapeFactory {
              @Override
              Shape createShape() {
                  return new Circle();
              }
          }

  - title: Abstract Factory
    examples:
      - code: |
          interface Button {
              void paint();
          }

          interface GUIFactory {
              Button createButton();
          }

          class WinFactory implements GUIFactory {
              @Override
              public Button createButton() {
                  return new WinButton();
              }
          }

          class MacFactory implements GUIFactory {
              @Override
              public Button createButton() {
                  return new MacButton();
              }
          }

          class WinButton implements Button {
              @Override
              public void paint() {
                  System.out.println("Render a button in a Windows style.");
              }
          }

          class MacButton implements Button {
              @Override
              public void paint() {
                  System.out.println("Render a button in a MacOS style.");
              }
          }

  - title: Builder
    examples:
      - code: |
          class Car {
              private String wheels;
              private String engine;
              private String color;

              // Car builder inner static class
              public static class Builder {
                  private String wheels;
                  private String engine;
                  private String color;

                  public Builder wheels(String value) {
                      wheels = value;
                      return this;
                  }

                  public Builder engine(String value) {
                      engine = value;
                      return this;
                  }

                  public Builder color(String value) {
                      color = value;
                      return this;
                  }

                  public Car build() {
                      return new Car(this);
                  }
              }

              private Car(Builder builder) {
                  wheels = builder.wheels;
                  engine = builder.engine;
                  color = builder.color;
              }

              // Getters
          }

          // Usage
          Car car = new Car.Builder()
                          .wheels("Alloy")
                          .engine("V8")
                          .color("Red")
                          .build();

  - title: Prototype
    examples:
      - code: |
          abstract class Shape implements Cloneable {
              private String id;
              protected String type;

              abstract void draw();

              public String getType(){
                  return type;
              }

              public String getId() {
                  return id;
              }

              public void setId(String id) {
                  this.id = id;
              }

              public Object clone() {
                  Object clone = null;
                  try {
                      clone = super.clone();
                  } catch (CloneNotSupportedException e) {
                      e.printStackTrace();
                  }
                  return clone;
              }
          }

          class Rectangle extends Shape {
              public Rectangle(){
                  type = "Rectangle";
              }

              @Override
              public void draw() {
                  System.out.println("Inside Rectangle::draw() method.");
              }
          }

          // Usage
          Shape clonedShape = (Shape) rectangle.clone();

  - title: Singleton
    examples:
      - code: |
          public class Singleton {
              // Private static instance of the class
              private static Singleton instance;

              // Private constructor so no other class can instantiate it
              private Singleton() {}

              // Public static method that returns the instance of the class
              public static Singleton getInstance() {
                  if (instance == null) {
                      instance = new Singleton();
                  }
                  return instance;
              }
          }
