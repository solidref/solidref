---
patterns:
  - title: Chain Of Responsibility
    examples:
      - code: |
          abstract class Logger {
              public static int INFO = 1;
              public static int DEBUG = 2;
              public static int ERROR = 3;

              protected int level;

              //next element in chain or responsibility
              protected Logger nextLogger;

              public void setNextLogger(Logger nextLogger) {
                  this.nextLogger = nextLogger;
              }

              public void logMessage(int level, String message) {
                  if (this.level <= level) {
                      write(message);
                  }
                  if (nextLogger != null) {
                      nextLogger.logMessage(level, message);
                  }
              }

              abstract protected void write(String message);
          }

          class ConsoleLogger extends Logger {

              public ConsoleLogger(int level) {
                  this.level = level;
              }

              @Override
              protected void write(String message) {
                  System.out.println("Standard Console::Logger: " + message);
              }
          }

          class ErrorLogger extends Logger {

              public ErrorLogger(int level) {
                  this.level = level;
              }

              @Override
              protected void write(String message) {
                  System.out.println("Error Console::Logger: " + message);
              }
          }

          class FileLogger extends Logger {

              public FileLogger(int level) {
                  this.level = level;
              }

              @Override
              protected void write(String message) {
                  System.out.println("File::Logger: " + message);
              }
          }

  - title: Command
    examples:
      - code: |
          interface Command {
              void execute();
          }

          class Light {
              public void turnOn() {
                  System.out.println("Light is on");
              }

              public void turnOff() {
                  System.out.println("Light is off");
              }
          }

          class TurnOnLightCommand implements Command {
              private final Light light;

              public TurnOnLightCommand(Light light) {
                  this.light = light;
              }

              @Override
              public void execute() {
                  light.turnOn();
              }
          }

          class TurnOffLightCommand implements Command {
              private final Light light;

              public TurnOffLightCommand(Light light) {
                  this.light = light;
              }

              @Override
              public void execute() {
                  light.turnOff();
              }
          }

          class RemoteControl {
              private Command command;

              public void setCommand(Command command) {
                  this.command = command;
              }

              public void pressButton() {
                  command.execute();
              }
          }

  - title: Iterator
    examples:
      - code: |
          interface Iterator {
              boolean hasNext();
              Object next();
          }

          interface Container {
              Iterator getIterator();
          }

          class NameRepository implements Container {
              public String names[] = {"John", "Jane", "Jack", "Jill"};

              @Override
              public Iterator getIterator() {
                  return new NameIterator();
              }

              private class NameIterator implements Iterator {
                  int index;

                  @Override
                  public boolean hasNext() {
                      return index < names.length;
                  }

                  @Override
                  public Object next() {
                      if (this.hasNext()) {
                          return names[index++];
                      }
                      return null;
                  }
              }
          }

  - title: Mediator
    examples:
      - code: |
          interface ChatMediator {
              void sendMessage(String msg, User user);
              void addUser(User user);
          }

          class ChatRoom implements ChatMediator {
              private List<User> users;

              public ChatRoom() {
                  this.users = new ArrayList<>();
              }

              @Override
              public void sendMessage(String msg, User user) {
                  for (User u : this.users) {
                      // message should not be received by the user sending it
                      if (u != user) {
                          u.receive(msg);
                      }
                  }
              }

              @Override
              public void addUser(User user) {
                  this.users.add(user);
              }
          }

          abstract class User {
              protected ChatMediator mediator;
              protected String name;

              public User(ChatMediator med, String name){
                  this.mediator=med;
                  this.name=name;
              }

              public abstract void send(String msg);
              public abstract void receive(String msg);
          }

          class UserImpl extends User {

              public UserImpl(ChatMediator med, String name) {
                  super(med, name);
              }

              @Override
              public void send(String msg) {
                  System.out.println(this.name+": Sending Message="+msg);
                  mediator.sendMessage(msg, this);
              }

              @Override
              public void receive(String msg) {
                  System.out.println(this.name+": Received Message:"+msg);
              }
          }

  - title: Memento
    examples:
      - code: |
          class Originator {
              private String state;

              public void setState(String state) {
                  this.state = state;
              }

              public String getState() {
                  return state;
              }

              public Memento saveStateToMemento() {
                  return new Memento(state);
              }

              public void getStateFromMemento(Memento Memento) {
                  state = Memento.getState();
              }
          }

          class Memento {
              private String state;

              public Memento(String state) {
                  this.state = state;
              }

              public String getState() {
                  return state;
              }
          }

          class Caretaker {
              private List<Memento> mementoList = new ArrayList<>();

              public void add(Memento state) {
                  mementoList.add(state);
              }

              public Memento get(int index) {
                  return mementoList.get(index);
              }
          }

  - title: Observer
    examples:
      - code: |
          interface Observer {
              void update(String message);
          }

          class NewsAgency {
              private final List<Observer> observers = new ArrayList<>();

              public void addObserver(Observer observer) {
                  observers.add(observer);
              }

              public void removeObserver(Observer observer) {
                  observers.remove(observer);
              }

              public void newNews(String news) {
                  for (Observer observer : observers) {
                      observer.update(news);
                  }
              }
          }

          class NewsChannel implements Observer {
              private String news;

              @Override
              public void update(String news) {
                  this.news = news;
                  System.out.println("NewsChannel Received: " + news);
              }
          }

  - title: State
    examples:
      - code: |
          interface State {
              void doAction(Context context);
          }

          class StartState implements State {
              @Override
              public void doAction(Context context) {
                  System.out.println("Player is in start state");
                  context.setState(this);
              }

              public String toString(){
                  return "Start State";
              }
          }

          class StopState implements State {
              @Override
              public void doAction(Context context) {
                  System.out.println("Player is in stop state");
                  context.setState(this);
              }

              public String toString(){
                  return "Stop State";
              }
          }

          class Context {
              private State state;

              public Context() {
                  state = null;
              }

              public void setState(State state) {
                  this.state = state;
              }

              public State getState() {
                  return state;
              }
          }

  - title: Strategy
    examples:
      - code: |
          interface PaymentStrategy {
              void pay(int amount);
          }

          class CreditCardPayment implements PaymentStrategy {
              @Override
              public void pay(int amount) {
                  System.out.println("Paying with Credit Card: $" + amount);
              }
          }

          class PaypalPayment implements PaymentStrategy {
              @Override
              public void pay(int amount) {
                  System.out.println("Paying with PayPal: $" + amount);
              }
          }

          class Shopping {
              private PaymentStrategy paymentStrategy;

              public Shopping(PaymentStrategy paymentStrategy) {
                  this.paymentStrategy = paymentStrategy;
              }

              public void checkout(int amount) {
                  paymentStrategy.pay(amount);
              }
          }

  - title: TemplateMethod
    examples:
      - code: |
          abstract class Game {
              abstract void initialize();
              abstract void startPlay();
              abstract void endPlay();

              //template method
              public final void play(){
                  initialize();
                  startPlay();
                  endPlay();
              }
          }

          class Cricket extends Game {
              @Override
              void initialize() {
                  System.out.println("Cricket Game Initialized! Start playing.");
              }

              @Override
              void startPlay() {
                  System.out.println("Cricket Game Started. Enjoy the game!");
              }

              @Override
              void endPlay() {
                  System.out.println("Cricket Game Finished!");
              }
          }

  - title: Visitor
    examples:
      - code: |
          interface ComputerPart {
              void accept(ComputerPartVisitor computerPartVisitor);
          }

          class Keyboard implements ComputerPart {
              @Override
              public void accept(ComputerPartVisitor computerPartVisitor) {
                  computerPartVisitor.visit(this);
              }
          }

          class Monitor implements ComputerPart {
              @Override
              public void accept(ComputerPartVisitor computerPartVisitor) {
                  computerPartVisitor.visit(this);
              }
          }

          interface ComputerPartVisitor {
              void visit(Keyboard keyboard);
              void visit(Monitor monitor);
          }

          class ComputerPartDisplayVisitor implements ComputerPartVisitor {
              @Override
              public void visit(Keyboard keyboard) {
                  System.out.println("Displaying Keyboard.");
              }

              @Override
              public void visit(Monitor monitor) {
                  System.out.println("Displaying Monitor.");
              }
          }
