---
patterns:
  - title: Adapter
    examples:
      - code: |
          // Target interface
          interface MediaPlayer {
              void play(String audioType, String fileName);
          }

          // Adaptee class
          class AdvancedMediaPlayer {
              public void playVlc(String fileName) {
                  System.out.println("Playing vlc file. Name: "+ fileName);
              }

              public void playMp4(String fileName) {
                  System.out.println("Playing mp4 file. Name: "+ fileName);
              }
          }

          // Adapter class
          class MediaAdapter implements MediaPlayer {
              AdvancedMediaPlayer advancedMusicPlayer;

              public MediaAdapter(String audioType) {
                  if(audioType.equalsIgnoreCase("vlc") ){
                      advancedMusicPlayer = new AdvancedMediaPlayer();
                  } else if (audioType.equalsIgnoreCase("mp4")){
                      advancedMusicPlayer = new AdvancedMediaPlayer();
                  }
              }

              @Override
              public void play(String audioType, String fileName) {
                  if(audioType.equalsIgnoreCase("vlc")){
                      advancedMusicPlayer.playVlc(fileName);
                  } else if(audioType.equalsIgnoreCase("mp4")){
                      advancedMusicPlayer.playMp4(fileName);
                  }
              }
          }

          // Client class using the adapter
          class AudioPlayer implements MediaPlayer {
              MediaAdapter mediaAdapter;

              @Override
              public void play(String audioType, String fileName) {
                  // Inbuilt support to play mp3 music files
                  if(audioType.equalsIgnoreCase("mp3")){
                      System.out.println("Playing mp3 file. Name: " + fileName);
                  }
                  // MediaAdapter is providing support to play other file formats
                  else if(audioType.equalsIgnoreCase("vlc") || audioType.equalsIgnoreCase("mp4")){
                      mediaAdapter = new MediaAdapter(audioType);
                      mediaAdapter.play(audioType, fileName);
                  }
                  else{
                      System.out.println("Invalid media. " + audioType + " format not supported");
                  }
              }
          }

  - title: Bridge
    examples:
      - code: |
          // Implementor
          interface Color {
              String fill();
          }

          // Concrete Implementor A
          class RedColor implements Color {
              public String fill() {
                  return "Color is Red";
              }
          }

          // Concrete Implementor B
          class GreenColor implements Color {
              public String fill() {
                  return "Color is Green";
              }
          }

          // Abstraction
          abstract class Shape {
              // Composition - implementor
              protected Color color;

              // constructor with implementor as input argument
              public Shape(Color c) {
                  this.color = c;
              }

              abstract public String draw();
          }

          // Refined Abstraction
          class Triangle extends Shape {
              public Triangle(Color c) {
                  super(c);
              }

              public String draw() {
                  return "Triangle drawn. " + color.fill();
              }
          }

          // Refined Abstraction
          class Circle extends Shape {
              public Circle(Color c) {
                  super(c);
              }

              public String draw() {
                  return "Circle drawn. " + color.fill();
              }
          }

          // Usage
          Shape tri = new Triangle(new RedColor());
          Shape cir = new Circle(new GreenColor());
          System.out.println(tri.draw()); // Triangle drawn. Color is Red
          System.out.println(cir.draw()); // Circle drawn. Color is Green

  - title: Composite
    examples:
      - code: |
          interface Component {
              void add(Component component);
              void remove(Component component);
              void display();
          }

          class Leaf implements Component {
              private String name;

              public Leaf(String name){
                  this.name = name;
              }

              public void add(Component component) {
                  // Leaf nodes do not add other components
              }

              public void remove(Component component) {
                  // Leaf nodes do not remove other components
              }

              public void display() {
                  System.out.println(name);
              }
          }

          class Composite implements Component {
              private List<Component> components = new ArrayList<>();
              private String name;

              public Composite(String name) {
                  this.name = name;
              }

              public void add(Component component) {
                  components.add(component);
              }

              public void remove(Component component) {
                  components.remove(component);
              }

              public void display() {
                  System.out.println(name);
                  for (Component component : components) {
                      component.display();
                  }
              }
          }

  - title: Decorator
    examples:
      - code: |
          // Component Interface
          interface Coffee {
              double getCost();
              String getDescription();
          }

          // Concrete Component
          class SimpleCoffee implements Coffee {
              @Override
              public double getCost() {
                  return 1;
              }

              @Override
              public String getDescription() {
                  return "Simple coffee";
              }
          }

          // Decorator Base Class
          abstract class CoffeeDecorator implements Coffee {
              protected final Coffee decoratedCoffee;

              public CoffeeDecorator(Coffee c) {
                  this.decoratedCoffee = c;
              }

              public double getCost() { // Implementing methods of the interface
                  return decoratedCoffee.getCost();
              }

              public String getDescription() {
                  return decoratedCoffee.getDescription();
              }
          }

          // Concrete Decorator
          class MilkDecorator extends CoffeeDecorator {
              public MilkDecorator(Coffee c) {
                  super(c);
              }

              public double getCost() {
                  return super.getCost() + 0.5;
              }

              public String getDescription() {
                  return super.getDescription() + ", milk";
              }
          }

          // Another Concrete Decorator
          class SugarDecorator extends CoffeeDecorator {
              public SugarDecorator(Coffee c) {
                  super(c);
              }

              public double getCost() {
                  return super.getCost() + 0.2;
              }

              public String getDescription() {
                  return super.getDescription() + ", sugar";
              }
          }

          // Usage
          Coffee myCoffee = new SugarDecorator(new MilkDecorator(new SimpleCoffee()));
          System.out.println("Cost: " + myCoffee.getCost()); // Cost: 1.7
          System.out.println("Description: " + myCoffee.getDescription()); // Description: Simple coffee, milk, sugar

  - title: Facade
    examples:
      - code: |
          class SubsystemOne {
              public void methodOne() {
                  System.out.println("SubsystemOne Method");
              }
          }

          class SubsystemTwo {
              public void methodTwo() {
                  System.out.println("SubsystemTwo Method");
              }
          }

          class SubsystemThree {
              public void methodThree() {
                  System.out.println("SubsystemThree Method");
              }
          }

          // Facade class
          class Facade {
              private SubsystemOne one;
              private SubsystemTwo two;
              private SubsystemThree three;

              public Facade() {
                  one = new SubsystemOne();
                  two = new SubsystemTwo();
                  three = new SubsystemThree();
              }

              public void methodA() {
                  System.out.println("\nMethodA() ---- ");
                  one.methodOne();
                  two.methodTwo();
              }

              public void methodB() {
                  System.out.println("\nMethodB() ---- ");
                  two.methodTwo();
                  three.methodThree();
              }
          }

  - title: Flyweight
    examples:
      - code: |
          import java.util.HashMap;
          import java.util.Map;

          interface Shape {
              void draw();
          }

          // Concrete Flyweight class
          class Circle implements Shape {
              private String color;
              private int x;
              private int y;
              private int radius;

              public Circle(String color){
                  this.color = color;
              }

              public void setX(int x) {
                  this.x = x;
              }

              public void setY(int y) {
                  this.y = y;
              }

              public void setRadius(int radius) {
                  this.radius = radius;
              }

              public void draw() {
                  System.out.println("Circle: Draw() [Color : " + color + ", x : " + x + ", y :" + y + ", radius :" + radius);
              }
          }

          // Flyweight Factory
          class ShapeFactory {
              private static final Map<String, Shape> circleMap = new HashMap<>();

              public static Shape getCircle(String color) {
                  Circle circle = (Circle)circleMap.get(color);

                  if(circle == null){
                      circle = new Circle(color);
                      circleMap.put(color, circle);
                      System.out.println("Creating circle of color : " + color);
                  }
                  return circle;
              }
          }

  - title: Proxy
    examples:
      - code: |
          interface Image {
              void display();
          }

          // RealImage class that the Proxy can stand in for
          class RealImage implements Image {
              private String fileName;

              public RealImage(String fileName){
                  this.fileName = fileName;
                  loadFromDisk(fileName);
              }

              @Override
              public void display() {
                  System.out.println("Displaying " + fileName);
              }

              private void loadFromDisk(String fileName){
                  System.out.println("Loading " + fileName);
              }
          }

          // Proxy class
          class ProxyImage implements Image{
              private RealImage realImage;
              private String fileName;

              public ProxyImage(String fileName){
                  this.fileName = fileName;
              }

              @Override
              public void display() {
                  if(realImage == null){
                      realImage = new RealImage(fileName);
                  }
                  realImage.display();
              }
          }
