---
principles:
  - title: Single Responsibility
    examples:
      - title: Good Example
        code: |
          // Good: Handles only user input processing
          public class UserInputHandler {
              public String getInput() {
                  Scanner scanner = new Scanner(System.in);
                  return scanner.nextLine();
              }
          }

      - title: Bad Example
        code: |
          // Bad: Multiple responsibilities
          public class UserProcessor {
              public void processUser() {
                  Scanner scanner = new Scanner(System.in);
                  String userInput = scanner.nextLine();

                  // Business logic processing
                  // ...

                  // Database operation
                  // ...
              }
          }

  - title: Open-Closed
    examples:
      - title: Good Example
        code: |
          // Good: Easily extendable without modifying existing code
          public interface Shape {
              double area();
          }

          public class Rectangle implements Shape {
              private double length;
              private double width;

              // Constructor, getters, and setters

              @Override
              public double area() {
                  return length * width;
              }
          }

          public class Circle implements Shape {
              private double radius;

              // Constructor, getters, and setters

              @Override
              public double area() {
                  return Math.PI * radius * radius;
              }
          }

      - title: Bad Example
        code: |
          // Bad: Requires modification for each new shape
          public class AreaCalculator {
              public double calculateRectangleArea(double length, double width) {
                  return length * width;
              }

              public double calculateCircleArea(double radius) {
                  return Math.PI * radius * radius;
              }

              // Adding a new shape requires modifying this class
          }

  - title: Liskov Substitution
    examples:
      - title: Good Example
        code: |
          public class Bird {
              public void fly(){}
          }

          public class Sparrow extends Bird {}

          public class Ostrich extends Bird {
              @Override
              public void fly() {
                  throw new UnsupportedOperationException("Ostriches cannot fly");
              }
          }

      - title: Bad Example
        code: |
          // Good: Subclasses follow the base class contract
          public class Bird {
              public void move(){}
          }

          public class Sparrow extends Bird {
              @Override
              public void move(){
                  // Implements flying behavior
              }
          }

          public class Ostrich extends Bird {
              @Override
              public void move(){
                  // Implements running behavior
              }
          }

  - title: Interface Segregation
    examples:
      - title: Good Example
        code: |
          // Good: Interfaces are client-specific
          public interface Printer {
              void print();
          }

          public interface Scanner {
              void scan();
          }

          public class MultiFunctionPrinter implements Printer, Scanner {
              public void print() {
                  // Print implementation
              }

              public void scan() {
                  // Scan implementation
              }
          }

      - title: Bad Example
        code: |
          // Bad: Forces implementation of unused methods
          public interface OfficeMachine {
              void print();
              void scan();
              void fax();
          }

          public class SimplePrinter implements OfficeMachine {
              public void print() {
                  // Print implementation
              }

              public void scan() {
                  // Unsupported operation
                  throw new UnsupportedOperationException();
              }

              public void fax() {
                  // Unsupported operation
                  throw new UnsupportedOperationException();
              }
          }

  - title: Dependency Inversion
    examples:
      - title: Good Example
        code: |
          // Good: Depend upon abstractions, not concretions
          public interface Database {
              void save(Object data);
          }

          public class MySqlDatabase implements Database {
              public void save(Object data) {
                  // MySQL save implementation
              }
          }

          public class DataProcessor {
              private Database database;

              public DataProcessor(Database database) {
                  this.database = database;
              }

              public void process(Object data) {
                  database.save(data);
              }
          }

      - title: Bad Example
        code: |
          // Bad: High-level module directly depends on low-level module
          public class DataProcessor {
              private MySqlDatabase mySqlDatabase = new MySqlDatabase();

              public void process(Object data) {
                  mySqlDatabase.save(data);
              }
          }
