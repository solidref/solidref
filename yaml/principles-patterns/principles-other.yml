---
title: Understanding <i>SOLID</i> Principles <br /> in Software Development
before:
  - variant: body1
    content: |
      The SOLID principles are a set of design principles in object-oriented programming that enable developers to
      create more maintainable, understandable, and flexible software. Here's a deeper dive into each of these
      principles.
accordion:
  Separation of Concerns:
  - variant: body1
    content: |
      Separation of Concerns (SoC) is a design principle for separating a computer program into distinct sections, 
      such that each section addresses a separate concern. A concern is a set of information that affects the code 
      of a program. SoC is a method of breaking down a complex problem into more manageable parts, each with a clear, 
      specific responsibility. This principle is fundamental in software engineering and is closely related to the 
      concept of modularity and encapsulation, aiming to make a system more understandable, maintainable, and scalable.
  - variant: subtitle1
    content: |
      Concept
  - variant: body1
    content: |
      The essence of Separation of Concerns is to organize software so that each part addresses a single concern or 
      responsibility. This organizational strategy reduces complexity by isolating components that perform specific 
      functions and interact with each other in well-defined ways. The principle is applicable at various levels of 
      software development, including architecture design, code structuring, and even database management.
  - variant: subtitle1
    content: |
      Implementation in Design
  - variant: body1
    content: |
      Implementing SoC in software design often involves identifying the different aspects of the application that 
      may change for different reasons (business logic, user interface, data access logic, etc.) and separating 
      these aspects into different modules or layers. Each layer communicates with the others only through defined 
      interfaces, minimizing direct dependencies.
  - variant: subtitle1
    content: |
      Example
  - variant: body1
    content: |
      Consider a web application with functionality to display user information and allow the user to update it. 
      Applying SoC, we can separate this application into three main layers:
  - variant: body1
    content: |
      <ul>
        <li>Presentation Layer: Handles all user interface and browser communication logic.<li>
        <li>Business Logic Layer: Contains logic for user data validation and processing.<li>
        <li>Data Access Layer: Manages all interactions with the database or data storage system.<li>
      <ul>
  - variant: body1
    content: |
      // Presentation Layer
      function updateUserProfileUI(userData) {
        if (validateUserData(userData)) {
          updateUserProfile(userData);
        }
      }

      // Business Logic Layer
      function validateUserData(userData) {
        // Perform validation checks
        return userData && userData.name && userData.email;
      }

      function updateUserProfile(userData) {
        // Logic to update user profile
        saveUserData(userData);
        console.log('User profile updated');
      }

      // Data Access Layer
      function saveUserData(userData) {
        // Code to save user data to a database
        console.log('User data saved to the database');
      }
  - variant: body1
    content: |
      In this simplified example, each function represents a separate concern: the UI logic is separated from the 
      validation logic, which is further separated from the data persistence logic. This separation makes it easier 
      to maintain and modify the application, such as changing the database or the UI framework, without affecting 
      the other parts of the application.
  - variant: subtitle1
    content: |
      Conclusion
  - variant: body1
    content: |
      Separation of Concerns is a powerful principle in software engineering, facilitating the development of cleaner, 
      more organized code that is easier to test, maintain, and scale. By diligently applying SoC, developers can 
      enhance the flexibility and robustness of their systems, making them more adaptable to change and easier to 
      comprehend.

  Law of Demeter (Principle of Least Knowledge):
  - variant: body1
    content: |
      The Law of Demeter, often referred to as the principle of least knowledge, is a guideline aimed at reducing 
      coupling between components in object-oriented design. It advocates for a model where objects limit their 
      interactions to a closely related set of other objects. According to this principle, a given object should 
      only call methods of the following kinds of objects:
  - variant: body1
    content: |
      <ul>
        <li>The object itself.</li>
        <li>Objects passed as a parameter to the method.</li>
        <li>Any object the method creates or instantiates.</li>
        <li>Any components (objects) held in instance variables of the object's class.</li>
      </ul>
  - variant: body1
    content: |
      The Law of Demeter promotes the design of systems that are more maintainable and understandable by minimizing 
      the depth of interactions between objects, effectively reducing the dependencies within the system.
  - variant: subtitle1
    content: |
      Concept
  - variant: body1
    content: |
      The essence of the Law of Demeter is to encourage shallow, rather than deep, interactions between objects. It 
      discourages reaching into an object to access another object's properties or methods (an anti-pattern often 
      described as "train wrecks" - e.g., anObject.getSomething().getAnotherThing().doSomething()). This principle 
      helps in building a system with loosely coupled components, which in turn makes the system more modular, easier 
      to understand, and adaptable to changes.
  - variant: subtitle1
    content: |
      Implementation in a Design
  - variant: body1
    content: |
      In practice, adhering to the Law of Demeter often involves introducing methods that delegate work to the 
      components, rather than directly accessing the components of other objects. This encapsulation allows for 
      changes in the internals of a component without affecting its consumers, as long as the component's 
      interface remains consistent.
  - variant: subtitle1
    content: |
      Example
  - variant: body1
    content: |
      Consider a shopping cart application where a Customer places an Order containing multiple Items. Applying the 
      Law of Demeter, the Order class should not directly access Item details from the Customer class.
  - variant: code
    content: |
      class Customer {
        constructor(name) {
          this.name = name;
          this.order = new Order();
        }

        addOrder(order) {
          this.order = order;
        }

        calculateOrderTotal() {
          return this.order.calculateTotal();
        }
      }

      class Order {
        constructor() {
          this.items = [];
        }

        addItem(item) {
          this.items.push(item);
        }

        calculateTotal() {
          return this.items.reduce((total, item) => total + item.price, 0);
        }
      }

      class Item {
        constructor(name, price) {
          this.name = name;
          this.price = price;
        }
      }

      // Usage
      const customer = new Customer('John Doe');
      const order = new Order();
      order.addItem(new Item('Laptop', 1000));
      order.addItem(new Item('Mouse', 25));
      customer.addOrder(order);

      console.log(customer.calculateOrderTotal()); // 1025
  - variant: body1
    content: |
      In this example, the Customer class delegates the responsibility of calculating the total order cost to the 
      Order class, rather than directly interacting with the Item objects within the order. This adherence to the 
      Law of Demeter ensures that changes to the structure or methods of the Order or Item classes would not 
      necessitate changes in the Customer class, as long as the interface for calculating the total remains 
      consistent.
  - variant: subtitle1
    content: |
      Conclusion
  - variant: body1
    content: |
      The Law of Demeter is a valuable principle for designing loosely coupled systems, promoting encapsulation, 
      and enhancing modularity. By following this principle, developers can create systems that are easier to 
      maintain, extend, and refactor, leading to higher quality and more robust software architecture.

  Don't Repeat Yourself (DRY):
    - variant: subtitle1
      content: Overview
    - variant: body1
      content: |
        DRY is a fundamental principle in software development that emphasizes the importance of avoiding
        duplication in code. The idea is to have a single, authoritative representation of every piece of
        knowledge and logic in the system.
    - variant: subtitle1
      content: Benefits
    - variant: body1
      content: |
        By following DRY, you reduce the likelihood of inconsistencies and bugs because changes only need to be
        made in one place. It also makes the codebase easier to maintain and understand.
    - variant: subtitle1
      content: Implementation
    - variant: body1
      content: |
        Implement DRY by identifying patterns and repeated code blocks. Then refactor these into functions,
        classes, or modules that can be reused.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        Suppose you have several functions that validate user input. Instead of repeating the validation logic
        in each function, create a single validateInput function and call it wherever validation is needed.
    - variant: subtitle1
      content: Conclusion
    - variant: body1
      content: |
        Adhering to DRY helps in building a cleaner, more efficient, and error-resistant codebase. It's about
        maximizing the impact of code changes while minimizing the effort.
  Keep It Simple Stupid (KISS):
    - variant: subtitle1
      content: Overview
    - variant: body1
      content: |
        KISS advocates for simplicity in design. It suggests that systems work best if they are kept simple
        rather than made complex. Therefore, simplicity should be a key goal in design, and unnecessary
        complexity should be avoided.
    - variant: subtitle1
      content: Benefits
    - variant: body1
      content: |
        Simpler code is easier to understand, test, and maintain. It often leads to fewer bugs and improves
        collaboration as more team members can understand and contribute to the codebase.
    - variant: subtitle1
      content: Implementation
    - variant: body1
      content: |
        To keep things simple, always look for the most straightforward solution. Avoid over-engineering and
        adding unnecessary features or layers.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        When designing a function to calculate the area of a rectangle, stick to the basic formula (length *
        width). Resist the urge to add unrelated features, like logging or input validation, to the function.
    - variant: subtitle1
      content: Conclusion
    - variant: body1
      content: |
        KISS is about the elegance and power of simplicity. In a world where complexity is often seen as
        sophistication, KISS reminds us that simple solutions are often the best.
  You Aren't Gonna Need It (YAGNI):
    - variant: subtitle1
      content: Overview
    - variant: body1
      content: |
        YAGNI is a principle of extreme programming that states a programmer should not add functionality until
        deemed necessary. It's a caution against over-engineering.
    - variant: subtitle1
      content: Benefits
    - variant: body1
      content: |
        Following YAGNI can save time and resources, and help keep the software product lean and focused. It
        avoids the burden of maintaining unused code.
    - variant: subtitle1
      content: Implementation
    - variant: body1
      content: |
        When developing, always question the necessity of each feature. Add something only when it's immediately
        needed, not just because it might be needed in the future.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        If you're building a website and think, "I might need a user forum in the future," resist the urge to
        implement it now. Wait until it's clear that a forum is necessary.
    - variant: subtitle1
      content: Conclusion
    - variant: body1
      content: |
        YAGNI is a reminder to stay focused on the present requirements and avoid getting sidetracked by
        features and functionalities that might never be needed.
