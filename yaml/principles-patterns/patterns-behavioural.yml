---
title: <i>Behavioural</i> Design Patterns <br /> in Software Development
before:
  - variant: body1
    content: |
      The Chain of Responsibility pattern is a fundamental behavioral design pattern that allows an object
      to pass the request along a chain of handlers. Upon receiving a request, each handler decides either
      to process the request or to pass it to the next handler in the chain. This pattern is particularly
      useful for implementing a system where multiple objects may handle a request without any of them
      necessarily being the receiver for the request.
accordion:
  Visitor:
    - variant: body1
      content: |
        The Visitor design pattern is a behavioral design pattern that allows for new operations to be added to 
        objects without modifying their classes. By introducing a visitor class that implements operations to be 
        performed on various elements of an object structure, this pattern separates an algorithm from the object 
        structure it operates on. This facilitates adding new operations to existing object structures without 
        altering their implementations, making it particularly useful in situations where an object structure 
        includes many classes with differing interfaces, and you need to perform operations across these objects 
        that depend on their concrete classes.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        The Visitor pattern is about encapsulating operations in a separate object known as a 'visitor', which is 
        then passed to elements of an object structure. These elements then accept this visitor, which, in turn, 
        performs the operation on them. This approach allows for the addition of new operations without changing 
        the classes of the elements on which it operates.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
          <li>Visitor: Interface or abstract class declaring a visit operation for each class of ConcreteElement 
            in the object structure. The operation's name and signature identify the class that sends the visit 
            request to the visitor.</li>
          <li>ConcreteVisitor: Each implements operations defined by the Visitor. Each operation implements a 
            fragment of the algorithm defined for the corresponding class of object in the structure.</li>
          <li>Element: Defines an accept method that takes a visitor as an argument.</li>
          <li>ConcreteElement: Implements an accept method that typically calls the visit method on the visitor, 
            with this as its argument.</li>
          <li>ObjectStructure: A collection of Elements able to enumerate its elements and provide a high-level 
            interface to allow the visitor to visit its elements.</li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        Consider a computer hardware system where we want to perform operations (like updateDriver or 
        diagnoseHardware) on various components without altering their classes.
    - variant: body1
      content: |
        class ComputerPartVisitor {
          visitComputer(part) {}
          visitMouse(part) {}
          visitKeyboard(part) {}
          visitMonitor(part) {}
        }

        class ComputerPart {
          accept(computerPartVisitor) {}
        }

        class Computer extends ComputerPart {
          constructor() {
            super();
            this.parts = [new Mouse(), new Keyboard(), new Monitor()];
          }

          accept(computerPartVisitor) {
            this.parts.forEach(part => part.accept(computerPartVisitor));
            computerPartVisitor.visitComputer(this);
          }
        }

        class Mouse extends ComputerPart {
          accept(computerPartVisitor) {
            computerPartVisitor.visitMouse(this);
          }
        }

        class Keyboard extends ComputerPart {
          accept(computerPartVisitor) {
            computerPartVisitor.visitKeyboard(this);
          }
        }

        class Monitor extends ComputerPart {
          accept(computerPartVisitor) {
            computerPartVisitor.visitMonitor(this);
          }
        }

        class ComputerPartUpdateVisitor extends ComputerPartVisitor {
          visitComputer(part) {
            console.log('Updating computer...');
          }

          visitMouse(part) {
            console.log('Updating mouse driver...');
          }

          visitKeyboard(part) {
            console.log('Updating keyboard driver...');
          }

          visitMonitor(part) {
            console.log('Updating monitor firmware...');
          }
        }

        // Usage
        const computer = new Computer();
        const updateVisitor = new ComputerPartUpdateVisitor();
        computer.accept(updateVisitor);
    - variant: body1
      content: |
        In this example, ComputerPart and its subclasses (Mouse, Keyboard, Monitor) represent the Element hierarchy. 
        ComputerPartVisitor is the Visitor interface with a visit operation for each ConcreteElement. 
        ComputerPartUpdateVisitor is a ConcreteVisitor implementing specific operations to be performed on each 
        computer part.
    - variant: body1
      content: |
        The Visitor pattern decouples the operations from the object structure, making it easier to add new 
        operations without changing the structures on which they operate. This approach promotes flexibility and reuse 
        of the operation implementation.
  Template Method:
    - variant: body1
      content: |
        The Template Method design pattern is a behavioral design pattern that defines the skeleton of an algorithm 
        in the superclass but lets subclasses override specific steps of the algorithm without changing its structure. 
        This pattern is particularly useful when there is a multi-step process that requires flexibility in some of 
        its steps, allowing customization by clients without altering the core algorithm's architecture.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        The core idea behind the Template Method pattern is to encapsulate the invariant parts of an algorithm within 
        a base class "template method" and defer the variable parts to subclasses. This approach enables the reuse of 
        the algorithm structure while providing a mechanism to extend the behavior of individual steps in the process. 
        It promotes code reuse and offers a straightforward way to customize and extend standard behaviors.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
          <li>AbstractClass: Defines abstract primitive operations that concrete subclasses should implement and a 
            template method that outlines the algorithm's skeleton, calling the primitive operations as needed.</li>
          <li>ConcreteClass: Implements the primitive operations to carry out subclass-specific steps of the 
            algorithm.</li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        Imagine a software framework for building different types of reports, where each report has common steps 
        (like collecting data and rendering a report) but may vary in the way data is processed and presented.
    - variant: code
      content: |       
        class ReportGenerator {
          // This is the template method.
          generateReport() {
            this.collectData();
            this.processData();
            this.renderReport();
          }

          collectData() {
            console.log('Collecting data...');
          }

          // This method should be overridden.
          processData() {
            throw new Error('ProcessData should be implemented by subclasses');
          }

          renderReport() {
            console.log('Rendering report...');
          }
        }

        class SalesReportGenerator extends ReportGenerator {
          processData() {
            console.log('Processing sales data...');
          }
        }

        class InventoryReportGenerator extends ReportGenerator {
          processData() {
            console.log('Processing inventory data...');
          }
        }

        // Usage
        const salesReport = new SalesReportGenerator();
        salesReport.generateReport(); // Collecting data... Processing sales data... Rendering report...

        const inventoryReport = new InventoryReportGenerator();
        inventoryReport.generateReport(); // Collecting data... Processing inventory data... Rendering report...
    - variant: body1
      content: |
        In this example, ReportGenerator serves as the AbstractClass, providing a template method generateReport() 
        that defines the algorithm's structure. The processData() method is the step that varies and is therefore 
        left for subclasses (SalesReportGenerator and InventoryReportGenerator) to implement, providing their 
        specific processing logic.
    - variant: body1
      content: |
        The Template Method pattern encapsulates what is common and standardizes the algorithm's framework while 
        offering the flexibility to vary parts of the algorithm as required by different contexts. This design 
        pattern simplifies the development of extensions and modifications, ensuring that the overarching logic 
        remains consistent and correct.
  Memento:
    - variant: body1
      content: |
        The Memento design pattern is a behavioral pattern that provides the ability to restore an object to its 
        previous state (undo via rollback) without revealing details about its implementation. This pattern is 
        particularly useful in applications where the ability to revert to a previous state is a key feature, such 
        as in text editors for undoing changes or in game software for saving and loading game progress.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        The essence of the Memento pattern is to capture and externalize an object's internal state so that the 
        object can be returned to this state later. It thus encapsulates the complexities of the internal state 
        within a memento object, preventing the object's encapsulation from being compromised. This approach allows 
        for the preservation and restoration of object states without violating the tenets of encapsulation.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
          <li>Originator: The object whose state needs to be saved and restored.</li>
          <li>Memento: A lightweight representation of the originator's state. It stores the necessary state of 
            the originator, as defined by the originator, to be able to restore to its state.</li>
          <li>Caretaker: Manages and protects the memento without examining its contents or its encapsulated 
            state.</li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        Imagine a simple text editor application that allows users to type text and undo their actions if necessary. 
        Here’s how the Memento pattern can be applied:
    - variant: body1
      content: |
        class TextEditor {
          constructor(content = '') {
            this.content = content;
          }

          type(words) {
            this.content += ' ' + words;
          }

          save() {
            return new Memento(this.content);
          }

          restore(memento) {
            this.content = memento.getContent();
          }
        }

        class Memento {
          constructor(content) {
            this.content = content;
          }

          getContent() {
            return this.content;
          }
        }

        class Caretaker {
          constructor() {
            this.mementos = [];
          }

          addMemento(memento) {
            this.mementos.push(memento);
          }

          getMemento(index) {
            return this.mementos[index];
          }
        }

        // Usage
        const editor = new TextEditor();
        const caretaker = new Caretaker();

        editor.type('This is the first sentence.');
        editor.type('This is the second.');

        // Save state
        caretaker.addMemento(editor.save());

        // Type more and undo to saved state
        editor.type('And this is going to be removed.');
        console.log(editor.content); // Output before undo

        editor.restore(caretaker.getMemento(0));
        console.log(editor.content); // Output after undo
    - variant: body1
      content: |
        In this example, TextEditor acts as the Originator, capable of creating mementos of its current state and 
        restoring its state from a memento. Memento encapsulates the state of a TextEditor instance. Caretaker, 
        meanwhile, keeps a list of mementos, allowing users to revert the TextEditor to a previous state.
    - variant: body1
      content: |
        The Memento pattern allows for the efficient tracking and reversal of changes to an object's state, 
        facilitating features like undo mechanisms in a way that respects the encapsulation of the object's internal 
        structure. This pattern is invaluable in scenarios where it's crucial to be able to revert to prior states 
        without maintaining a cumbersome history of changes directly within the objects of interest.
  Mediator:
    - variant: body1
      content: |
        The Mediator design pattern is a behavioral pattern that aims to reduce the complexity and dependencies 
        between tightly coupled objects communicating directly with each other. By introducing a mediator object, 
        this pattern encapsulates how a set of objects interact, promoting loose coupling by preventing objects 
        from referring to each other explicitly. The mediator enables objects to communicate indirectly through 
        it, centralizing the control of interactions.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        At its core, the Mediator pattern facilitates the principle of least knowledge, where an object should only 
        know as little as possible about how other objects operate, thereby reducing system complexity. This pattern 
        is particularly beneficial in scenarios where multiple components need to interact in a well-defined but 
        complex manner, as it centralizes communication logic that might otherwise be distributed among many objects.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
        <li>Mediator: Defines the interface for communication between Colleague objects.</li>
        <li>ConcreteMediator: Implements the Mediator interface and coordinates communication between Colleague 
          objects. It knows and maintains its colleagues.</li>
        <li>Colleague: Defines an interface for communicating with other Colleagues through the Mediator. Each 
          Colleague knows its Mediator object.</li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        Consider a scenario in an air traffic control system where multiple flights need to coordinate takeoffs and 
        landings with the control tower. The control tower (mediator) manages which flights can take off or land at 
        any given time, preventing direct communication between flights (colleagues).
    - variant: code
      content: |
        class ControlTower {
          constructor() {
            this.flights = [];
          }

          registerFlight(flight) {
            this.flights.push(flight);
            flight.setControlTower(this);
          }

          givePermissionToLand(flight) {
            for (let f of this.flights) {
              if (f !== flight && f.isInAirspace()) {
                console.log(`Flight ${flight.id} waiting for clearance.`);
                return false;
              }
            }
            console.log(`Flight ${flight.id} cleared to land.`);
            return true;
          }
        }

        class Flight {
          constructor(id) {
            this.id = id;
            this.controlTower = null;
          }

          setControlTower(controlTower) {
            this.controlTower = controlTower;
          }

          isInAirspace() {
            // Implementation would determine if the flight is currently in the airspace and seeking to land.
            return true; // Simplified for example
          }

          requestLanding() {
            return this.controlTower.givePermissionToLand(this);
          }
        }

        // Usage
        const controlTower = new ControlTower();
        const flight1 = new Flight(1);
        const flight2 = new Flight(2);

        controlTower.registerFlight(flight1);
        controlTower.registerFlight(flight2);

        flight1.requestLanding();
        flight2.requestLanding();
    - variant: body1
      content: |
        In this simplified example, ControlTower acts as the ConcreteMediator, managing interactions between Flight 
        instances (Colleagues). When a flight wants to land, it requests permission from the control tower, which 
        checks the status of other flights in the airspace before granting landing permission. This setup prevents 
        flights from needing to communicate directly with each other, encapsulating the coordination logic within 
        the mediator.
    - variant: body1
      content: |
        The Mediator pattern streamlines complex communication and interactions within a system, making it easier 
        to maintain and extend. It shines in systems where components can perform their duties more efficiently by 
        delegating communication responsibilities to a central authority.
  Iterator:
    - variant: body1
      content: |
        The Iterator design pattern is a behavioral pattern that provides a way to access the elements of an 
        aggregate object sequentially without exposing its underlying representation. This pattern is especially 
        useful for traversing collections of objects in a uniform manner, regardless of the specific types of 
        collections being used. By encapsulating the traversal logic within an iterator, collections can change 
        their internal structure without affecting the clients that iterate over them.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        The core idea behind the Iterator pattern is to abstract the process of scanning through elements, making 
        it possible to use the same logic to traverse different types of collections. This not only simplifies 
        client code but also enhances modularity and facilitates maintenance. The pattern is widely used in modern 
        software development, where handling collections of objects is a common task.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
          <li>Iterator: Defines an interface for accessing and traversing elements.</li>
          <li>ConcreteIterator: Implements the iterator interface and keeps track of the current position in the 
            traversal of the aggregate.</li>
          <li>Aggregate: Defines an interface for creating an Iterator object.</li>
          <li>ConcreteAggregate: Implements the Aggregate interface and returns an instance of the corresponding 
            ConcreteIterator.</li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        Let's consider a simple example where the Iterator pattern is used to iterate over a collection of books 
        in a library. This example demonstrates how the pattern enables clients to iterate over a collection without 
        knowing the internal structure of the collection.
    - variant: code
      content: |
        class Book {
          constructor(title) {
            this.title = title;
          }
        }

        class BookShelf {
          constructor() {
            this.books = [];
          }

          addBook(book) {
            this.books.push(book);
          }

          createIterator() {
            return new BookShelfIterator(this);
          }
        }

        class BookShelfIterator {
          constructor(bookShelf) {
            this.bookShelf = bookShelf;
            this.index = 0;
          }

          hasNext() {
            return this.index < this.bookShelf.books.length;
          }

          next() {
            return this.bookShelf.books[this.index++];
          }
        }

        // Usage
        const bookShelf = new BookShelf();
        bookShelf.addBook(new Book("Design Patterns: Elements of Reusable Object-Oriented Software"));
        bookShelf.addBook(new Book("Refactoring: Improving the Design of Existing Code"));

        const iterator = bookShelf.createIterator();
        while (iterator.hasNext()) {
          const book = iterator.next();
          console.log(book.title);
        }
    - variant: body1
      content: |
        In this example, BookShelf acts as a concrete aggregate, and BookShelfIterator is the concrete iterator that 
        allows traversal over the books in the bookshelf. Clients, such as the usage example, interact with the 
        collection through the iterator interface, enabling seamless iteration over the collection without direct 
        access to its internal structure.
    - variant: body1
      content: |
        The Iterator pattern facilitates the implementation of efficient and encapsulated traversal mechanisms, making 
        it easier to work with complex data structures. It's a cornerstone of object-oriented design and is deeply 
        integrated into many programming languages and frameworks.

  Chain Of Responsibility:
    - variant: body1
      content: |
        The Chain of Responsibility pattern is a fundamental behavioral design pattern that allows an object
        to pass the request along a chain of handlers. Upon receiving a request, each handler decides either
        to process the request or to pass it to the next handler in the chain. This pattern is particularly
        useful for implementing a system where multiple objects may handle a request without any of them
        necessarily being the receiver for the request.
    - variant: subtitle1
      content: |
        Concept
    - variant: body1
      content: |
        At the heart of the Chain of Responsibility pattern is the idea that multiple objects can have the 
        opportunity to handle a request, thereby decoupling senders and receivers. A request from a client 
        is sent to a chain of objects without explicitly specifying the receiver. This allows for a high 
        level of flexibility in distributing responsibilities among objects, as the request can be handled 
        at any point in the chain.
    - variant: subtitle1
      content: |
        Structure
    - variant: body1
      content: |
        <ul>
          <li>
            Handler: Defines an interface for handling requests and optionally implements the successor link. 
            The handler has a reference to the next handler in the chain and can choose to pass the request 
            along the chain.
          </li>
          <li>
            ConcreteHandler: Handles the request it is responsible for. If it can handle the request, it does 
            so; otherwise, it forwards the request to its successor in the chain.
          </li>
        </ul>
    - variant: subtitle1
      content: |
        Example
    - variant: body1
      content: |
        In the context of a web application, the Chain of Responsibility pattern can be used to handle HTTP 
        requests. Different handlers can process various aspects of the request, such as authentication, logging, 
        or data validation, before the request reaches the core processing logic.
        Example
    - variant: code
      content: |
        class Handler {
          constructor(successor = null) {
            this.successor = successor;
          }

          handle(request) {
            if (this.successor) {
              this.successor.handle(request);
            }
          }
        }

        class AuthenticationHandler extends Handler {
          handle(request) {
            console.log('Handling authentication');
            if (request.isAuthenticated) {
              super.handle(request);
            } else {
              console.log('Authentication failed');
            }
          }
        }

        class LoggingHandler extends Handler {
          handle(request) {
            console.log('Logging request');
            super.handle(request);
          }
        }

        class CoreProcessingHandler extends Handler {
          handle(request) {
            console.log('Processing request core');
            // Core request processing logic here
          }
        }

        // Usage
        const coreProcessingHandler = new CoreProcessingHandler();
        const loggingHandler = new LoggingHandler(coreProcessingHandler);
        const authenticationHandler = new AuthenticationHandler(loggingHandler);

        const request = { isAuthenticated: true };
        authenticationHandler.handle(request);
  Observer:
    - variant: body1
      content: |
        The Observer pattern is one of the most widely used behavioural patterns. It defines a one-to-many
        dependency between objects, allowing an object to notify other objects about changes in its state.
    - variant: subtitle1
      content: Concept
    - variant: body1
      content: |
        In this pattern, an object, known as the 'subject,' maintains a list of its dependents, 'observers,' and
        notifies them automatically of any state changes. This is particularly useful in scenarios where a
        change in one object requires changing others, and you don't know how many objects need to be changed.
    - variant: subtitle1
      content: Structure
    - variant: body1
      content: |
        Subject: Holds references to observers and provides an interface for attaching and detaching them.
        Observer: Defines an updating interface for objects that need to be notified of a subject's changes.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        In JavaScript, you can implement the Observer pattern as follows:
    - variant: code
      content: |
        class Subject {
          constructor() {
              this.observers = [];
          }

          subscribe(observer) {
              this.observers.push(observer);
          }

          unsubscribe(observer) {
              this.observers = this.observers.filter(obs => obs !== observer);
          }

          notify(data) {
              this.observers.forEach(observer => observer.update(data));
          }
        }

        class Observer {
            update(data) {
                console.log(`Observer received data: ${data}`);
            }
        }

        // Usage
        const subject = new Subject();
        const observer1 = new Observer();
        const observer2 = new Observer();

        subject.subscribe(observer1);
        subject.subscribe(observer2);
        subject.notify("Hello Observers!");
  Strategy:
    - variant: body1
      content: |
        The Strategy pattern enables selecting an algorithm's behavior at runtime. Instead of implementing a
        single algorithm directly, code receives run-time instructions specifying which of a family of
        algorithms to use.
    - variant: subtitle1
      content: Concept
    - variant: body1
      content: |
        This pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable.
        Strategy lets the algorithm vary independently from clients that use it. It's useful when there are
        multiple ways to achieve a task, and the best approach depends on the context.
    - variant: subtitle1
      content: Structure
    - variant: body1
      content: |
        Strategy: An interface common to all supported algorithms. ConcreteStrategy: Implements different
        algorithms following the Strategy interface.
        Context: Maintains a reference to a Strategy object and
        communicates with this object to call the algorithm defined by the Strategy.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        Using pseudo-code for the Strategy pattern:
    - variant: code
      content: |
        interface Strategy {
            execute(data);
        }

        class ConcreteStrategyA implements Strategy {
            execute(data) {
                // Implementation of algorithm A
            }
        }

        class ConcreteStrategyB implements Strategy {
            execute(data) {
                // Implementation of algorithm B
            }
        }

        class Context {
            constructor(strategy) {
                this.strategy = strategy;
            }

            executeStrategy(data) {
                this.strategy.execute(data);
            }
        }

        // Usage
        const strategyA = new ConcreteStrategyA();
        const context = new Context(strategyA);
        context.executeStrategy("data");`}
    - variant: body1
      content: |
        This pattern offers flexibility in choosing which algorithm to run at runtime and isolates the algorithm
        implementation from the code that uses it.
  Command:
    - variant: body1
      content: |
        The Command pattern encapsulates a request as an object, thereby allowing users to parameterize clients
        with queues, requests, and operations. It also allows for the support of undoable operations.
    - variant: subtitle1
      content: Concept
    - variant: body1
      content: |
        The key idea here is to provide a means to separate the responsibilities of issuing commands from
        anything executing commands, decoupling sender and receiver. Commands are first-class objects with their
        own lifetime and can be composed and passed around like any other objects.
    - variant: subtitle1
      content: Structure
    - variant: body1
      content: |
        Command: Declares an interface for executing an operation. ConcreteCommand: Defines a binding between a
        Receiver object and an action. Client: Creates a ConcreteCommand object and sets its receiver. Invoker:
        Asks the command to carry out the request. Receiver: Knows how to perform the operations associated with
        carrying out a request.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        Here's a simple implementation in pseudo-code:
    - variant: code
      content: |
        interface Command {
            execute();
        }

        class Light {
            turnOn() { /* ... */ }
            turnOff() { /* ... */ }
        }

        class TurnOnCommand implements Command {
            constructor(light) {
                this.light = light;
            }
            execute() {
                this.light.turnOn();
            }
        }

        class TurnOffCommand implements Command {
            constructor(light) {
                this.light = light;
            }
            execute() {
                this.light.turnOff();
            }
        }

        class RemoteControl {
            submit(command) {
                command.execute();
            }
        }

        // Usage
        const light = new Light();
        const turnOnCommand = new TurnOnCommand(light);
        const turnOffCommand = new TurnOffCommand(light);

        const remote = new RemoteControl();
        remote.submit(turnOnCommand); // Turns the light on
        remote.submit(turnOffCommand); // Turns the light off
  State:
    - variant: body1
      content: |
        The State pattern allows an object to alter its behavior when its internal state changes. The object
        will appear to change its class.
    - variant: subtitle1
      content: Concept
    - variant: body1
      content: |
        It's particularly useful in scenarios where an object's behavior is influenced by its state, and it must
        change its behavior at runtime depending on that state. This pattern puts each branch of the conditional
        in a separate class.
    - variant: subtitle1
      content: Structure
    - variant: body1
      content: |
        State: An interface defining an action that is associated with a state of the Context.
        ConcreteStates: Classes that implement the State interface and define behavior for a state of the Context.
        Context: Maintains an instance of a ConcreteState subclass that defines the current state.
    - variant: subtitle1
      content: Example
    - variant: body1
      content: |
        An implementation in JavaScript could look like this:
    - variant: code
      content: |
        class State {
            handle(context) {
                // Handle request here
            }
        }

        class ConcreteStateA extends State {
            handle(context) {
                console.log('Handling in the state A');
                context.state = new ConcreteStateB();
            }
        }

        class ConcreteStateB extends State {
            handle(context) {
                console.log('Handling in the state B');
                context.state = new ConcreteStateA();
            }
        }

        class Context {
            constructor() {
                this.state = new ConcreteStateA();
            }

            request() {
                this.state.handle(this);
            }
        }

        // Usage
        const context = new Context();
        context.request(); // Handling in the state A
        context.request(); // Handling in the state B
