---
title: <i>Creational</i> Design Patterns <br /> in Software Development
before:
  - variant: subtitle1
    content: |
      Creational design patterns abstract the instantiation process. They help make a system independent of how its objects are created, composed, and represented. A class creational pattern uses inheritance to vary the class that’s instantiated, whereas an object creational pattern will delegate instantiation to another object. Below, we explore several key creational design patterns, providing insights into their purposes, structures, and applications, using JavaScript for illustrations.
accordion:
  Factory Method:
    - variant: subtitle1
      content: |
        The Factory Method Pattern defines an interface for creating an object, but lets subclasses alter the type of objects that will be created.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        This pattern involves a single class which is responsible to create an object while making sure that only one object gets created. It provides a way to delegate the instantiation logic to child classes.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Creator: A class that contains the implementations for all of the methods to manipulate products, including the factory method.
        ConcreteCreator: Overrides the factory method to return an instance of a ConcreteProduct.
    - variant: h6
      content: Example
    - variant: code
      content: |
        class Creator {
            factoryMethod() {
                return new ConcreteProduct();
            }
            // Other methods
        }

        class ConcreteCreator extends Creator {
            factoryMethod() {
                return new ConcreteProduct();
            }
        }

        class ConcreteProduct {
            // Product implementation
        }

        // Usage
        const creator = new ConcreteCreator();
        const product = creator.factoryMethod();
  Abstract Factory:
    - variant: subtitle1
      content: |
        The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        This pattern involves multiple Factory Methods, one for each type of object to be created and an abstract class to define the standard interface.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        AbstractFactory: Declares an interface for operations that create abstract product objects.
        ConcreteFactory: Implements the operations to create concrete product objects.
        AbstractProduct: Declares an interface for a type of product object.
        ConcreteProduct: Defines a product object to be created by the corresponding concrete factory.
    - variant: h6
      content: Example
    - variant: code
      content: |
        class AbstractFactory {
            createProductA() {}
            createProductB() {}
        }

        class ConcreteFactory1 extends AbstractFactory {
            createProductA() {
                return new ProductA1();
            }
            createProductB() {
                return new ProductB1();
            }
        }

        class ConcreteFactory2 extends AbstractFactory {
            createProductA() {
                return new ProductA2();
            }
            createProductB() {
                return new ProductB2();
            }
        }

        class ProductA1 {}
        class ProductB1 {}
        class ProductA2 {}
        class ProductB2 {}

        // Usage
        const factory1 = new ConcreteFactory1();
        const productA1 = factory1.createProductA();
        const productB1 = factory1.createProductB();
  Builder:
    - variant: subtitle1
      content: |
        The Builder Pattern separates the construction of a complex object from its representation, so that the same construction process can create different representations.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        This pattern allows you to produce different types and representations of an object using the same construction code.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Builder: Interface that defines all the steps needed to construct a product.
        ConcreteBuilder: Implements the Builder interface and provides an interface for retrieving the product.
        Director: Constructs an object using the Builder interface.
        Product: The final object that is being built.
    - variant: h6
      content: Example
    - variant: code
      content: |
        class Builder {
            // Builder steps
        }

        class ConcreteBuilder extends Builder {
            constructor() {
                super();
                this.product = new Product();
            }
            buildPartA() {
                // build part A of the product
            }
            buildPartB() {
                // build part B of the product
            }
            getResult() {
                return this.product;
            }
        }

        class Director {
            construct(builder) {
                builder.buildPartA();
                builder.buildPartB();
                return builder.getResult();
            }
        }

        class Product {
            // The final object
        }

        // Usage
        const director = new Director();
        const builder = new ConcreteBuilder();
        const product = director.construct(builder);
  Prototype:
    - variant: subtitle1
      content: |
        The Prototype Pattern creates new objects, but instead of creating non-initialized objects, it returns objects that are initialized with values it copied from a prototype – or sample – object.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        The Prototype pattern is used when creating an instance of a class is more expensive or complex than copying an existing instance.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Prototype: Declares an interface for cloning itself.
        ConcretePrototype: Implements an operation for cloning itself.
        Client: Creates a new object by asking a prototype to clone itself.
    - variant: h6
      content: Example
    - variant: code
      content: |
        class Prototype {
            clone() {
                // clone the prototype
            }
        }

        class ConcretePrototype extends Prototype {
            constructor() {
                super();
                // initialize with default values
            }
            clone() {
                return Object.assign({}, this);
            }
        }

        // Usage
        const prototype = new ConcretePrototype();
        const clonedObject = prototype.clone();
  Singleton:
    - variant: subtitle1
      content: |
        The Singleton Pattern ensures a class has only one instance and provides a global point of access to it.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        Singleton pattern restricts a class from instantiating multiple objects. This pattern ensures a class has only one instance and provides a global point of access to it.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Instance: A private static variable that holds the one and only instance of the class.
        getInstance(): A public static method that returns the single instance of the class.
    - variant: h6
      content: Example
    - variant: code
      content: |
        class Singleton {
            constructor() {
                if (!Singleton.instance) {
                    Singleton.instance = this;
                }
                return Singleton.instance;
            }
            // other methods...
        }

        // Usage
        const instance1 = new Singleton();
        const instance2 = new Singleton();
        console.log(instance1 === instance2);  // true
