---
title: <i>Behavioural</i> Design Patterns <br /> in Software Development
before:
  - variant: subtitle1
    content: |
      Behavioural design patterns are fundamental to the structure and organization of software systems. They focus
      on how objects interact and communicate with each other, leading to efficient problem-solving and an
      enhanced understanding of the system's dynamics. Below, we explore several key behavioural design patterns,
      providing insights into their purposes, structures, and applications. To illustrate these patterns, I'll use
      pseudo-code or JavaScript where appropriate.
accordion:
  Observer:
    - variant: subtitle1
      content: |
        The Observer pattern is one of the most widely used behavioural patterns. It defines a one-to-many
        dependency between objects, allowing an object to notify other objects about changes in its state.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        In this pattern, an object, known as the 'subject,' maintains a list of its dependents, 'observers,' and
        notifies them automatically of any state changes. This is particularly useful in scenarios where a
        change in one object requires changing others, and you don't know how many objects need to be changed.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Subject: Holds references to observers and provides an interface for attaching and detaching them.
        Observer: Defines an updating interface for objects that need to be notified of a subject's changes.
    - variant: h6
      content: Example
    - variant: subtitle1
      content: |
        In JavaScript, you can implement the Observer pattern as follows:
    - variant: code
      content: |
        class Subject {
          constructor() {
              this.observers = [];
          }

          subscribe(observer) {
              this.observers.push(observer);
          }

          unsubscribe(observer) {
              this.observers = this.observers.filter(obs => obs !== observer);
          }

          notify(data) {
              this.observers.forEach(observer => observer.update(data));
          }
        }

        class Observer {
            update(data) {
                console.log(`Observer received data: ${data}`);
            }
        }

        // Usage
        const subject = new Subject();
        const observer1 = new Observer();
        const observer2 = new Observer();

        subject.subscribe(observer1);
        subject.subscribe(observer2);
        subject.notify("Hello Observers!");
  Strategy:
    - variant: subtitle1
      content: |
        The Strategy pattern enables selecting an algorithm's behavior at runtime. Instead of implementing a
        single algorithm directly, code receives run-time instructions specifying which of a family of
        algorithms to use.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        This pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable.
        Strategy lets the algorithm vary independently from clients that use it. It's useful when there are
        multiple ways to achieve a task, and the best approach depends on the context.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Strategy: An interface common to all supported algorithms. ConcreteStrategy: Implements different
        algorithms following the Strategy interface.
        Context: Maintains a reference to a Strategy object and
        communicates with this object to call the algorithm defined by the Strategy.
    - variant: h6
      content: Example
    - variant: subtitle1
      content: |
        Using pseudo-code for the Strategy pattern:
    - variant: code
      content: |
        interface Strategy {
            execute(data);
        }

        class ConcreteStrategyA implements Strategy {
            execute(data) {
                // Implementation of algorithm A
            }
        }

        class ConcreteStrategyB implements Strategy {
            execute(data) {
                // Implementation of algorithm B
            }
        }

        class Context {
            constructor(strategy) {
                this.strategy = strategy;
            }

            executeStrategy(data) {
                this.strategy.execute(data);
            }
        }

        // Usage
        const strategyA = new ConcreteStrategyA();
        const context = new Context(strategyA);
        context.executeStrategy("data");`}
    - variant: subtitle1
      content: |
        This pattern offers flexibility in choosing which algorithm to run at runtime and isolates the algorithm
        implementation from the code that uses it.
  Command:
    - variant: subtitle1
      content: |
        The Command pattern encapsulates a request as an object, thereby allowing users to parameterize clients
        with queues, requests, and operations. It also allows for the support of undoable operations.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        The key idea here is to provide a means to separate the responsibilities of issuing commands from
        anything executing commands, decoupling sender and receiver. Commands are first-class objects with their
        own lifetime and can be composed and passed around like any other objects.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        Command: Declares an interface for executing an operation. ConcreteCommand: Defines a binding between a
        Receiver object and an action. Client: Creates a ConcreteCommand object and sets its receiver. Invoker:
        Asks the command to carry out the request. Receiver: Knows how to perform the operations associated with
        carrying out a request.
    - variant: h6
      content: Example
    - variant: subtitle1
      content: |
        Here's a simple implementation in pseudo-code:
    - variant: code
      content: |
        interface Command {
            execute();
        }

        class Light {
            turnOn() { /* ... */ }
            turnOff() { /* ... */ }
        }

        class TurnOnCommand implements Command {
            constructor(light) {
                this.light = light;
            }
            execute() {
                this.light.turnOn();
            }
        }

        class TurnOffCommand implements Command {
            constructor(light) {
                this.light = light;
            }
            execute() {
                this.light.turnOff();
            }
        }

        class RemoteControl {
            submit(command) {
                command.execute();
            }
        }

        // Usage
        const light = new Light();
        const turnOnCommand = new TurnOnCommand(light);
        const turnOffCommand = new TurnOffCommand(light);

        const remote = new RemoteControl();
        remote.submit(turnOnCommand); // Turns the light on
        remote.submit(turnOffCommand); // Turns the light off
  State:
    - variant: subtitle1
      content: |
        The State pattern allows an object to alter its behavior when its internal state changes. The object
        will appear to change its class.
    - variant: h6
      content: Concept
    - variant: subtitle1
      content: |
        It's particularly useful in scenarios where an object's behavior is influenced by its state, and it must
        change its behavior at runtime depending on that state. This pattern puts each branch of the conditional
        in a separate class.
    - variant: h6
      content: Structure
    - variant: subtitle1
      content: |
        State: An interface defining an action that is associated with a state of the Context.
        ConcreteStates: Classes that implement the State interface and define behavior for a state of the Context.
        Context: Maintains an instance of a ConcreteState subclass that defines the current state.
    - variant: h6
      content: Example
    - variant: subtitle1
      content: |
              An implementation in JavaScript could look like this:
    - variant: code
      content: |
        class State {
            handle(context) {
                // Handle request here
            }
        }

        class ConcreteStateA extends State {
            handle(context) {
                console.log('Handling in the state A');
                context.state = new ConcreteStateB();
            }
        }

        class ConcreteStateB extends State {
            handle(context) {
                console.log('Handling in the state B');
                context.state = new ConcreteStateA();
            }
        }

        class Context {
            constructor() {
                this.state = new ConcreteStateA();
            }

            request() {
                this.state.handle(this);
            }
        }

        // Usage
        const context = new Context();
        context.request(); // Handling in the state A
        context.request(); // Handling in the state B
