name: Publish Code to GH Pages

on:
  workflow_call:
    # inputs:
    #   GhReleaseBranch:
    #     default: main
    #     required: true
    #     type: string
  workflow_dispatch:
    # inputs:
    #   GhReleaseBranch:
    #     default: main
    #     required: true
    #     type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: 'npm'

      - name: Build Project
        run: |
          npm install
          npm run build
          cp -rdf ./public/* ./dist
          cp ./dist/index.html ./dist/404.html

      # - name: Deploy to GitHub Pages
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GH_TOKEN }}
      #     publish_dir: ./dist  # or your build directory
      #     publish_branch: main  # branch of solidref.github.io
      #     user_name: 'GitHub Actions'
      #     user_email: 'actions@github.com'
      #     commit_message: 'Deploy project to GitHub Pages'

      - name: Deploy to GitHub Pages
        env:
          TARGET_REPO: solidref/solidref.github.io
          TARGET_BRANCH: main
          COMMIT_MESSAGE: Deploy project to GitHub Pages
          BUILD_DIR: dist
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Clone the GitHub Pages repository
          git clone https://${{secrets.GH_TOKEN}}@github.com/${TARGET_REPO}.git gh-pages

          # Cleanup repository from old build
          find ./gh-pages -not -iname *CNAME* -mindepth 1 -maxdepth 1 -exec rm -rf {} \;
          ls -la gh-pages/

          # Copy the build output to the cloned repository
          cp -r ${BUILD_DIR}/* gh-pages/
          ls -la gh-pages/

          # Commit and push the changes
          cd gh-pages
          git add .
          git commit -m "${COMMIT_MESSAGE}"
          git push origin ${TARGET_BRANCH}
