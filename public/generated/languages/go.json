{"name":"Go (Golang)","code":"go","birth":2009,"death":"N/A","inspiredBy":["c","oberon","pascal","limbo","python","alef"],"inspiring":["rust","nim","crystal"],"description":"Go, often referred to as Golang, is an open-source programming language developed at Google.\nIt is known for its simplicity, efficiency, and reliable concurrency handling. Go is statically\ntyped, compiled, and syntactically similar to C, but with memory safety, garbage collection,\nstructural typing, and CSP-style concurrency features. It's widely used in cloud and network\nservices, command-line tools, and web applications. A notable feature of Go is its efficient\nhandling of concurrent operations, making it a popular choice for building high-performance\napplications. Go's design is focused on simplicity and readability, which has led to its wide\nadoption in software engineering for scalable server-side applications. The language has a\nstrong standard library, robust tooling, and a rapidly growing ecosystem.\n","principles":{"principles_solid":[{"abbr":"SRP","examples":[{"title":"Good Example","code":"// Good example: Splitting responsibilities into separate functions\nfunc SaveUserData(userData UserData) {\n    // ...\n}\n\nfunc SendNotification(notification Notification) {\n    // ...\n}\n"},{"title":"Bad Example","code":"// Bad example: A function handling both user data management and user notifications\nfunc SaveUserData(userData UserData) {\n    // ...\n}\n"}]},{"abbr":"OCP","examples":[{"title":"Good Example","code":"// Good example: Using interfaces to allow extension without modification\ntype Shape interface {\n    CalculateArea() float64\n}\n\nfunc CalculateArea(shape Shape) float64 {\n    return shape.CalculateArea()\n}\n\ntype Rectangle struct {\n    Width  float64\n    Height float64\n}\n\nfunc (r Rectangle) CalculateArea() float64 {\n    return r.Width * r.Height\n}\n\ntype Circle struct {\n    Radius float64\n}\n\nfunc (c Circle) CalculateArea() float64 {\n    return 3.14 * c.Radius * c.Radius\n}\n"},{"title":"Bad Example","code":"// Bad example: Modifying existing code to add new functionality\nfunc CalculateArea(shape Shape) float64 {\n    switch shape.(type) {\n    case Rectangle:\n        rect := shape.(Rectangle)\n        return rect.Width * rect.Height\n    case Circle:\n        circle := shape.(Circle)\n        return 3.14 * circle.Radius * circle.Radius\n    }\n    return 0.0\n}\n"}]},{"abbr":"LSP","examples":[{"title":"Good Example","code":"// Good example: Derived types maintain the behavior of the base type\ntype FlyingBird interface {\n    Fly()\n}\n\ntype NonFlyingBird interface {\n    Walk()\n}\n"},{"title":"Bad Example","code":"// Bad example: Derived type changes the behavior of the base type\ntype Ostrich struct{}\n\nfunc (o Ostrich) Fly() {\n    panic(\"Ostrich can't fly\")\n}\n"}]},{"abbr":"ISP","examples":[{"title":"Good Example","code":"// Good example: Breaking down the interface into more specific ones\ntype Workable interface {\n    Work()\n}\n\ntype Eatable interface {\n    Eat()\n}\n"},{"title":"Bad Example","code":"// Bad example: A bulky interface\ntype Worker interface {\n    Work()\n    Eat()\n}\n"}]},{"abbr":"DIP","examples":[{"title":"Good Example","code":"// Good example: Both high-level and low-level modules depend on abstractions\ntype Device interface {\n    TurnOn()\n}\n\ntype Fan struct{}\n\nfunc (f Fan) TurnOn() {\n    // ...\n}\n\ntype SmartSwitch struct {\n    Device Device\n}\n\nfunc (ss SmartSwitch) Operate() {\n    ss.Device.TurnOn()\n}\n"},{"title":"Bad Example","code":"// Bad example: High-level module depending on a low-level module\ntype LightBulb struct{}\n\nfunc (lb LightBulb) TurnOn() {\n    // ...\n}\n\ntype Switch struct {\n    Bulb LightBulb\n}\n\nfunc (s Switch) Operate() {\n    s.Bulb.TurnOn()\n}\n"}]}],"principles_proprietary":[{"abbr":"DRY","examples":[{"title":"Good Example","code":"// Good example: Single function for repeated logic\nfunc AddTax(price, rate float64) float64 {\n    return price + (price * rate)\n}\n"},{"title":"Bad Example","code":"// Bad example: Repeated logic\nfunc AddTaxForFood(price float64) float64 {\n    return price + (price * 0.05)\n}\n\nfunc AddTaxForElectronics(price float64) float64 {\n    return price + (price * 0.05)\n}\n"}]},{"abbr":"KISS","examples":[{"title":"Good Example","code":"// Good example: Simplified approach\nfunc IsEven(num int) bool {\n    return num % 2 == 0\n}\n"},{"title":"Bad Example","code":"// Bad example: Overcomplicated way to check even numbers\nfunc IsEven(num int) bool {\n    return num % 2 == 0\n}\n"}]},{"abbr":"YAGNI","examples":[{"title":"Good Example","code":"// Good example: Only implement what's needed\ntype Car struct{}\n\nfunc (c Car) Drive() {\n    // ...\n}\n"},{"title":"Bad Example","code":"// Bad example: Adding unnecessary features\ntype Car struct{}\n\nfunc (c Car) Drive() {\n    // ...\n}\nfunc (c Car) Fly() {\n    // ...\n}\n"}]},{"abbr":"PLK","examples":[{"title":"Good Example","code":"// Good example: Using encapsulation\ntype Wallet struct {\n    money float64\n}\n\nfunc NewWallet(initialMoney float64) Wallet {\n    return Wallet{money: initialMoney}\n}\n\nfunc (w Wallet) GetMoney() float64 {\n    return w.money\n}\n\ntype Person struct {\n    wallet Wallet\n}\n\nfunc NewPerson(initialMoney float64) Person {\n    return Person{wallet: NewWallet(initialMoney)}\n}\n\nfunc (p Person) CanPurchase(itemPrice float64) bool {\n    return p.wallet.GetMoney() >= itemPrice\n}\n"},{"title":"Bad Example","code":"// Bad example: Accessing nested structures directly\ntype Wallet struct {\n    Money float64\n}\n\ntype Person struct {\n    Wallet Wallet\n}\n\nfunc Purchase(itemPrice float64, buyer Person) bool {\n    return buyer.Wallet.Money >= itemPrice\n}\n"}]},{"abbr":"SoC","examples":[{"title":"Good Example","code":"// Good example: Separating concerns into different methods or functions\ntype UserDataService struct{}\n\nfunc (uds UserDataService) FetchUserData() UserData {\n    // ...\n}\n\ntype UserLogic struct{}\n\nfunc (ul UserLogic) CalculateAge(user UserData) {\n    // ...\n}\n\ntype UserView struct{}\n\nfunc (uv UserView) Render(user UserData) {\n    // ...\n}\n"},{"title":"Bad Example","code":"// Bad example: Mixing data retrieval and presentation\ntype UserComponent struct{}\n\nfunc (uc UserComponent) FetchUserData() UserData {\n    // ...\n}\n\nfunc (uc UserComponent) Render(user UserData) {\n    // ...\n}\n\nfunc (uc UserComponent) CalculateAge(user UserData) {\n    // ...\n}\n"}]},{"abbr":"EffGo","title":"Effective Go","description":"A guide to Go's conventions and best practices, covering aspects like formatting, naming, and patterns for idiomatic Go code.","examples":[{"title":"Good Example","code":"// Using short, clear names for variables\nfunc Sum(a, b int) int {\n    return a + b\n}\n"},{"title":"Bad Example","code":"// Overly verbose and unclear naming\nfunc CalculateTheSumOfTwoNumbers(firstNumber, secondNumber int) int {\n    return firstNumber + secondNumber\n}\n"}]},{"abbr":"SimpRead","title":"Simplicity and Readability","description":"Core principles in Go, emphasizing the importance of writing straightforward, maintainable, and clear code.","examples":[{"title":"Good Example","code":"// Simple and readable function\nfunc Max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n"},{"title":"Bad Example","code":"// Unnecessarily complex function\nfunc Max(x, y int) int {\n    var max int\n    if x > y {\n        max = x\n    } else {\n        max = y\n    }\n    return max\n}\n"}]},{"abbr":"CompInherit","title":"Composition Over Inheritance","description":"A design principle in Go promoting the use of composition and interfaces for flexible and reusable code structures instead of classical inheritance.","examples":[{"title":"Good Example","code":"// Composition using interfaces and structs\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\ntype FileReader struct {}\nfunc (FileReader) Read(p []byte) (n int, err error) {\n    // Implementation\n}\n"},{"title":"Bad Example","code":"// Attempted inheritance-like structure\ntype Reader struct {}\ntype FileReader struct {\n    Reader\n}\n"}]},{"abbr":"ConcModel","title":"Concurrency Model","description":"Go's unique approach to concurrency, emphasizing communication through channel passing rather than shared memory.","examples":[{"title":"Good Example","code":"// Using channels for goroutine communication\nfunc produce(ch chan<- int) {\n    ch <- 10\n}\nfunc main() {\n    ch := make(chan int)\n    go produce(ch)\n    value := <-ch\n}\n"},{"title":"Bad Example","code":"// Sharing memory without channels\nvar sharedVar int\nfunc produce() {\n    sharedVar = 10\n}\nfunc main() {\n    go produce()\n    // Access sharedVar here\n}\n"}]},{"abbr":"InterfBehav","title":"Interface Satisfaction by Behavior","description":"In Go, a type satisfies an interface by implementing the methods of the interface, not through explicit declaration.","examples":[{"title":"Good Example","code":"// Implicitly satisfying an interface\ntype Logger interface {\n    Log(message string)\n}\ntype ConsoleLogger struct {}\nfunc (ConsoleLogger) Log(message string) {\n    fmt.Println(message)\n}\n"},{"title":"Bad Example","code":"// Explicit interface implementation (not a Go practice)\n// This is not valid in Go but shown for contrast\ntype Logger interface {\n    Log(message string)\n}\ntype ConsoleLogger struct {\n    Logger\n}\nfunc (ConsoleLogger) Log(message string) {\n    fmt.Println(message)\n}\n"}]},{"abbr":"ErrHandle","title":"Error Handling","description":"Go's approach to handling errors explicitly, encouraging developers to deal with errors systematically.","examples":[{"title":"Good Example","code":"// Explicit error checking\nfunc ReadFile(name string) ([]byte, error) {\n    data, err := ioutil.ReadFile(name)\n    if err != nil {\n        return nil, err\n    }\n    return data, nil\n}\n"},{"title":"Bad Example","code":"// Ignoring error handling\nfunc ReadFile(name string) []byte {\n    data, _ := ioutil.ReadFile(name)\n    return data\n}\n"}]},{"abbr":"PackManage","title":"Package Management","description":"Go's approach to organizing and managing packages, emphasizing simplicity and consistency.","examples":[{"title":"Good Example","code":"// Proper package organization\n// File: math/operations.go\npackage math\nfunc Add(a, b int) int {\n    return a + b\n"}]}]}}